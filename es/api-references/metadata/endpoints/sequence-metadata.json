{
  "components": {
    "schemas": {
      "ErrorWebrpcEndpoint": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "es-translated WebrpcEndpoint"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 0"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated endpoint error"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 400"
          }
        }
      },
      "ErrorWebrpcRequestFailed": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated WebrpcRequestFailed"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated -1"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated request failed"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 400"
          }
        }
      },
      "ErrorWebrpcBadRoute": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "es-translated WebrpcBadRoute"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated -2"
          },
          "msg": {
            "type": "es-translated string",
            "example": "es-translated bad route"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated 404"
          }
        }
      },
      "ErrorWebrpcBadMethod": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "es-translated WebrpcBadMethod"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated -3"
          },
          "msg": {
            "type": "es-translated string",
            "example": "es-translated bad method"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated 405"
          }
        }
      },
      "ErrorWebrpcBadRequest": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "es-translated WebrpcBadRequest"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated -4"
          },
          "msg": {
            "type": "es-translated string",
            "example": "es-translated bad request"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 400"
          }
        }
      },
      "ErrorWebrpcBadResponse": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated WebrpcBadResponse"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated -5"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated bad response"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 500"
          }
        }
      },
      "ErrorWebrpcServerPanic": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated WebrpcServerPanic"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated -6"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated server panic"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 500"
          }
        }
      },
      "ErrorWebrpcInternalError": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "es-translated WebrpcInternalError"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated -7"
          },
          "msg": {
            "type": "es-translated string",
            "example": "es-translated internal error"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 500"
          }
        }
      },
      "ErrorWebrpcClientDisconnected": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated WebrpcClientDisconnected"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated -8"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated client disconnected"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 400"
          }
        }
      },
      "ErrorWebrpcStreamLost": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "es-translated WebrpcStreamLost"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated -9"
          },
          "msg": {
            "type": "es-translated string",
            "example": "es-translated stream lost"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 400"
          }
        }
      },
      "ErrorWebrpcStreamFinished": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated WebrpcStreamFinished"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated -10"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated stream finished"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 200"
          }
        }
      },
      "ErrorUnauthorized": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated Unauthorized"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 1000"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated Unauthorized access"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 401"
          }
        }
      },
      "ErrorPermissionDenied": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated PermissionDenied"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 1001"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated Permission denied"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 403"
          }
        }
      },
      "ErrorSessionExpired": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated SessionExpired"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 1002"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated Session expired"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 403"
          }
        }
      },
      "ErrorMethodNotFound": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "es-translated MethodNotFound"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated 1003"
          },
          "msg": {
            "type": "es-translated string",
            "example": "es-translated Method not found"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated 404"
          }
        }
      },
      "ErrorRequestConflict": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated RequestConflict"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 1004"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated Conflict with target resource"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 409"
          }
        }
      },
      "ErrorFail": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "es-translated Fail"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 1005"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated Request Failed"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 500"
          }
        }
      },
      "ErrorGeoblocked": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "es-translated Geoblocked"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated 1006"
          },
          "msg": {
            "type": "es-translated string",
            "example": "es-translated Geoblocked region"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated 451"
          }
        }
      },
      "ErrorTimeout": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "es-translated Timeout"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated 2000"
          },
          "msg": {
            "type": "es-translated string",
            "example": "es-translated Request timed out"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated 408"
          }
        }
      },
      "ErrorInvalidArgument": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "es-translated InvalidArgument"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated 2001"
          },
          "msg": {
            "type": "es-translated string",
            "example": "es-translated Invalid argument"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 400"
          }
        }
      },
      "ErrorRequiredArgument": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "es-translated RequiredArgument"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 2002"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated Required argument missing"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 400"
          }
        }
      },
      "ErrorQueryFailed": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "es-translated QueryFailed"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated 2003"
          },
          "msg": {
            "type": "es-translated string",
            "example": "es-translated Query failed"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 400"
          }
        }
      },
      "ErrorValidationFailed": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "es-translated ValidationFailed"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 2004"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated Validation failed"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 400"
          }
        }
      },
      "ErrorRateLimited": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "es-translated RateLimited"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated 2005"
          },
          "msg": {
            "type": "es-translated string",
            "example": "es-translated Rate limited"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated 429"
          }
        }
      },
      "ErrorNotFound": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated NotFound"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 3000"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated Resource not found"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 400"
          }
        }
      },
      "ErrorProjectNotFound": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated ProjectNotFound"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 3002"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated Project not found"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 400"
          }
        }
      },
      "ErrorChainNotFound": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "es-translated ChainNotFound"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated 3003"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated Chain not found"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 400"
          }
        }
      },
      "ErrorTokenDirectoryDisabled": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "es-translated TokenDirectoryDisabled"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 4001"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated Token Directory is disabled"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 400"
          }
        }
      },
      "ContractType": {
        "type": "es-translated string",
        "description": "MOCKDATA + es-translated Represented as uint16 on the server side",
        "enum": [
          "es-translated UNKNOWN",
          "es-translated ERC20",
          "MOCKDATA + es-translated ERC721",
          "MOCKDATA + es-translated ERC1155"
        ]
      },
      "ResourceStatus": {
        "type": "es-translated string",
        "description": "es-translated Represented as uint32 on the server side",
        "enum": [
          "es-translated NOT_AVAILABLE",
          "MOCKDATA + es-translated STALE",
          "es-translated AVAILABLE"
        ]
      },
      "PropertyType": {
        "type": "es-translated string",
        "description": "es-translated Represented as uint32 on the server side",
        "enum": [
          "es-translated INT",
          "MOCKDATA + es-translated STRING",
          "es-translated ARRAY",
          "MOCKDATA + es-translated GENERIC"
        ]
      },
      "SwapType": {
        "type": "es-translated string",
        "description": "es-translated Represented as uint32 on the server side",
        "enum": [
          "es-translated UNKNOWN",
          "MOCKDATA + es-translated BUY",
          "es-translated SELL"
        ]
      },
      "TaskStatus": {
        "type": "es-translated string",
        "description": "MOCKDATA + es-translated Represented as uint8 on the server side",
        "enum": [
          "MOCKDATA + es-translated QUEUED",
          "MOCKDATA + es-translated PAUSED",
          "MOCKDATA + es-translated FAILED",
          "es-translated COMPLETED"
        ]
      },
      "Version": {
        "type": "es-translated object",
        "required": [
          "MOCKDATA + es-translated webrpcVersion",
          "es-translated schemaVersion",
          "MOCKDATA + es-translated schemaHash",
          "es-translated appVersion"
        ],
        "properties": {
          "webrpcVersion": {
            "type": "es-translated string"
          },
          "schemaVersion": {
            "type": "es-translated string"
          },
          "schemaHash": {
            "type": "es-translated string"
          },
          "appVersion": {
            "type": "es-translated string"
          }
        }
      },
      "RuntimeStatus": {
        "type": "es-translated object",
        "required": [
          "MOCKDATA + es-translated healthOK",
          "es-translated startTime",
          "MOCKDATA + es-translated uptime",
          "es-translated uptimeString",
          "es-translated ver",
          "es-translated branch",
          "MOCKDATA + es-translated commitHash",
          "MOCKDATA + es-translated checks",
          "MOCKDATA + es-translated runnable"
        ],
        "properties": {
          "healthOK": {
            "type": "es-translated boolean"
          },
          "startTime": {
            "type": "es-translated string"
          },
          "uptime": {
            "type": "MOCKDATA + es-translated number"
          },
          "uptimeString": {
            "type": "es-translated string"
          },
          "ver": {
            "type": "es-translated string"
          },
          "branch": {
            "type": "es-translated string"
          },
          "commitHash": {
            "type": "es-translated string"
          },
          "checks": {
            "$ref": "es-translated #/components/schemas/RuntimeChecks"
          },
          "runnable": {
            "type": "es-translated object",
            "description": "es-translated map<string,RunnableStatus>",
            "additionalProperties": {
              "$ref": "MOCKDATA + es-translated #/components/schemas/RunnableStatus"
            }
          }
        }
      },
      "RunnableStatus": {
        "type": "es-translated object",
        "required": [
          "MOCKDATA + es-translated running",
          "es-translated restarts",
          "es-translated startTime",
          "MOCKDATA + es-translated lastError"
        ],
        "properties": {
          "running": {
            "type": "es-translated boolean"
          },
          "restarts": {
            "type": "MOCKDATA + es-translated number"
          },
          "startTime": {
            "type": "es-translated string"
          },
          "endTime": {
            "type": "es-translated string"
          },
          "lastError": {
            "type": "es-translated object"
          }
        }
      },
      "RuntimeChecks": {
        "type": "es-translated object"
      },
      "ContractIndex": {
        "type": "es-translated object",
        "required": [
          "es-translated chainId",
          "MOCKDATA + es-translated address",
          "MOCKDATA + es-translated type",
          "es-translated metadata",
          "es-translated contentHash",
          "es-translated deployed",
          "es-translated bytecodeHash",
          "es-translated notFound",
          "MOCKDATA + es-translated updatedAt",
          "es-translated status"
        ],
        "properties": {
          "chainId": {
            "type": "MOCKDATA + es-translated number"
          },
          "address": {
            "type": "es-translated string"
          },
          "type": {
            "$ref": "es-translated #/components/schemas/ContractType"
          },
          "metadata": {
            "type": "es-translated object",
            "description": "MOCKDATA + es-translated map<string,any>",
            "additionalProperties": {
              "type": "es-translated object"
            }
          },
          "contentHash": {
            "type": "MOCKDATA + es-translated number"
          },
          "deployed": {
            "type": "es-translated boolean"
          },
          "bytecodeHash": {
            "type": "es-translated string"
          },
          "notFound": {
            "type": "es-translated boolean"
          },
          "updatedAt": {
            "type": "es-translated string"
          },
          "queuedAt": {
            "type": "es-translated string"
          },
          "status": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/ResourceStatus"
          }
        }
      },
      "TokenIndex": {
        "type": "es-translated object",
        "required": [
          "MOCKDATA + es-translated key",
          "es-translated chainId",
          "MOCKDATA + es-translated contractAddress",
          "MOCKDATA + es-translated tokenId",
          "es-translated metadata",
          "MOCKDATA + es-translated updatedAt"
        ],
        "properties": {
          "key": {
            "type": "es-translated string"
          },
          "chainId": {
            "type": "MOCKDATA + es-translated number"
          },
          "contractAddress": {
            "type": "es-translated string"
          },
          "tokenId": {
            "type": "es-translated string"
          },
          "metadata": {
            "type": "es-translated object",
            "description": "MOCKDATA + es-translated map<string,any>",
            "additionalProperties": {
              "type": "es-translated object"
            }
          },
          "notFound": {
            "type": "es-translated boolean"
          },
          "lastFetched": {
            "type": "es-translated string"
          },
          "fetchCount": {
            "type": "MOCKDATA + es-translated number"
          },
          "updatedAt": {
            "type": "es-translated string"
          },
          "queuedAt": {
            "type": "es-translated string"
          }
        }
      },
      "ContractInfo": {
        "type": "es-translated object",
        "required": [
          "es-translated chainId",
          "MOCKDATA + es-translated address",
          "es-translated name",
          "MOCKDATA + es-translated type",
          "es-translated symbol",
          "MOCKDATA + es-translated logoURI",
          "es-translated deployed",
          "es-translated bytecodeHash",
          "MOCKDATA + es-translated extensions",
          "es-translated contentHash",
          "MOCKDATA + es-translated updatedAt",
          "es-translated notFound",
          "es-translated status"
        ],
        "properties": {
          "chainId": {
            "type": "MOCKDATA + es-translated number"
          },
          "address": {
            "type": "es-translated string"
          },
          "name": {
            "type": "es-translated string"
          },
          "type": {
            "type": "es-translated string"
          },
          "symbol": {
            "type": "es-translated string"
          },
          "decimals": {
            "type": "MOCKDATA + es-translated number"
          },
          "logoURI": {
            "type": "es-translated string"
          },
          "deployed": {
            "type": "es-translated boolean"
          },
          "bytecodeHash": {
            "type": "es-translated string"
          },
          "extensions": {
            "$ref": "es-translated #/components/schemas/ContractInfoExtensions"
          },
          "contentHash": {
            "type": "MOCKDATA + es-translated number"
          },
          "updatedAt": {
            "type": "es-translated string"
          },
          "notFound": {
            "type": "es-translated boolean"
          },
          "queuedAt": {
            "type": "es-translated string"
          },
          "status": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/ResourceStatus"
          }
        }
      },
      "ContractInfoExtensions": {
        "type": "es-translated object",
        "required": [
          "es-translated link",
          "es-translated description",
          "es-translated categories",
          "MOCKDATA + es-translated ogImage",
          "MOCKDATA + es-translated ogName",
          "es-translated originChainId",
          "MOCKDATA + es-translated originAddress",
          "es-translated blacklist",
          "MOCKDATA + es-translated verified",
          "es-translated verifiedBy",
          "MOCKDATA + es-translated featured"
        ],
        "properties": {
          "link": {
            "type": "es-translated string"
          },
          "description": {
            "type": "es-translated string"
          },
          "categories": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          },
          "ogImage": {
            "type": "es-translated string"
          },
          "ogName": {
            "type": "es-translated string"
          },
          "originChainId": {
            "type": "MOCKDATA + es-translated number"
          },
          "originAddress": {
            "type": "es-translated string"
          },
          "blacklist": {
            "type": "es-translated boolean"
          },
          "verified": {
            "type": "es-translated boolean"
          },
          "verifiedBy": {
            "type": "es-translated string"
          },
          "featured": {
            "type": "es-translated boolean"
          }
        }
      },
      "TokenMetadata": {
        "type": "es-translated object",
        "required": [
          "MOCKDATA + es-translated tokenId",
          "es-translated name",
          "es-translated attributes",
          "es-translated status"
        ],
        "properties": {
          "tokenId": {
            "type": "es-translated string"
          },
          "name": {
            "type": "es-translated string"
          },
          "description": {
            "type": "es-translated string"
          },
          "image": {
            "type": "es-translated string"
          },
          "video": {
            "type": "es-translated string"
          },
          "audio": {
            "type": "es-translated string"
          },
          "properties": {
            "type": "es-translated object",
            "description": "MOCKDATA + es-translated map<string,any>",
            "additionalProperties": {
              "type": "es-translated object"
            }
          },
          "attributes": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []map<string,any>",
            "items": {
              "type": "es-translated object",
              "description": "MOCKDATA + es-translated map<string,any>",
              "additionalProperties": {
                "type": "es-translated object"
              }
            }
          },
          "imageData": {
            "type": "es-translated string"
          },
          "externalUrl": {
            "type": "es-translated string"
          },
          "backgroundColor": {
            "type": "es-translated string"
          },
          "animationUrl": {
            "type": "es-translated string"
          },
          "decimals": {
            "type": "MOCKDATA + es-translated number"
          },
          "updatedAt": {
            "type": "es-translated string"
          },
          "assets": {
            "type": "MOCKDATA + es-translated array",
            "description": "es-translated []Asset",
            "items": {
              "$ref": "MOCKDATA + es-translated #/components/schemas/Asset"
            }
          },
          "status": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/ResourceStatus"
          },
          "queuedAt": {
            "type": "es-translated string"
          },
          "lastFetched": {
            "type": "es-translated string"
          }
        }
      },
      "PropertyFilter": {
        "type": "es-translated object",
        "required": [
          "es-translated name",
          "MOCKDATA + es-translated type"
        ],
        "properties": {
          "name": {
            "type": "es-translated string"
          },
          "type": {
            "$ref": "es-translated #/components/schemas/PropertyType"
          },
          "min": {
            "type": "MOCKDATA + es-translated number"
          },
          "max": {
            "type": "MOCKDATA + es-translated number"
          },
          "values": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []any",
            "items": {
              "type": "es-translated object"
            }
          }
        }
      },
      "Filter": {
        "type": "es-translated object",
        "properties": {
          "text": {
            "type": "es-translated string"
          },
          "properties": {
            "type": "MOCKDATA + es-translated array",
            "description": "es-translated []PropertyFilter",
            "items": {
              "$ref": "MOCKDATA + es-translated #/components/schemas/PropertyFilter"
            }
          }
        }
      },
      "Collection": {
        "type": "es-translated object",
        "required": [
          "MOCKDATA + es-translated id",
          "MOCKDATA + es-translated projectId",
          "es-translated metadata",
          "es-translated private"
        ],
        "properties": {
          "id": {
            "type": "MOCKDATA + es-translated number"
          },
          "projectId": {
            "type": "MOCKDATA + es-translated number"
          },
          "metadata": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/CollectionMetadata"
          },
          "private": {
            "type": "es-translated boolean"
          },
          "revealKey": {
            "type": "es-translated string"
          },
          "tokenCount": {
            "type": "MOCKDATA + es-translated number"
          },
          "createdAt": {
            "type": "es-translated string"
          },
          "updatedAt": {
            "type": "es-translated string"
          },
          "deletedAt": {
            "type": "es-translated string"
          },
          "baseURIs": {
            "$ref": "es-translated #/components/schemas/CollectionBaseURIs"
          },
          "assets": {
            "type": "MOCKDATA + es-translated array",
            "description": "es-translated []Asset",
            "items": {
              "$ref": "MOCKDATA + es-translated #/components/schemas/Asset"
            }
          }
        }
      },
      "CollectionMetadata": {
        "type": "es-translated object",
        "required": [
          "es-translated name"
        ],
        "properties": {
          "name": {
            "type": "es-translated string"
          },
          "description": {
            "type": "es-translated string"
          },
          "image": {
            "type": "es-translated string"
          },
          "externalLink": {
            "type": "es-translated string"
          },
          "properties": {
            "type": "es-translated object",
            "description": "MOCKDATA + es-translated map<string,any>",
            "additionalProperties": {
              "type": "es-translated object"
            }
          },
          "attributes": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []map<string,any>",
            "items": {
              "type": "es-translated object",
              "description": "MOCKDATA + es-translated map<string,any>",
              "additionalProperties": {
                "type": "es-translated object"
              }
            }
          }
        }
      },
      "CollectionBaseURIs": {
        "type": "es-translated object",
        "required": [
          "MOCKDATA + es-translated contractMetadataURI",
          "es-translated tokenMetadataURI"
        ],
        "properties": {
          "contractMetadataURI": {
            "type": "es-translated string"
          },
          "tokenMetadataURI": {
            "type": "es-translated string"
          }
        }
      },
      "ContractCollection": {
        "type": "es-translated object",
        "required": [
          "MOCKDATA + es-translated id",
          "es-translated chainId",
          "MOCKDATA + es-translated contractAddress",
          "es-translated collectionId"
        ],
        "properties": {
          "id": {
            "type": "MOCKDATA + es-translated number"
          },
          "chainId": {
            "type": "MOCKDATA + es-translated number"
          },
          "contractAddress": {
            "type": "es-translated string"
          },
          "collectionId": {
            "type": "MOCKDATA + es-translated number"
          }
        }
      },
      "Asset": {
        "type": "es-translated object",
        "required": [
          "MOCKDATA + es-translated id",
          "es-translated collectionId",
          "MOCKDATA + es-translated metadataField"
        ],
        "properties": {
          "id": {
            "type": "MOCKDATA + es-translated number"
          },
          "collectionId": {
            "type": "MOCKDATA + es-translated number"
          },
          "tokenId": {
            "type": "es-translated string"
          },
          "url": {
            "type": "es-translated string"
          },
          "metadataField": {
            "type": "es-translated string"
          },
          "filename": {
            "type": "es-translated string"
          },
          "filesize": {
            "type": "MOCKDATA + es-translated number"
          },
          "mimeType": {
            "type": "es-translated string"
          },
          "width": {
            "type": "MOCKDATA + es-translated number"
          },
          "height": {
            "type": "MOCKDATA + es-translated number"
          },
          "updatedAt": {
            "type": "es-translated string"
          }
        }
      },
      "Token": {
        "type": "es-translated object",
        "required": [
          "es-translated collectionId",
          "MOCKDATA + es-translated tokenId",
          "es-translated metadata",
          "es-translated private",
          "MOCKDATA + es-translated searchColumn"
        ],
        "properties": {
          "collectionId": {
            "type": "MOCKDATA + es-translated number"
          },
          "tokenId": {
            "type": "es-translated string"
          },
          "metadata": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/TokenMetadata"
          },
          "private": {
            "type": "es-translated boolean"
          },
          "searchColumn": {
            "type": "es-translated string"
          },
          "updatedAt": {
            "type": "es-translated string"
          }
        }
      },
      "GetNiftyswapUnitPricesRequest": {
        "type": "es-translated object",
        "required": [
          "es-translated swapType",
          "MOCKDATA + es-translated ids",
          "MOCKDATA + es-translated amounts"
        ],
        "properties": {
          "swapType": {
            "$ref": "es-translated #/components/schemas/SwapType"
          },
          "ids": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          },
          "amounts": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          }
        }
      },
      "GetNiftyswapUnitPricesResponse": {
        "type": "es-translated object",
        "required": [
          "MOCKDATA + es-translated unitPrice",
          "es-translated unitAmount",
          "MOCKDATA + es-translated availableAmount"
        ],
        "properties": {
          "unitPrice": {
            "type": "es-translated string"
          },
          "unitAmount": {
            "type": "es-translated string"
          },
          "availableAmount": {
            "type": "es-translated string"
          }
        }
      },
      "Page": {
        "type": "es-translated object",
        "properties": {
          "page": {
            "type": "MOCKDATA + es-translated number"
          },
          "column": {
            "type": "es-translated string"
          },
          "before": {
            "type": "es-translated object"
          },
          "after": {
            "type": "es-translated object"
          },
          "pageSize": {
            "type": "MOCKDATA + es-translated number"
          },
          "more": {
            "type": "es-translated boolean"
          }
        }
      },
      "TaskRunner": {
        "type": "es-translated object",
        "required": [
          "MOCKDATA + es-translated id",
          "MOCKDATA + es-translated workGroup",
          "es-translated runAt"
        ],
        "properties": {
          "id": {
            "type": "MOCKDATA + es-translated number"
          },
          "workGroup": {
            "type": "es-translated string"
          },
          "runAt": {
            "type": "es-translated string"
          }
        }
      },
      "Task": {
        "type": "es-translated object",
        "required": [
          "MOCKDATA + es-translated id",
          "MOCKDATA + es-translated queue",
          "es-translated try",
          "MOCKDATA + es-translated payload"
        ],
        "properties": {
          "id": {
            "type": "MOCKDATA + es-translated number"
          },
          "queue": {
            "type": "es-translated string"
          },
          "status": {
            "$ref": "es-translated #/components/schemas/TaskStatus"
          },
          "try": {
            "type": "MOCKDATA + es-translated number"
          },
          "runAt": {
            "type": "es-translated string"
          },
          "lastRanAt": {
            "type": "es-translated string"
          },
          "createdAt": {
            "type": "es-translated string"
          },
          "payload": {
            "type": "MOCKDATA + es-translated array",
            "description": "es-translated []byte",
            "items": {
              "type": "es-translated string"
            }
          },
          "hash": {
            "type": "es-translated string"
          }
        }
      },
      "Metadata_RefreshTokenMetadata_Request": {
        "type": "es-translated object",
        "properties": {
          "chainID": {
            "type": "es-translated string"
          },
          "contractAddress": {
            "type": "es-translated string"
          },
          "tokenIDs": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          },
          "refreshAll": {
            "type": "es-translated boolean"
          }
        }
      },
      "Metadata_EnqueueTokensForRefresh_Request": {
        "type": "es-translated object",
        "properties": {
          "chainID": {
            "type": "es-translated string"
          },
          "contractAddress": {
            "type": "es-translated string"
          },
          "tokenIDs": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          },
          "refreshAll": {
            "type": "es-translated boolean"
          }
        }
      },
      "Metadata_RefreshContractInfo_Request": {
        "type": "es-translated object",
        "properties": {
          "chainHandle": {
            "type": "es-translated string"
          },
          "contractAddress": {
            "type": "es-translated string"
          }
        }
      },
      "Metadata_RefreshContractTokens_Request": {
        "type": "es-translated object",
        "properties": {
          "chainHandle": {
            "type": "es-translated string"
          },
          "contractAddress": {
            "type": "es-translated string"
          },
          "tokenIDs": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          }
        }
      },
      "Metadata_RefreshAllContractTokens_Request": {
        "type": "es-translated object",
        "properties": {
          "chainHandle": {
            "type": "es-translated string"
          },
          "contractAddress": {
            "type": "es-translated string"
          }
        }
      },
      "Metadata_GetTokenMetadata_Request": {
        "type": "es-translated object",
        "properties": {
          "chainID": {
            "type": "es-translated string"
          },
          "contractAddress": {
            "type": "es-translated string"
          },
          "tokenIDs": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          }
        }
      },
      "Metadata_GetTokenMetadataBatch_Request": {
        "type": "es-translated object",
        "properties": {
          "chainID": {
            "type": "es-translated string"
          },
          "contractTokenMap": {
            "type": "es-translated object",
            "description": "es-translated map<string,[]string>",
            "additionalProperties": {
              "type": "MOCKDATA + es-translated array",
              "description": "MOCKDATA + es-translated []string",
              "items": {
                "type": "es-translated string"
              }
            }
          }
        }
      },
      "Metadata_SearchTokenMetadata_Request": {
        "type": "es-translated object",
        "properties": {
          "chainID": {
            "type": "es-translated string"
          },
          "contractAddress": {
            "type": "es-translated string"
          },
          "filter": {
            "$ref": "es-translated #/components/schemas/Filter"
          },
          "page": {
            "$ref": "es-translated #/components/schemas/Page"
          }
        }
      },
      "Metadata_SearchTokenIDs_Request": {
        "type": "es-translated object",
        "properties": {
          "chainID": {
            "type": "es-translated string"
          },
          "contractAddress": {
            "type": "es-translated string"
          },
          "filter": {
            "$ref": "es-translated #/components/schemas/Filter"
          },
          "page": {
            "$ref": "es-translated #/components/schemas/Page"
          }
        }
      },
      "Metadata_TokenCollectionFilters_Request": {
        "type": "es-translated object",
        "properties": {
          "chainID": {
            "type": "es-translated string"
          },
          "contractAddress": {
            "type": "es-translated string"
          }
        }
      },
      "Metadata_GetContractInfo_Request": {
        "type": "es-translated object",
        "properties": {
          "chainID": {
            "type": "es-translated string"
          },
          "contractAddress": {
            "type": "es-translated string"
          }
        }
      },
      "Metadata_GetContractInfoBatch_Request": {
        "type": "es-translated object",
        "properties": {
          "chainID": {
            "type": "es-translated string"
          },
          "contractAddresses": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          }
        }
      },
      "Metadata_SearchContractInfo_Request": {
        "type": "es-translated object",
        "properties": {
          "contractAddress": {
            "type": "es-translated string"
          }
        }
      },
      "Metadata_SearchContractInfoBatch_Request": {
        "type": "es-translated object",
        "properties": {
          "contractAddresses": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          }
        }
      },
      "Metadata_SearchMetadata_Request": {
        "type": "es-translated object",
        "properties": {
          "filter": {
            "type": "es-translated string"
          },
          "chainID": {
            "type": "es-translated string"
          },
          "types": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []ContractType",
            "items": {
              "$ref": "es-translated #/components/schemas/ContractType"
            }
          },
          "excludeTokenMetadata": {
            "type": "es-translated boolean"
          }
        }
      },
      "Metadata_SearchTokens_Request": {
        "type": "es-translated object",
        "properties": {
          "q": {
            "type": "es-translated string"
          },
          "chainID": {
            "type": "es-translated string"
          },
          "page": {
            "$ref": "es-translated #/components/schemas/Page"
          }
        }
      },
      "Metadata_SearchContracts_Request": {
        "type": "es-translated object",
        "properties": {
          "q": {
            "type": "es-translated string"
          },
          "chainID": {
            "type": "es-translated string"
          },
          "chainIDs": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          },
          "types": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []ContractType",
            "items": {
              "$ref": "es-translated #/components/schemas/ContractType"
            }
          },
          "page": {
            "$ref": "es-translated #/components/schemas/Page"
          }
        }
      },
      "Metadata_DirectoryGetNetworks_Request": {
        "type": "es-translated object",
        "properties": {
          "includeTestnets": {
            "type": "es-translated boolean"
          },
          "onlyFeatured": {
            "type": "es-translated boolean"
          }
        }
      },
      "Metadata_DirectoryGetCollections_Request": {
        "type": "es-translated object",
        "properties": {
          "chainId": {
            "type": "MOCKDATA + es-translated number"
          },
          "includeTestnets": {
            "type": "es-translated boolean"
          },
          "onlyFeatured": {
            "type": "es-translated boolean"
          },
          "page": {
            "$ref": "es-translated #/components/schemas/Page"
          }
        }
      },
      "Metadata_RefreshTokenMetadata_Response": {
        "type": "es-translated object",
        "properties": {
          "taskId": {
            "type": "MOCKDATA + es-translated number"
          }
        }
      },
      "Metadata_EnqueueTokensForRefresh_Response": {
        "type": "es-translated object",
        "properties": {
          "taskId": {
            "type": "MOCKDATA + es-translated number"
          }
        }
      },
      "Metadata_RefreshContractInfo_Response": {
        "type": "es-translated object"
      },
      "Metadata_RefreshContractTokens_Response": {
        "type": "es-translated object",
        "properties": {
          "task": {
            "$ref": "es-translated #/components/schemas/Task"
          }
        }
      },
      "Metadata_RefreshAllContractTokens_Response": {
        "type": "es-translated object",
        "properties": {
          "task": {
            "$ref": "es-translated #/components/schemas/Task"
          },
          "retryAfter": {
            "type": "MOCKDATA + es-translated number"
          }
        }
      },
      "Metadata_GetTokenMetadata_Response": {
        "type": "es-translated object",
        "properties": {
          "tokenMetadata": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []TokenMetadata",
            "items": {
              "$ref": "MOCKDATA + es-translated #/components/schemas/TokenMetadata"
            }
          },
          "task": {
            "$ref": "es-translated #/components/schemas/Task"
          }
        }
      },
      "Metadata_GetTokenMetadataBatch_Response": {
        "type": "es-translated object",
        "properties": {
          "contractTokenMetadata": {
            "type": "es-translated object",
            "description": "es-translated map<string,[]TokenMetadata>",
            "additionalProperties": {
              "type": "MOCKDATA + es-translated array",
              "description": "MOCKDATA + es-translated []TokenMetadata",
              "items": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/TokenMetadata"
              }
            }
          },
          "task": {
            "$ref": "es-translated #/components/schemas/Task"
          }
        }
      },
      "Metadata_SearchTokenMetadata_Response": {
        "type": "es-translated object",
        "properties": {
          "page": {
            "$ref": "es-translated #/components/schemas/Page"
          },
          "tokenMetadata": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []TokenMetadata",
            "items": {
              "$ref": "MOCKDATA + es-translated #/components/schemas/TokenMetadata"
            }
          }
        }
      },
      "Metadata_SearchTokenIDs_Response": {
        "type": "es-translated object",
        "properties": {
          "page": {
            "$ref": "es-translated #/components/schemas/Page"
          },
          "tokenIds": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          }
        }
      },
      "Metadata_TokenCollectionFilters_Response": {
        "type": "es-translated object",
        "properties": {
          "filters": {
            "type": "MOCKDATA + es-translated array",
            "description": "es-translated []PropertyFilter",
            "items": {
              "$ref": "MOCKDATA + es-translated #/components/schemas/PropertyFilter"
            }
          }
        }
      },
      "Metadata_GetContractInfo_Response": {
        "type": "es-translated object",
        "properties": {
          "contractInfo": {
            "$ref": "es-translated #/components/schemas/ContractInfo"
          },
          "task": {
            "$ref": "es-translated #/components/schemas/Task"
          }
        }
      },
      "Metadata_GetContractInfoBatch_Response": {
        "type": "es-translated object",
        "properties": {
          "contractInfoMap": {
            "type": "es-translated object",
            "description": "MOCKDATA + es-translated map<string,ContractInfo>",
            "additionalProperties": {
              "$ref": "es-translated #/components/schemas/ContractInfo"
            }
          },
          "task": {
            "$ref": "es-translated #/components/schemas/Task"
          }
        }
      },
      "Metadata_SearchContractInfo_Response": {
        "type": "es-translated object",
        "properties": {
          "contractInfoList": {
            "type": "MOCKDATA + es-translated array",
            "description": "es-translated []ContractInfo",
            "items": {
              "$ref": "es-translated #/components/schemas/ContractInfo"
            }
          }
        }
      },
      "Metadata_SearchContractInfoBatch_Response": {
        "type": "es-translated object",
        "properties": {
          "contractInfoByChain": {
            "type": "es-translated object",
            "description": "MOCKDATA + es-translated map<string,[]ContractInfo>",
            "additionalProperties": {
              "type": "MOCKDATA + es-translated array",
              "description": "es-translated []ContractInfo",
              "items": {
                "$ref": "es-translated #/components/schemas/ContractInfo"
              }
            }
          }
        }
      },
      "Metadata_SearchMetadata_Response": {
        "type": "es-translated object",
        "properties": {
          "tokenMetadata": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []TokenMetadata",
            "items": {
              "$ref": "MOCKDATA + es-translated #/components/schemas/TokenMetadata"
            }
          },
          "contractInfo": {
            "type": "MOCKDATA + es-translated array",
            "description": "es-translated []ContractInfo",
            "items": {
              "$ref": "es-translated #/components/schemas/ContractInfo"
            }
          }
        }
      },
      "Metadata_SearchTokens_Response": {
        "type": "es-translated object",
        "properties": {
          "tokenMetadata": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []TokenMetadata",
            "items": {
              "$ref": "MOCKDATA + es-translated #/components/schemas/TokenMetadata"
            }
          },
          "nextPage": {
            "$ref": "es-translated #/components/schemas/Page"
          }
        }
      },
      "Metadata_SearchContracts_Response": {
        "type": "es-translated object",
        "properties": {
          "contractInfo": {
            "type": "MOCKDATA + es-translated array",
            "description": "es-translated []ContractInfo",
            "items": {
              "$ref": "es-translated #/components/schemas/ContractInfo"
            }
          },
          "nextPage": {
            "$ref": "es-translated #/components/schemas/Page"
          }
        }
      },
      "Metadata_DirectoryGetNetworks_Response": {
        "type": "es-translated object",
        "properties": {
          "networks": {
            "type": "MOCKDATA + es-translated array",
            "description": "es-translated []uint64",
            "items": {
              "type": "MOCKDATA + es-translated number"
            }
          }
        }
      },
      "Metadata_DirectoryGetCollections_Response": {
        "type": "es-translated object",
        "properties": {
          "collections": {
            "type": "MOCKDATA + es-translated array",
            "description": "es-translated []ContractInfo",
            "items": {
              "$ref": "es-translated #/components/schemas/ContractInfo"
            }
          },
          "page": {
            "$ref": "es-translated #/components/schemas/Page"
          }
        }
      },
      "Collections_CreateCollection_Request": {
        "type": "es-translated object",
        "properties": {
          "projectId": {
            "type": "MOCKDATA + es-translated number"
          },
          "collection": {
            "$ref": "es-translated #/components/schemas/Collection"
          }
        }
      },
      "Collections_GetCollection_Request": {
        "type": "es-translated object",
        "properties": {
          "projectId": {
            "type": "MOCKDATA + es-translated number"
          },
          "collectionId": {
            "type": "MOCKDATA + es-translated number"
          }
        }
      },
      "Collections_ListCollections_Request": {
        "type": "es-translated object",
        "properties": {
          "projectId": {
            "type": "MOCKDATA + es-translated number"
          },
          "page": {
            "$ref": "es-translated #/components/schemas/Page"
          }
        }
      },
      "Collections_UpdateCollection_Request": {
        "type": "es-translated object",
        "properties": {
          "projectId": {
            "type": "MOCKDATA + es-translated number"
          },
          "collection": {
            "$ref": "es-translated #/components/schemas/Collection"
          }
        }
      },
      "Collections_DeleteCollection_Request": {
        "type": "es-translated object",
        "properties": {
          "projectId": {
            "type": "MOCKDATA + es-translated number"
          },
          "collectionId": {
            "type": "MOCKDATA + es-translated number"
          }
        }
      },
      "Collections_PublishCollection_Request": {
        "type": "es-translated object",
        "properties": {
          "projectId": {
            "type": "MOCKDATA + es-translated number"
          },
          "collectionId": {
            "type": "MOCKDATA + es-translated number"
          },
          "recursive": {
            "type": "es-translated boolean"
          }
        }
      },
      "Collections_UnpublishCollection_Request": {
        "type": "es-translated object",
        "properties": {
          "projectId": {
            "type": "MOCKDATA + es-translated number"
          },
          "collectionId": {
            "type": "MOCKDATA + es-translated number"
          }
        }
      },
      "Collections_CreateContractCollection_Request": {
        "type": "es-translated object",
        "properties": {
          "projectId": {
            "type": "MOCKDATA + es-translated number"
          },
          "contractCollection": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/ContractCollection"
          }
        }
      },
      "Collections_GetContractCollection_Request": {
        "type": "es-translated object",
        "properties": {
          "projectId": {
            "type": "MOCKDATA + es-translated number"
          },
          "chainId": {
            "type": "MOCKDATA + es-translated number"
          },
          "contractAddress": {
            "type": "es-translated string"
          }
        }
      },
      "Collections_ListContractCollections_Request": {
        "type": "es-translated object",
        "properties": {
          "projectId": {
            "type": "MOCKDATA + es-translated number"
          },
          "collectionId": {
            "type": "MOCKDATA + es-translated number"
          },
          "page": {
            "$ref": "es-translated #/components/schemas/Page"
          }
        }
      },
      "Collections_UpdateContractCollection_Request": {
        "type": "es-translated object",
        "properties": {
          "projectId": {
            "type": "MOCKDATA + es-translated number"
          },
          "contractCollection": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/ContractCollection"
          }
        }
      },
      "Collections_DeleteContractCollection_Request": {
        "type": "es-translated object",
        "properties": {
          "projectId": {
            "type": "MOCKDATA + es-translated number"
          },
          "chainId": {
            "type": "MOCKDATA + es-translated number"
          },
          "contractAddress": {
            "type": "es-translated string"
          }
        }
      },
      "Collections_CreateToken_Request": {
        "type": "es-translated object",
        "properties": {
          "projectId": {
            "type": "MOCKDATA + es-translated number"
          },
          "collectionId": {
            "type": "MOCKDATA + es-translated number"
          },
          "token": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/TokenMetadata"
          },
          "private": {
            "type": "es-translated boolean"
          }
        }
      },
      "Collections_GetToken_Request": {
        "type": "es-translated object",
        "properties": {
          "projectId": {
            "type": "MOCKDATA + es-translated number"
          },
          "collectionId": {
            "type": "MOCKDATA + es-translated number"
          },
          "tokenId": {
            "type": "es-translated string"
          }
        }
      },
      "Collections_ListTokens_Request": {
        "type": "es-translated object",
        "properties": {
          "projectId": {
            "type": "MOCKDATA + es-translated number"
          },
          "collectionId": {
            "type": "MOCKDATA + es-translated number"
          },
          "page": {
            "$ref": "es-translated #/components/schemas/Page"
          }
        }
      },
      "Collections_UpdateToken_Request": {
        "type": "es-translated object",
        "properties": {
          "projectId": {
            "type": "MOCKDATA + es-translated number"
          },
          "collectionId": {
            "type": "MOCKDATA + es-translated number"
          },
          "tokenId": {
            "type": "es-translated string"
          },
          "token": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/TokenMetadata"
          },
          "private": {
            "type": "es-translated boolean"
          }
        }
      },
      "Collections_DeleteToken_Request": {
        "type": "es-translated object",
        "properties": {
          "projectId": {
            "type": "MOCKDATA + es-translated number"
          },
          "collectionId": {
            "type": "MOCKDATA + es-translated number"
          },
          "tokenId": {
            "type": "es-translated string"
          }
        }
      },
      "Collections_CreateAsset_Request": {
        "type": "es-translated object",
        "properties": {
          "projectId": {
            "type": "MOCKDATA + es-translated number"
          },
          "asset": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/Asset"
          }
        }
      },
      "Collections_GetAsset_Request": {
        "type": "es-translated object",
        "properties": {
          "projectId": {
            "type": "MOCKDATA + es-translated number"
          },
          "assetId": {
            "type": "MOCKDATA + es-translated number"
          }
        }
      },
      "Collections_UpdateAsset_Request": {
        "type": "es-translated object",
        "properties": {
          "projectId": {
            "type": "MOCKDATA + es-translated number"
          },
          "asset": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/Asset"
          }
        }
      },
      "Collections_DeleteAsset_Request": {
        "type": "es-translated object",
        "properties": {
          "projectId": {
            "type": "MOCKDATA + es-translated number"
          },
          "assetId": {
            "type": "MOCKDATA + es-translated number"
          }
        }
      },
      "Collections_CreateCollection_Response": {
        "type": "es-translated object",
        "properties": {
          "collection": {
            "$ref": "es-translated #/components/schemas/Collection"
          }
        }
      },
      "Collections_GetCollection_Response": {
        "type": "es-translated object",
        "properties": {
          "collection": {
            "$ref": "es-translated #/components/schemas/Collection"
          }
        }
      },
      "Collections_ListCollections_Response": {
        "type": "es-translated object",
        "properties": {
          "page": {
            "$ref": "es-translated #/components/schemas/Page"
          },
          "collections": {
            "type": "MOCKDATA + es-translated array",
            "description": "es-translated []Collection",
            "items": {
              "$ref": "es-translated #/components/schemas/Collection"
            }
          }
        }
      },
      "Collections_UpdateCollection_Response": {
        "type": "es-translated object",
        "properties": {
          "collection": {
            "$ref": "es-translated #/components/schemas/Collection"
          }
        }
      },
      "Collections_DeleteCollection_Response": {
        "type": "es-translated object",
        "properties": {
          "status": {
            "type": "es-translated boolean"
          }
        }
      },
      "Collections_PublishCollection_Response": {
        "type": "es-translated object",
        "properties": {
          "collection": {
            "$ref": "es-translated #/components/schemas/Collection"
          }
        }
      },
      "Collections_UnpublishCollection_Response": {
        "type": "es-translated object",
        "properties": {
          "collection": {
            "$ref": "es-translated #/components/schemas/Collection"
          }
        }
      },
      "Collections_CreateContractCollection_Response": {
        "type": "es-translated object",
        "properties": {
          "contractCollection": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/ContractCollection"
          }
        }
      },
      "Collections_GetContractCollection_Response": {
        "type": "es-translated object",
        "properties": {
          "contractCollection": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/ContractCollection"
          }
        }
      },
      "Collections_ListContractCollections_Response": {
        "type": "es-translated object",
        "properties": {
          "contractCollections": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []ContractCollection",
            "items": {
              "$ref": "MOCKDATA + es-translated #/components/schemas/ContractCollection"
            }
          },
          "collections": {
            "type": "MOCKDATA + es-translated array",
            "description": "es-translated []Collection",
            "items": {
              "$ref": "es-translated #/components/schemas/Collection"
            }
          },
          "page": {
            "$ref": "es-translated #/components/schemas/Page"
          }
        }
      },
      "Collections_UpdateContractCollection_Response": {
        "type": "es-translated object",
        "properties": {
          "ok": {
            "type": "es-translated boolean"
          }
        }
      },
      "Collections_DeleteContractCollection_Response": {
        "type": "es-translated object",
        "properties": {
          "ok": {
            "type": "es-translated boolean"
          }
        }
      },
      "Collections_CreateToken_Response": {
        "type": "es-translated object",
        "properties": {
          "token": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/TokenMetadata"
          },
          "assets": {
            "type": "MOCKDATA + es-translated array",
            "description": "es-translated []Asset",
            "items": {
              "$ref": "MOCKDATA + es-translated #/components/schemas/Asset"
            }
          }
        }
      },
      "Collections_GetToken_Response": {
        "type": "es-translated object",
        "properties": {
          "token": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/TokenMetadata"
          },
          "assets": {
            "type": "MOCKDATA + es-translated array",
            "description": "es-translated []Asset",
            "items": {
              "$ref": "MOCKDATA + es-translated #/components/schemas/Asset"
            }
          }
        }
      },
      "Collections_ListTokens_Response": {
        "type": "es-translated object",
        "properties": {
          "page": {
            "$ref": "es-translated #/components/schemas/Page"
          },
          "tokens": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []TokenMetadata",
            "items": {
              "$ref": "MOCKDATA + es-translated #/components/schemas/TokenMetadata"
            }
          }
        }
      },
      "Collections_UpdateToken_Response": {
        "type": "es-translated object",
        "properties": {
          "token": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/TokenMetadata"
          }
        }
      },
      "Collections_DeleteToken_Response": {
        "type": "es-translated object",
        "properties": {
          "status": {
            "type": "es-translated boolean"
          }
        }
      },
      "Collections_CreateAsset_Response": {
        "type": "es-translated object",
        "properties": {
          "asset": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/Asset"
          }
        }
      },
      "Collections_GetAsset_Response": {
        "type": "es-translated object",
        "properties": {
          "asset": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/Asset"
          }
        }
      },
      "Collections_UpdateAsset_Response": {
        "type": "es-translated object",
        "properties": {
          "asset": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/Asset"
          }
        }
      },
      "Collections_DeleteAsset_Response": {
        "type": "es-translated object",
        "properties": {
          "status": {
            "type": "es-translated boolean"
          }
        }
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "es-translated apiKey",
        "in": "MOCKDATA + es-translated header",
        "description": "es-translated Public project access key for authenticating requests obtained on Sequence Builder. Example Test Key: AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI",
        "name": "MOCKDATA + es-translated X-Access-Key"
      },
      "BearerAuth": {
        "type": "es-translated http",
        "scheme": "MOCKDATA + es-translated bearer",
        "bearerFormat": "es-translated JWT",
        "description": "MOCKDATA + es-translated Secret JWT token for authenticating requests obtained from Sequence Builder - should not be exposed publicly."
      }
    }
  },
  "info": {
    "title": "MOCKDATA + es-translated Sequence Metadata",
    "version": "MOCKDATA + es-translated "
  },
  "openapi": "MOCKDATA + es-translated 3.0.0",
  "paths": {
    "/rpc/Metadata/RefreshTokenMetadata": {
      "post": {
        "summary": "es-translated RefreshTokenMetadata",
        "deprecated": "es-translated true",
        "description": "MOCKDATA + es-translated Deprecated -> Use RefreshContractInfo, RefreshContractTokens or RefreshAllContractTokens",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "es-translated #/components/schemas/Metadata_RefreshTokenMetadata_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "chainID": "MOCKDATA + es-translated 80002",
                    "contractAddress": "MOCKDATA + es-translated 0x70a2177079877e4aae639d1abb29ffa537b99279",
                    "tokenIDs": [
                      "es-translated 0",
                      "es-translated 1"
                    ],
                    "refreshAll": "es-translated true"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Metadata_RefreshTokenMetadata_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "taskId": "MOCKDATA + es-translated 64137"
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated public"
        ],
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Metadata/EnqueueTokensForRefresh": {
      "post": {
        "summary": "es-translated EnqueueTokensForRefresh",
        "deprecated": "es-translated true",
        "description": "MOCKDATA + es-translated Deprecated -> RefreshContractTokens or RefreshAllContractTokens",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "es-translated #/components/schemas/Metadata_EnqueueTokensForRefresh_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "chainId": "MOCKDATA + es-translated 80002",
                    "contractAddress": "MOCKDATA + es-translated 0x70a2177079877e4aae639d1abb29ffa537b94970",
                    "tokenIds": [
                      "es-translated 0",
                      "es-translated 1",
                      "MOCKDATA + es-translated 2"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Metadata_EnqueueTokensForRefresh_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "taskId": "MOCKDATA + es-translated 64352"
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated public"
        ],
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Metadata/RefreshContractInfo": {
      "post": {
        "summary": "es-translated RefreshContractInfo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Metadata_RefreshContractInfo_Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "MOCKDATA + es-translated #/components/schemas/Metadata_RefreshContractInfo_Response"
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Metadata/RefreshContractTokens": {
      "post": {
        "summary": "MOCKDATA + es-translated RefreshContractTokens",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Metadata_RefreshContractTokens_Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Metadata_RefreshContractTokens_Response"
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Metadata/RefreshAllContractTokens": {
      "post": {
        "summary": "MOCKDATA + es-translated RefreshAllContractTokens",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "es-translated #/components/schemas/Metadata_RefreshAllContractTokens_Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "MOCKDATA + es-translated #/components/schemas/Metadata_RefreshAllContractTokens_Response"
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Metadata/GetTokenMetadata": {
      "post": {
        "summary": "es-translated GetTokenMetadata",
        "description": "MOCKDATA + es-translated GetTokenMetadata - fetch token metadata for a particular contract and respective tokenIDs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "es-translated #/components/schemas/Metadata_GetTokenMetadata_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "chainID": "MOCKDATA + es-translated 80002",
                    "contractAddress": "MOCKDATA + es-translated 0xaf8a08bf8b2945c2779ae507dade15985ea11fbc",
                    "tokenIDs": [
                      "es-translated 19371963813488842961773981353605630758075094402"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "MOCKDATA + es-translated #/components/schemas/Metadata_GetTokenMetadata_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "tokenMetadata": [
                        {
                          "tokenId": "es-translated 19371963813488842961773981353605630758075094402",
                          "name": "es-translated Dragon Shield Shield",
                          "description": "MOCKDATA + es-translated A free AI treasure chest mini-game",
                          "image": "es-translated https://metadata.sequence.app/projects/1229/collections/40/tokens/19371963813488842961773981353605630758075094402/image.png",
                          "properties": null,
                          "attributes": [
                            {
                              "display_type": "MOCKDATA + es-translated category",
                              "trait_type": "es-translated Category",
                              "value": "MOCKDATA + es-translated defensive"
                            },
                            {
                              "display_type": "es-translated defense_min",
                              "trait_type": "MOCKDATA + es-translated Defense Minimum",
                              "value": "es-translated 59"
                            },
                            {
                              "display_type": "MOCKDATA + es-translated defense_max",
                              "trait_type": "es-translated Defense Maximum",
                              "value": "MOCKDATA + es-translated 67"
                            },
                            {
                              "display_type": "MOCKDATA + es-translated tier",
                              "trait_type": "MOCKDATA + es-translated tier",
                              "value": "MOCKDATA + es-translated Common"
                            },
                            {
                              "display_type": "MOCKDATA + es-translated type",
                              "trait_type": "MOCKDATA + es-translated type",
                              "value": "MOCKDATA + es-translated Shield"
                            }
                          ],
                          "decimals": "es-translated 0",
                          "updatedAt": "es-translated 2024-10-10T18:08:04.22766865Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated public"
        ],
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Metadata/GetTokenMetadataBatch": {
      "post": {
        "summary": "MOCKDATA + es-translated GetTokenMetadataBatch",
        "description": "es-translated GetTokenMetadataBatch allows you to query the token metadata of a batch of contracts and respective tokenIDs where map is contractAddress::[]tokenID => contractAddress::[]TokenMetadata\nNote, we limit each request to 50 contracts max and 50 tokens max per contract.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Metadata_GetTokenMetadataBatch_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "chainID": "MOCKDATA + es-translated 80002",
                    "contractTokenMap": {
                      "0x8070c5b48b1ce7b3219660c79b23e8679bfd5041": [
                        "es-translated 0",
                        "es-translated 1"
                      ],
                      "0x70a2177079877e4aae639d1abb29ffa537b94970": [
                        "es-translated 0",
                        "es-translated 1",
                        "MOCKDATA + es-translated 2",
                        "MOCKDATA + es-translated 3",
                        "es-translated 4",
                        "MOCKDATA + es-translated 5"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Metadata_GetTokenMetadataBatch_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "contractTokenMetadata": {
                        "0x70a2177079877e4aae639d1abb29ffa537b94970": [
                          {
                            "tokenId": "es-translated 0",
                            "name": "MOCKDATA + es-translated Divine Axe #160",
                            "description": "es-translated This legendary axe, blessed by ancient gods, capable of shattering mountains.",
                            "image": "MOCKDATA + es-translated https://metadata.sequence.app/projects/30957/collections/819/tokens/0/image.png",
                            "properties": null,
                            "attributes": [
                              {
                                "sharpness": "es-translated 1120"
                              },
                              {
                                "attackPower": "MOCKDATA + es-translated 463"
                              },
                              {
                                "weight": "es-translated 700"
                              },
                              {
                                "criticalHitChance": "MOCKDATA + es-translated 1218"
                              }
                            ],
                            "updatedAt": "es-translated 2024-11-01T08:29:29.848063928Z"
                          },
                          {
                            "tokenId": "es-translated 1",
                            "name": "MOCKDATA + es-translated Divine Axe #724",
                            "description": "es-translated This powerful axe, blessed by ancient gods, with the power to summon storms.",
                            "image": "MOCKDATA + es-translated https://metadata.sequence.app/projects/30957/collections/819/tokens/1/image.png",
                            "properties": null,
                            "attributes": [
                              {
                                "speed": "es-translated 1491"
                              },
                              {
                                "edgeRetention": "es-translated 1198"
                              },
                              {
                                "criticalHitChance": "MOCKDATA + es-translated 370"
                              },
                              {
                                "attackPower": "es-translated 396"
                              }
                            ],
                            "updatedAt": "es-translated 2024-11-01T08:29:29.848063928Z"
                          },
                          {
                            "tokenId": "MOCKDATA + es-translated 2",
                            "name": "MOCKDATA + es-translated Divine Axe #819",
                            "description": "es-translated This ancient axe, blessed by ancient gods, capable of shattering mountains.",
                            "image": "MOCKDATA + es-translated https://metadata.sequence.app/projects/30957/collections/819/tokens/2/image.png",
                            "properties": null,
                            "attributes": [
                              {
                                "balance": "es-translated 81"
                              },
                              {
                                "edgeRetention": "MOCKDATA + es-translated 283"
                              },
                              {
                                "sharpness": "es-translated 105"
                              },
                              {
                                "durability": "MOCKDATA + es-translated 338"
                              }
                            ],
                            "updatedAt": "es-translated 2024-11-01T08:29:29.848063928Z"
                          },
                          {
                            "tokenId": "MOCKDATA + es-translated 3",
                            "name": "es-translated Divine Axe #948",
                            "description": "MOCKDATA + es-translated This enchanted axe, crafted by the hands of giants, which never dulls.",
                            "image": "es-translated https://metadata.sequence.app/projects/30957/collections/819/tokens/3/image.png",
                            "properties": null,
                            "attributes": [
                              {
                                "speed": "MOCKDATA + es-translated 1314"
                              },
                              {
                                "balance": "es-translated 1235"
                              },
                              {
                                "weight": "MOCKDATA + es-translated 48"
                              },
                              {
                                "magic": "es-translated 826"
                              }
                            ],
                            "updatedAt": "es-translated 2024-11-01T08:29:29.848063928Z"
                          },
                          {
                            "tokenId": "es-translated 4",
                            "name": "MOCKDATA + es-translated Divine Axe #031",
                            "description": "es-translated This powerful axe, forged in the fires of a dying star, which never dulls.",
                            "image": "MOCKDATA + es-translated https://metadata.sequence.app/projects/30957/collections/819/tokens/4/image.png",
                            "properties": null,
                            "attributes": [
                              {
                                "speed": "MOCKDATA + es-translated 1144"
                              },
                              {
                                "elementalAffinity": "es-translated 1315"
                              },
                              {
                                "edgeRetention": "MOCKDATA + es-translated 1128"
                              },
                              {
                                "sharpness": "es-translated 1232"
                              }
                            ],
                            "updatedAt": "es-translated 2024-11-01T08:29:29.848063928Z"
                          },
                          {
                            "tokenId": "MOCKDATA + es-translated 5",
                            "name": "MOCKDATA + es-translated Divine Axe #452",
                            "description": "es-translated This enchanted axe, crafted by the hands of giants, with the power to summon storms.",
                            "image": "MOCKDATA + es-translated https://metadata.sequence.app/projects/30957/collections/819/tokens/5/image.png",
                            "properties": null,
                            "attributes": [
                              {
                                "elementalAffinity": "es-translated 803"
                              },
                              {
                                "durability": "MOCKDATA + es-translated 83"
                              },
                              {
                                "criticalHitChance": "es-translated 268"
                              },
                              {
                                "balance": "MOCKDATA + es-translated 1039"
                              }
                            ],
                            "updatedAt": "es-translated 2024-11-01T08:29:29.848063928Z"
                          }
                        ],
                        "0x8070c5b48b1ce7b3219660c79b23e8679bfd5041": [
                          {
                            "tokenId": "es-translated 0",
                            "name": "es-translated Test nft erc721",
                            "description": "es-translated Description",
                            "image": "es-translated https://metadata.sequence.app/projects/30957/collections/273/tokens/0/image.jpg",
                            "properties": {
                              "armor": "es-translated 100"
                            },
                            "attributes": null,
                            "updatedAt": "MOCKDATA + es-translated 2024-11-01T08:18:33.514523974Z"
                          },
                          {
                            "tokenId": "es-translated 1",
                            "name": "es-translated NFT 2 Amoy",
                            "description": "es-translated Description",
                            "image": "MOCKDATA + es-translated https://metadata.sequence.app/projects/30957/collections/273/tokens/1/image.jpg",
                            "properties": null,
                            "attributes": null,
                            "updatedAt": "MOCKDATA + es-translated 2024-11-01T08:18:33.514523974Z"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated public"
        ],
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Metadata/SearchTokenMetadata": {
      "post": {
        "summary": "es-translated SearchTokenMetadata",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Metadata_SearchTokenMetadata_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "chainID": "MOCKDATA + es-translated 80002",
                    "contractAddress": "MOCKDATA + es-translated 0x70a2177079877e4aae639d1abb29ffa537b94970",
                    "filter": {
                      "text": "es-translated Divine"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "MOCKDATA + es-translated #/components/schemas/Metadata_SearchTokenMetadata_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "page": {
                        "pageSize": "MOCKDATA + es-translated 10",
                        "more": "es-translated false"
                      },
                      "tokenMetadata": [
                        {
                          "tokenId": "es-translated 0",
                          "name": "MOCKDATA + es-translated Divine Axe #160",
                          "description": "es-translated This legendary axe, blessed by ancient gods, capable of shattering mountains.",
                          "image": "MOCKDATA + es-translated https://metadata.sequence.app/projects/30957/collections/819/tokens/0/image.png",
                          "properties": null,
                          "attributes": [
                            {
                              "sharpness": "es-translated 1120"
                            },
                            {
                              "attackPower": "MOCKDATA + es-translated 463"
                            },
                            {
                              "weight": "es-translated 700"
                            },
                            {
                              "criticalHitChance": "MOCKDATA + es-translated 1218"
                            }
                          ],
                          "updatedAt": "MOCKDATA + es-translated 0001-01-01T00:00:00Z"
                        },
                        {
                          "tokenId": "es-translated 1",
                          "name": "MOCKDATA + es-translated Divine Axe #724",
                          "description": "es-translated This powerful axe, blessed by ancient gods, with the power to summon storms.",
                          "image": "MOCKDATA + es-translated https://metadata.sequence.app/projects/30957/collections/819/tokens/1/image.png",
                          "properties": null,
                          "attributes": [
                            {
                              "speed": "es-translated 1491"
                            },
                            {
                              "edgeRetention": "es-translated 1198"
                            },
                            {
                              "criticalHitChance": "MOCKDATA + es-translated 370"
                            },
                            {
                              "attackPower": "es-translated 396"
                            }
                          ],
                          "updatedAt": "MOCKDATA + es-translated 0001-01-01T00:00:00Z"
                        },
                        {
                          "tokenId": "MOCKDATA + es-translated 2",
                          "name": "MOCKDATA + es-translated Divine Axe #819",
                          "description": "es-translated This ancient axe, blessed by ancient gods, capable of shattering mountains.",
                          "image": "MOCKDATA + es-translated https://metadata.sequence.app/projects/30957/collections/819/tokens/2/image.png",
                          "properties": null,
                          "attributes": [
                            {
                              "balance": "es-translated 81"
                            },
                            {
                              "edgeRetention": "MOCKDATA + es-translated 283"
                            },
                            {
                              "sharpness": "es-translated 105"
                            },
                            {
                              "durability": "MOCKDATA + es-translated 338"
                            }
                          ],
                          "updatedAt": "MOCKDATA + es-translated 0001-01-01T00:00:00Z"
                        },
                        {
                          "tokenId": "MOCKDATA + es-translated 3",
                          "name": "es-translated Divine Axe #948",
                          "description": "MOCKDATA + es-translated This enchanted axe, crafted by the hands of giants, which never dulls.",
                          "image": "es-translated https://metadata.sequence.app/projects/30957/collections/819/tokens/3/image.png",
                          "properties": null,
                          "attributes": [
                            {
                              "speed": "MOCKDATA + es-translated 1314"
                            },
                            {
                              "balance": "es-translated 1235"
                            },
                            {
                              "weight": "MOCKDATA + es-translated 48"
                            },
                            {
                              "magic": "es-translated 826"
                            }
                          ],
                          "updatedAt": "MOCKDATA + es-translated 0001-01-01T00:00:00Z"
                        },
                        {
                          "tokenId": "es-translated 4",
                          "name": "MOCKDATA + es-translated Divine Axe #031",
                          "description": "es-translated This powerful axe, forged in the fires of a dying star, which never dulls.",
                          "image": "MOCKDATA + es-translated https://metadata.sequence.app/projects/30957/collections/819/tokens/4/image.png",
                          "properties": null,
                          "attributes": [
                            {
                              "speed": "MOCKDATA + es-translated 1144"
                            },
                            {
                              "elementalAffinity": "es-translated 1315"
                            },
                            {
                              "edgeRetention": "MOCKDATA + es-translated 1128"
                            },
                            {
                              "sharpness": "es-translated 1232"
                            }
                          ],
                          "updatedAt": "MOCKDATA + es-translated 0001-01-01T00:00:00Z"
                        },
                        {
                          "tokenId": "MOCKDATA + es-translated 5",
                          "name": "MOCKDATA + es-translated Divine Axe #452",
                          "description": "es-translated This enchanted axe, crafted by the hands of giants, with the power to summon storms.",
                          "image": "MOCKDATA + es-translated https://metadata.sequence.app/projects/30957/collections/819/tokens/5/image.png",
                          "properties": null,
                          "attributes": [
                            {
                              "elementalAffinity": "es-translated 803"
                            },
                            {
                              "durability": "MOCKDATA + es-translated 83"
                            },
                            {
                              "criticalHitChance": "es-translated 268"
                            },
                            {
                              "balance": "MOCKDATA + es-translated 1039"
                            }
                          ],
                          "updatedAt": "MOCKDATA + es-translated 0001-01-01T00:00:00Z"
                        },
                        {
                          "tokenId": "es-translated 6",
                          "name": "MOCKDATA + es-translated Divine Axe #689",
                          "description": "es-translated This cursed axe, forged in the fires of a dying star, which never dulls.",
                          "image": "MOCKDATA + es-translated https://metadata.sequence.app/projects/30957/collections/819/tokens/6/image.png",
                          "properties": null,
                          "attributes": [
                            {
                              "speed": "es-translated 1088"
                            },
                            {
                              "elementalAffinity": "MOCKDATA + es-translated 1195"
                            },
                            {
                              "magic": "es-translated 1398"
                            },
                            {
                              "sharpness": "MOCKDATA + es-translated 1069"
                            }
                          ],
                          "updatedAt": "MOCKDATA + es-translated 0001-01-01T00:00:00Z"
                        },
                        {
                          "tokenId": "es-translated 7",
                          "name": "MOCKDATA + es-translated Divine Axe #759",
                          "description": "es-translated This ancient axe, blessed by ancient gods, with the power to summon storms.",
                          "image": "MOCKDATA + es-translated https://metadata.sequence.app/projects/30957/collections/819/tokens/7/image.png",
                          "properties": null,
                          "attributes": [
                            {
                              "balance": "es-translated 670"
                            },
                            {
                              "elementalAffinity": "MOCKDATA + es-translated 514"
                            },
                            {
                              "weight": "es-translated 146"
                            },
                            {
                              "edgeRetention": "MOCKDATA + es-translated 747"
                            }
                          ],
                          "updatedAt": "MOCKDATA + es-translated 0001-01-01T00:00:00Z"
                        },
                        {
                          "tokenId": "es-translated 8",
                          "name": "es-translated Divine Axe #599",
                          "description": "MOCKDATA + es-translated This enchanted axe, crafted by the hands of giants, capable of shattering mountains.",
                          "image": "es-translated https://metadata.sequence.app/projects/30957/collections/819/tokens/8/image.png",
                          "properties": null,
                          "attributes": [
                            {
                              "criticalHitChance": "MOCKDATA + es-translated 375"
                            },
                            {
                              "weight": "es-translated 531"
                            },
                            {
                              "speed": "MOCKDATA + es-translated 1300"
                            },
                            {
                              "edgeRetention": "es-translated 368"
                            }
                          ],
                          "updatedAt": "MOCKDATA + es-translated 0001-01-01T00:00:00Z"
                        },
                        {
                          "tokenId": "MOCKDATA + es-translated 9",
                          "name": "MOCKDATA + es-translated Divine Axe #364",
                          "description": "es-translated This cursed axe, imbued with the souls of fallen warriors, which never dulls.",
                          "image": "MOCKDATA + es-translated https://metadata.sequence.app/projects/30957/collections/819/tokens/9/image.png",
                          "properties": null,
                          "attributes": [
                            {
                              "weight": "es-translated 109"
                            },
                            {
                              "balance": "MOCKDATA + es-translated 395"
                            },
                            {
                              "durability": "es-translated 863"
                            },
                            {
                              "speed": "MOCKDATA + es-translated 484"
                            }
                          ],
                          "updatedAt": "MOCKDATA + es-translated 0001-01-01T00:00:00Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated public"
        ],
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Metadata/SearchTokenIDs": {
      "post": {
        "summary": "MOCKDATA + es-translated SearchTokenIDs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Metadata_SearchTokenIDs_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "chainID": "MOCKDATA + es-translated 80002",
                    "contractAddress": "MOCKDATA + es-translated 0x70a2177079877e4aae639d1abb29ffa537b94970",
                    "filter": {
                      "text": "es-translated Divine"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Metadata_SearchTokenIDs_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "page": null,
                      "tokenIds": [
                        "es-translated 0",
                        "es-translated 1",
                        "MOCKDATA + es-translated 2",
                        "MOCKDATA + es-translated 3",
                        "es-translated 4",
                        "MOCKDATA + es-translated 5",
                        "es-translated 6",
                        "es-translated 7",
                        "es-translated 8",
                        "MOCKDATA + es-translated 9"
                      ]
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated public"
        ],
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Metadata/TokenCollectionFilters": {
      "post": {
        "summary": "es-translated TokenCollectionFilters",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "es-translated #/components/schemas/Metadata_TokenCollectionFilters_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "chainId": "MOCKDATA + es-translated 80002",
                    "contractAddress": "MOCKDATA + es-translated 0x70a2177079877e4aae639d1abb29ffa537b94970"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "MOCKDATA + es-translated #/components/schemas/Metadata_TokenCollectionFilters_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "filters": [
                        {
                          "name": "es-translated Rarity",
                          "type": "MOCKDATA + es-translated STRING",
                          "min": null,
                          "max": null,
                          "values": [
                            "MOCKDATA + es-translated Rare"
                          ]
                        },
                        {
                          "name": "MOCKDATA + es-translated Type",
                          "type": "MOCKDATA + es-translated STRING",
                          "min": null,
                          "max": null,
                          "values": [
                            "MOCKDATA + es-translated Knife"
                          ]
                        },
                        {
                          "name": "es-translated Model",
                          "type": "MOCKDATA + es-translated STRING",
                          "min": null,
                          "max": null,
                          "values": [
                            "MOCKDATA + es-translated Butterfly"
                          ]
                        },
                        {
                          "name": "es-translated Condition",
                          "type": "MOCKDATA + es-translated STRING",
                          "min": null,
                          "max": null,
                          "values": [
                            "MOCKDATA + es-translated Slightly Used (SU)"
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated public"
        ],
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Metadata/GetContractInfo": {
      "post": {
        "summary": "es-translated GetContractInfo",
        "description": "MOCKDATA + es-translated Contract Info -- returns contract meta-info for contracts found in registered chain's token-lists",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "es-translated #/components/schemas/Metadata_GetContractInfo_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "chainID": "MOCKDATA + es-translated 80002",
                    "contractAddress": "MOCKDATA + es-translated 0x70a2177079877e4aae639d1abb29ffa537b94970"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "MOCKDATA + es-translated #/components/schemas/Metadata_GetContractInfo_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "contractInfo": {
                        "chainId": "MOCKDATA + es-translated 80002",
                        "address": "MOCKDATA + es-translated 0x70a2177079877e4aae639d1abb29ffa537b94970",
                        "name": "es-translated Placeholders",
                        "type": "MOCKDATA + es-translated ERC721",
                        "symbol": "MOCKDATA + es-translated ",
                        "logoURI": "MOCKDATA + es-translated https://metadata.sequence.app/projects/30957/collections/819/image.png",
                        "deployed": "es-translated true",
                        "bytecodeHash": "MOCKDATA + es-translated 0x77d12b9637a99b3ba23920eea929a68cc89b49a0e1ff4d2a71b798550cc0060e",
                        "extensions": {
                          "link": "MOCKDATA + es-translated ",
                          "description": "es-translated Placeholders collection",
                          "ogImage": "MOCKDATA + es-translated https://metadata.sequence.app/projects/30957/collections/819/image.png",
                          "ogName": "MOCKDATA + es-translated Vault for Sales",
                          "originChainId": "es-translated 0",
                          "originAddress": "MOCKDATA + es-translated 0x70a2177079877e4aae639d1abb29ffa537b94970",
                          "verified": "es-translated true",
                          "verifiedBy": "es-translated token-directory"
                        },
                        "updatedAt": "MOCKDATA + es-translated 2024-10-22T21:10:39.267327075Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated public"
        ],
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Metadata/GetContractInfoBatch": {
      "post": {
        "summary": "MOCKDATA + es-translated GetContractInfoBatch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Metadata_GetContractInfoBatch_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "chainID": "MOCKDATA + es-translated 80002",
                    "contractAddresses": [
                      "es-translated 0x33c7848db3d37103718736d233f0db65cc222b1e",
                      "MOCKDATA + es-translated 0x70a2177071177e4aae639d1abb23ffa537b94970"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Metadata_GetContractInfoBatch_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "contractInfoMap": {
                        "0x33c7848db3d37103718736d233f0db65cc222b1e": {
                          "chainId": "MOCKDATA + es-translated 80002",
                          "address": "es-translated 0x33c7848db3d37103718736d233f0db65cc222b1e",
                          "name": "MOCKDATA + es-translated Knives",
                          "type": "MOCKDATA + es-translated ERC1155",
                          "symbol": "MOCKDATA + es-translated ",
                          "logoURI": "es-translated https://metadata.sequence.app/projects/35598/collections/827/image.png",
                          "deployed": "es-translated true",
                          "bytecodeHash": "MOCKDATA + es-translated 0x77d12b9637a99b3ba23920eea929a68cc89b49a0e1ff4d2a71b798550cc0060e",
                          "extensions": {
                            "link": "MOCKDATA + es-translated https://baseurl/collections/collectioname",
                            "description": "es-translated All knives from Alternates can be found in this category.",
                            "ogImage": "es-translated https://metadata.sequence.app/projects/35598/collections/827/image.png",
                            "ogName": "MOCKDATA + es-translated Knives",
                            "originChainId": "es-translated 0",
                            "originAddress": "es-translated 0x33c7848db3d37103718736d233f0db65cc222b1e",
                            "verified": "es-translated true",
                            "verifiedBy": "es-translated token-directory"
                          },
                          "updatedAt": "MOCKDATA + es-translated 2024-10-23T06:12:24.243404151Z"
                        },
                        "0x70a2177071177e4aae639d1abb23ffa537b94970": {
                          "chainId": "MOCKDATA + es-translated 80002",
                          "address": "MOCKDATA + es-translated 0x70a2177071177e4aae639d1abb23ffa537b94970",
                          "name": "es-translated Placeholders",
                          "type": "MOCKDATA + es-translated ERC721",
                          "symbol": "MOCKDATA + es-translated ",
                          "logoURI": "MOCKDATA + es-translated https://metadata.sequence.app/projects/30957/collections/819/image.png",
                          "deployed": "es-translated true",
                          "bytecodeHash": "MOCKDATA + es-translated 0x77d12b9637a99b3ba23920eea929a68cc89b49a0e1ff4d2a71b798550cc0060e",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "es-translated Placeholders collection",
                            "ogImage": "MOCKDATA + es-translated https://metadata.sequence.app/projects/30957/collections/819/image.png",
                            "ogName": "MOCKDATA + es-translated Vault for Sales",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated 0x70a2177071177e4aae639d1abb23ffa537b94970",
                            "verified": "es-translated true",
                            "verifiedBy": "es-translated token-directory"
                          },
                          "updatedAt": "es-translated 2024-10-23T05:53:19.171080211Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated public"
        ],
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Metadata/SearchContractInfo": {
      "post": {
        "summary": "es-translated SearchContractInfo",
        "description": "es-translated Search Contract Info across all chains token-lists. Similar to GetContractInfo above, but it will traverse all chains and results from all.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Metadata_SearchContractInfo_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "contractAddress": "MOCKDATA + es-translated 0x70a2177079877e4aae639d1abb29ffa537b94970"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Metadata_SearchContractInfo_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "contractInfoList": [
                        {
                          "chainId": "MOCKDATA + es-translated 80002",
                          "address": "MOCKDATA + es-translated 0x70a2177079877e4aae639d1abb29ffa537b94970",
                          "name": "es-translated Placeholders",
                          "type": "MOCKDATA + es-translated ERC721",
                          "symbol": "MOCKDATA + es-translated ",
                          "logoURI": "MOCKDATA + es-translated https://metadata.sequence.app/projects/30957/collections/819/image.png",
                          "deployed": "es-translated true",
                          "bytecodeHash": "MOCKDATA + es-translated 0x77d12b9637a99b3ba23920eea929a68cc89b49a0e1ff4d2a71b798550cc0060e",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "es-translated Placeholders collection",
                            "ogImage": "MOCKDATA + es-translated https://metadata.sequence.app/projects/30957/collections/819/image.png",
                            "ogName": "MOCKDATA + es-translated Vault for Sales",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated 0x70a2177079877e4aae639d1abb29ffa537b94970",
                            "verified": "es-translated true",
                            "verifiedBy": "es-translated token-directory"
                          },
                          "updatedAt": "es-translated 2024-10-23T05:53:19.171080211Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated public"
        ],
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Metadata/SearchContractInfoBatch": {
      "post": {
        "summary": "MOCKDATA + es-translated SearchContractInfoBatch",
        "description": "es-translated map of contractAddress :: []ContractInfo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Metadata_SearchContractInfoBatch_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "contractAddresses": [
                      "MOCKDATA + es-translated 0x70a2177079877e4aae639d1abb29ffa537b94970"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Metadata_SearchContractInfoBatch_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "contractInfoByChain": {
                        "0x70a2177079877e4aae639d1abb29ffa537b94970": [
                          {
                            "chainId": "MOCKDATA + es-translated 80002",
                            "address": "MOCKDATA + es-translated 0x70a2177079877e4aae639d1abb29ffa537b94970",
                            "name": "es-translated Placeholders",
                            "type": "MOCKDATA + es-translated ERC721",
                            "symbol": "MOCKDATA + es-translated ",
                            "logoURI": "MOCKDATA + es-translated https://metadata.sequence.app/projects/30957/collections/819/image.png",
                            "deployed": "es-translated true",
                            "bytecodeHash": "MOCKDATA + es-translated 0x77d12b9637a99b3ba23920eea929a68cc89b49a0e1ff4d2a71b798550cc0060e",
                            "extensions": {
                              "link": "MOCKDATA + es-translated ",
                              "description": "es-translated Placeholders collection",
                              "ogImage": "MOCKDATA + es-translated https://metadata.sequence.app/projects/30957/collections/819/image.png",
                              "ogName": "MOCKDATA + es-translated Vault for Sales",
                              "originChainId": "es-translated 0",
                              "originAddress": "MOCKDATA + es-translated 0x70a2177079877e4aae639d1abb29ffa537b94970",
                              "verified": "es-translated true",
                              "verifiedBy": "es-translated token-directory"
                            },
                            "updatedAt": "es-translated 2024-10-23T05:53:19.171080211Z"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated public"
        ],
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Metadata/SearchMetadata": {
      "post": {
        "summary": "es-translated SearchMetadata",
        "deprecated": "es-translated true",
        "description": "es-translated Deprecated: Use SearchTokens() and SearchContracts() instead.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Metadata_SearchMetadata_Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Metadata_SearchMetadata_Response"
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Metadata/SearchTokens": {
      "post": {
        "summary": "MOCKDATA + es-translated SearchTokens",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "es-translated #/components/schemas/Metadata_SearchTokens_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "chainID": "MOCKDATA + es-translated 80002",
                    "q": "MOCKDATA + es-translated skyweaver"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Metadata_SearchTokens_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "tokenMetadata": [
                        {
                          "tokenId": "MOCKDATA + es-translated 107",
                          "name": "es-translated Season 0 Floof 107",
                          "description": "MOCKDATA + es-translated ",
                          "image": "MOCKDATA + es-translated https://nft.flooftopia.org/images/Floof_80001_107.png",
                          "properties": {
                            "000_season": {
                              "name": "es-translated season",
                              "value": "MOCKDATA + es-translated Season 0"
                            },
                            "005_floofId": {
                              "name": "es-translated Floof ID",
                              "value": "MOCKDATA + es-translated 107"
                            },
                            "010_head_indices_shape": {
                              "name": "MOCKDATA + es-translated Head Shape",
                              "value": "es-translated Egg"
                            },
                            "015_head_indices_nose": {
                              "name": "MOCKDATA + es-translated Nose",
                              "value": "es-translated Dog Nose"
                            },
                            "020_head_indices_mouth": {
                              "name": "MOCKDATA + es-translated Mouth",
                              "value": "es-translated Smiley"
                            },
                            "025_head_indices_ears": {
                              "name": "MOCKDATA + es-translated Ears",
                              "value": "es-translated Curly Loppy"
                            },
                            "030_head_shape": {
                              "name": "MOCKDATA + es-translated Head Shape Options",
                              "value": [
                                "es-translated 4",
                                "MOCKDATA + es-translated 2",
                                "es-translated -8"
                              ]
                            },
                            "035_head_eye": {
                              "name": "es-translated Eye Options",
                              "value": [
                                "MOCKDATA + es-translated 2",
                                "MOCKDATA + es-translated 21",
                                "es-translated -38"
                              ]
                            },
                            "040_head_eyeColor": {
                              "name": "MOCKDATA + es-translated Eye Color",
                              "value": "es-translated (R=0.018500,G=0.001214,B=0.009721,A=1.000000)"
                            },
                            "045_head_nose": {
                              "name": "MOCKDATA + es-translated Nose Options",
                              "value": [
                                "es-translated -22",
                                "es-translated -6"
                              ]
                            },
                            "050_head_mouth": {
                              "name": "MOCKDATA + es-translated Mouth Options",
                              "value": [
                                "es-translated -61",
                                "MOCKDATA + es-translated 61"
                              ]
                            },
                            "055_head_ears": {
                              "name": "es-translated Ears Options",
                              "value": [
                                "MOCKDATA + es-translated 19",
                                "es-translated 14",
                                "es-translated 4"
                              ]
                            },
                            "060_fur_indices_length": {
                              "name": "MOCKDATA + es-translated Fur Length",
                              "value": "es-translated Short"
                            },
                            "065_fur_indices_pattern": {
                              "name": "MOCKDATA + es-translated Fur Pattern",
                              "value": "es-translated Patches"
                            },
                            "070_fur_color": {
                              "name": "MOCKDATA + es-translated Fur Color",
                              "value": "es-translated (R=0.361307,G=0.155926,B=0.012286,A=1.000000)"
                            },
                            "075_fur_color_pattern": {
                              "name": "MOCKDATA + es-translated Pattern Color",
                              "value": "es-translated (R=0.016807,G=0.001214,B=0.005182,A=1.000000)"
                            },
                            "080_fur_pattern": {
                              "name": "MOCKDATA + es-translated Fur Pattern Options",
                              "value": [
                                "es-translated -45",
                                "MOCKDATA + es-translated 50"
                              ]
                            },
                            "085_extras_indices_attachments": {
                              "name": "MOCKDATA + es-translated Attachment",
                              "value": "es-translated Deer Antlers"
                            },
                            "090_extras_indices_tail": {
                              "name": "MOCKDATA + es-translated Tail",
                              "value": "es-translated Fox Tail"
                            },
                            "095_extras_attachments": {
                              "name": "MOCKDATA + es-translated Attachment Options",
                              "value": [
                                "MOCKDATA + es-translated -4",
                                "es-translated -18",
                                "MOCKDATA + es-translated -16"
                              ]
                            },
                            "100_extras_tail": {
                              "name": "es-translated Tail Options",
                              "value": [
                                "es-translated -61",
                                "es-translated 14"
                              ]
                            },
                            "200_background_sky": {
                              "name": "MOCKDATA + es-translated Background Sky",
                              "value": "es-translated Blue Sky"
                            },
                            "205_background_middle": {
                              "name": "MOCKDATA + es-translated Background Middle",
                              "value": "es-translated Mountains"
                            },
                            "210_background_ground": {
                              "name": "MOCKDATA + es-translated Background Ground",
                              "value": "MOCKDATA + es-translated Grassy Field"
                            },
                            "215_background_item_l": {
                              "name": "es-translated Background Left Item",
                              "value": "MOCKDATA + es-translated Present"
                            },
                            "220_background_item_r": {
                              "name": "es-translated Background Right Item",
                              "value": "MOCKDATA + es-translated Skyweaver"
                            }
                          },
                          "attributes": null,
                          "external_url": "es-translated https://www.flooftopia.org",
                          "decimals": "es-translated 0",
                          "updatedAt": "MOCKDATA + es-translated 2023-11-16T19:48:51.110477Z"
                        }
                      ],
                      "nextPage": {
                        "page": "MOCKDATA + es-translated 2",
                        "pageSize": "MOCKDATA + es-translated 30",
                        "more": "es-translated true"
                      }
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated public"
        ],
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Metadata/SearchContracts": {
      "post": {
        "summary": "MOCKDATA + es-translated SearchContracts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Metadata_SearchContracts_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "chainID": "es-translated 137",
                    "q": "MOCKDATA + es-translated skyweaver"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Metadata_SearchContracts_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "contractInfo": [
                        {
                          "chainId": "es-translated 137",
                          "address": "MOCKDATA + es-translated 0x6310c8c6190d99e60422307e75d7770fd1f519d4",
                          "name": "es-translated Skyweaver Payment Proxy",
                          "type": "es-translated UNKNOWN",
                          "symbol": "MOCKDATA + es-translated ",
                          "deployed": "es-translated true",
                          "bytecodeHash": "MOCKDATA + es-translated 0x8a5479c4349518592d41456e7e6983cab19fc4b71f9fce257d3bb5eaec6001bf",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated ",
                            "ogImage": "MOCKDATA + es-translated ",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "verified": "es-translated false"
                          },
                          "updatedAt": "es-translated 2024-02-28T19:52:03.42984Z"
                        },
                        {
                          "chainId": "es-translated 137",
                          "address": "MOCKDATA + es-translated 0x9b609bf3a3977ee7254210e0a0d835251540c4d5",
                          "name": "es-translated Skyweaver Niftyswap",
                          "type": "es-translated UNKNOWN",
                          "symbol": "MOCKDATA + es-translated SWAP",
                          "logoURI": "es-translated https://assets.skyweaver.net/latest/sw-swap.png",
                          "deployed": "es-translated true",
                          "bytecodeHash": "MOCKDATA + es-translated 0xa04f6e37cbe77c331383504e172081eb95e8ef7aea51ad38c3f313c49422ecad",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated ",
                            "ogImage": "MOCKDATA + es-translated ",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "verified": "es-translated true",
                            "verifiedBy": "es-translated token-directory"
                          },
                          "updatedAt": "es-translated 2024-06-24T14:56:10.348913Z"
                        },
                        {
                          "chainId": "es-translated 137",
                          "address": "MOCKDATA + es-translated 0xb5c3023dbece7a6bb78014000cd1c8ce940b50a0",
                          "name": "es-translated Skyweaver Market Fee",
                          "type": "es-translated UNKNOWN",
                          "symbol": "MOCKDATA + es-translated ",
                          "deployed": "es-translated true",
                          "bytecodeHash": "MOCKDATA + es-translated 0x",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated ",
                            "ogImage": "MOCKDATA + es-translated ",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "verified": "es-translated true",
                            "verifiedBy": "es-translated token-directory"
                          },
                          "updatedAt": "es-translated 2024-06-24T14:56:10.348925Z"
                        },
                        {
                          "chainId": "es-translated 137",
                          "address": "MOCKDATA + es-translated 0x2f88096676ea7491305c82752f87a4df73e77a5c",
                          "name": "es-translated Skyweaver Niftyswap",
                          "type": "es-translated UNKNOWN",
                          "symbol": "MOCKDATA + es-translated SWAP",
                          "logoURI": "es-translated https://assets.skyweaver.net/latest/sw-swap.png",
                          "deployed": "es-translated true",
                          "bytecodeHash": "es-translated 0xb29d8f6581dc0b517b09690a2d320e8b491b843058853b1d02becd97d0a0364d",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated ",
                            "ogImage": "MOCKDATA + es-translated ",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "blacklist": "es-translated true",
                            "verified": "es-translated true",
                            "verifiedBy": "es-translated token-directory"
                          },
                          "updatedAt": "MOCKDATA + es-translated 2024-06-24T14:56:10.348965Z"
                        },
                        {
                          "chainId": "es-translated 137",
                          "address": "es-translated 0x86815cd8a85414a032e631f375f966a6cc366f9f",
                          "name": "MOCKDATA + es-translated Skyweaver Conquest",
                          "type": "es-translated UNKNOWN",
                          "symbol": "es-translated CONQUEST",
                          "logoURI": "MOCKDATA + es-translated https://assets.skyweaver.net/iYyh8-Op/webapp/icons/conquest-ticket-splash.png",
                          "deployed": "es-translated true",
                          "bytecodeHash": "MOCKDATA + es-translated 0x",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated ",
                            "ogImage": "MOCKDATA + es-translated ",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "verified": "es-translated true",
                            "verifiedBy": "es-translated token-directory"
                          },
                          "updatedAt": "es-translated 2024-06-24T14:56:10.348953Z"
                        },
                        {
                          "chainId": "es-translated 137",
                          "address": "MOCKDATA + es-translated 0x58d82d9fb669aec50832f3703698479ff7567559",
                          "name": "es-translated Skyweaver Niftyswap (local)",
                          "type": "es-translated UNKNOWN",
                          "symbol": "MOCKDATA + es-translated SWAP",
                          "logoURI": "es-translated https://assets.skyweaver.net/latest/sw-swap.png",
                          "deployed": "es-translated true",
                          "bytecodeHash": "MOCKDATA + es-translated 0x81fdabb11cb9f9ff9b95fa3af750edbb2f3ca4f85e16ee2ee0144ce31e0ab973",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated ",
                            "ogImage": "MOCKDATA + es-translated ",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "verified": "es-translated true",
                            "verifiedBy": "es-translated token-directory"
                          },
                          "updatedAt": "es-translated 2024-06-24T14:56:10.348997Z"
                        },
                        {
                          "chainId": "es-translated 137",
                          "address": "MOCKDATA + es-translated 0xa841aa6805957486cc2e30bb30b737e3f5b14e17",
                          "name": "es-translated Skyweaver Conquest Tickets Factory",
                          "type": "es-translated UNKNOWN",
                          "symbol": "MOCKDATA + es-translated GET-CONQUEST",
                          "logoURI": "MOCKDATA + es-translated https://assets.skyweaver.net/iYyh8-Op/webapp/icons/conquest-ticket-splash.png",
                          "deployed": "es-translated true",
                          "bytecodeHash": "MOCKDATA + es-translated 0x",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated ",
                            "ogImage": "MOCKDATA + es-translated ",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "blacklist": "es-translated true",
                            "verified": "es-translated true",
                            "verifiedBy": "es-translated token-directory"
                          },
                          "updatedAt": "es-translated 2024-06-24T14:56:10.349016Z"
                        },
                        {
                          "chainId": "es-translated 137",
                          "address": "MOCKDATA + es-translated 0x742ac8f575563f090abc70e5ca19932472ec76ef",
                          "name": "es-translated Skyweaver Conquest Tickets Factory (stg)",
                          "type": "es-translated UNKNOWN",
                          "symbol": "MOCKDATA + es-translated GET-CONQUEST",
                          "logoURI": "MOCKDATA + es-translated https://assets.skyweaver.net/iYyh8-Op/webapp/icons/conquest-ticket-splash.png",
                          "deployed": "es-translated true",
                          "bytecodeHash": "MOCKDATA + es-translated 0x",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated ",
                            "ogImage": "MOCKDATA + es-translated ",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "verified": "es-translated true",
                            "verifiedBy": "es-translated token-directory"
                          },
                          "updatedAt": "MOCKDATA + es-translated 2024-06-24T14:56:10.349041Z"
                        },
                        {
                          "chainId": "es-translated 137",
                          "address": "es-translated 0x85117852a3dea4fa50afff171b9b09a4d83c8e4f",
                          "name": "MOCKDATA + es-translated Skyweaver Conquest",
                          "type": "es-translated UNKNOWN",
                          "symbol": "es-translated CONQUEST",
                          "logoURI": "MOCKDATA + es-translated https://assets.skyweaver.net/iYyh8-Op/webapp/icons/conquest-ticket-splash.png",
                          "deployed": "es-translated true",
                          "bytecodeHash": "MOCKDATA + es-translated 0x",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated ",
                            "ogImage": "MOCKDATA + es-translated ",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "blacklist": "es-translated true",
                            "verified": "es-translated true",
                            "verifiedBy": "es-translated token-directory"
                          },
                          "updatedAt": "MOCKDATA + es-translated 2024-06-24T14:56:10.349047Z"
                        },
                        {
                          "chainId": "es-translated 137",
                          "address": "es-translated 0xedbdeb151e1cd111df8ec4a6d88719f415c5fdd7",
                          "name": "MOCKDATA + es-translated Skyweaver Conquest (dev)",
                          "type": "es-translated UNKNOWN",
                          "symbol": "es-translated CONQUEST",
                          "logoURI": "MOCKDATA + es-translated https://assets.skyweaver.net/iYyh8-Op/webapp/icons/conquest-ticket-splash.png",
                          "deployed": "es-translated true",
                          "bytecodeHash": "MOCKDATA + es-translated 0x",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated ",
                            "ogImage": "MOCKDATA + es-translated ",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "verified": "es-translated true",
                            "verifiedBy": "es-translated token-directory"
                          },
                          "updatedAt": "es-translated 2024-06-24T14:56:10.349053Z"
                        },
                        {
                          "chainId": "es-translated 137",
                          "address": "MOCKDATA + es-translated 0x9bc4bd99b0eac905dcc7a9f52d0b1fa1d72cd532",
                          "name": "es-translated Skyweaver Conquest (local)",
                          "type": "es-translated UNKNOWN",
                          "symbol": "es-translated CONQUEST",
                          "logoURI": "MOCKDATA + es-translated https://assets.skyweaver.net/iYyh8-Op/webapp/icons/conquest-ticket-splash.png",
                          "deployed": "es-translated true",
                          "bytecodeHash": "MOCKDATA + es-translated 0x",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated ",
                            "ogImage": "MOCKDATA + es-translated ",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "verified": "es-translated true",
                            "verifiedBy": "es-translated token-directory"
                          },
                          "updatedAt": "MOCKDATA + es-translated 2024-06-24T14:56:10.349059Z"
                        },
                        {
                          "chainId": "es-translated 137",
                          "address": "es-translated 0xdc9df33d9bad1ca9a9220b5f3d65865a84a8d528",
                          "name": "MOCKDATA + es-translated Skyweaver Conquest (stg)",
                          "type": "es-translated UNKNOWN",
                          "symbol": "es-translated CONQUEST",
                          "logoURI": "MOCKDATA + es-translated https://assets.skyweaver.net/iYyh8-Op/webapp/icons/conquest-ticket-splash.png",
                          "deployed": "es-translated true",
                          "bytecodeHash": "MOCKDATA + es-translated 0x",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated ",
                            "ogImage": "MOCKDATA + es-translated ",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "verified": "es-translated true",
                            "verifiedBy": "es-translated token-directory"
                          },
                          "updatedAt": "es-translated 2024-06-24T14:56:10.349065Z"
                        },
                        {
                          "chainId": "es-translated 137",
                          "address": "MOCKDATA + es-translated 0x12faf77beab96a21593fc32734be1178346f17e6",
                          "name": "es-translated Skyweaver Payment Proxy",
                          "type": "es-translated UNKNOWN",
                          "symbol": "MOCKDATA + es-translated ",
                          "deployed": "es-translated true",
                          "bytecodeHash": "MOCKDATA + es-translated 0x8a5479c4349518592d41456e7e6983cab19fc4b71f9fce257d3bb5eaec6001bf",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated ",
                            "ogImage": "MOCKDATA + es-translated ",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "verified": "es-translated false"
                          },
                          "updatedAt": "es-translated 2024-03-11T20:20:38.740017Z"
                        },
                        {
                          "chainId": "es-translated 137",
                          "address": "MOCKDATA + es-translated 0x8e0079a2452f71558f13f0facb65d43e376d4f20",
                          "name": "es-translated Skyweaver Payment Proxy",
                          "type": "es-translated UNKNOWN",
                          "symbol": "MOCKDATA + es-translated ",
                          "deployed": "es-translated true",
                          "bytecodeHash": "es-translated 0x2b4204c124e194df7080ef85312509b7161980e9da5d565fcb18a2770e457289",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated ",
                            "ogImage": "MOCKDATA + es-translated ",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "verified": "es-translated false"
                          },
                          "updatedAt": "MOCKDATA + es-translated 2024-03-11T20:26:53.048209Z"
                        },
                        {
                          "chainId": "es-translated 137",
                          "address": "es-translated 0x96897146606c7d16b208891e74bc5db9d0faa3af",
                          "name": "es-translated Skyweaver Payment Proxy",
                          "type": "es-translated UNKNOWN",
                          "symbol": "MOCKDATA + es-translated ",
                          "deployed": "es-translated true",
                          "bytecodeHash": "es-translated 0x2b4204c124e194df7080ef85312509b7161980e9da5d565fcb18a2770e457289",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated ",
                            "ogImage": "MOCKDATA + es-translated ",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "verified": "es-translated false"
                          },
                          "updatedAt": "MOCKDATA + es-translated 2024-03-01T00:03:03.436606Z"
                        },
                        {
                          "chainId": "es-translated 137",
                          "address": "es-translated 0xa3db84c3d8003f93b6890bb5a291237a408c61cf",
                          "name": "MOCKDATA + es-translated Skyweaver Sam's Avatars",
                          "type": "es-translated ERC20",
                          "symbol": "MOCKDATA + es-translated ",
                          "deployed": "es-translated true",
                          "bytecodeHash": "es-translated 0xcf86b412cad75b8679f7f2810e4865a977de8fb4a657d83d144d740edd4a0e2e",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated ",
                            "ogImage": "MOCKDATA + es-translated ",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "verified": "es-translated false"
                          },
                          "updatedAt": "MOCKDATA + es-translated 2023-11-24T16:58:29.125983Z"
                        },
                        {
                          "chainId": "es-translated 137",
                          "address": "MOCKDATA + es-translated 0x86442a7180ed2bb304d5304ed5ac66e041eeb623",
                          "name": "es-translated Skyweaver Payment Proxy",
                          "type": "es-translated UNKNOWN",
                          "symbol": "MOCKDATA + es-translated ",
                          "deployed": "es-translated true",
                          "bytecodeHash": "es-translated 0x2b4204c124e194df7080ef85312509b7161980e9da5d565fcb18a2770e457289",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated ",
                            "ogImage": "MOCKDATA + es-translated ",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "verified": "es-translated false"
                          },
                          "updatedAt": "es-translated 2024-03-12T18:39:34.447134Z"
                        },
                        {
                          "chainId": "es-translated 137",
                          "address": "MOCKDATA + es-translated 0x787efdb84e94abc631e5a1983c937d220529b94c",
                          "name": "es-translated Skyweaver Treasury",
                          "type": "es-translated UNKNOWN",
                          "symbol": "MOCKDATA + es-translated ",
                          "deployed": "es-translated true",
                          "bytecodeHash": "MOCKDATA + es-translated 0x",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated ",
                            "ogImage": "MOCKDATA + es-translated ",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "verified": "es-translated true",
                            "verifiedBy": "es-translated token-directory"
                          },
                          "updatedAt": "MOCKDATA + es-translated 2024-06-24T14:56:10.348938Z"
                        },
                        {
                          "chainId": "es-translated 137",
                          "address": "es-translated 0x059d3242ded5bad6008ed0899f5e0e22cab0586a",
                          "name": "es-translated Skyweaver Conquest Tickets Factory",
                          "type": "es-translated UNKNOWN",
                          "symbol": "MOCKDATA + es-translated GET-CONQUEST",
                          "logoURI": "MOCKDATA + es-translated https://assets.skyweaver.net/iYyh8-Op/webapp/icons/conquest-ticket-splash.png",
                          "deployed": "es-translated true",
                          "bytecodeHash": "MOCKDATA + es-translated 0x61d1bd5e3a4d5c9c380d3b6cf970f96d63ae1376d55a2c1205869d1f5ef770f7",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated ",
                            "ogImage": "MOCKDATA + es-translated ",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "verified": "es-translated true",
                            "verifiedBy": "es-translated token-directory"
                          },
                          "updatedAt": "es-translated 2024-06-24T14:56:10.348946Z"
                        },
                        {
                          "chainId": "es-translated 137",
                          "address": "MOCKDATA + es-translated 0x00a33f640f8b4efd6a154270fcdbf288d17d4385",
                          "name": "es-translated Skyweaver Niftyswap (dev old)",
                          "type": "es-translated UNKNOWN",
                          "symbol": "MOCKDATA + es-translated SWAP",
                          "logoURI": "es-translated https://assets.skyweaver.net/latest/sw-swap.png",
                          "deployed": "es-translated true",
                          "bytecodeHash": "MOCKDATA + es-translated 0x24cd2c7fa8e95fd37d27f97497f08d207895c52b9c318973cfa43121dbbd8da7",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated ",
                            "ogImage": "MOCKDATA + es-translated ",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "verified": "es-translated true",
                            "verifiedBy": "es-translated token-directory"
                          },
                          "updatedAt": "es-translated 2024-06-24T14:56:10.348973Z"
                        },
                        {
                          "chainId": "es-translated 137",
                          "address": "MOCKDATA + es-translated 0x7f6b2bb2217f2cdccd304cb04c4bf98704d30d54",
                          "name": "es-translated Skyweaver Niftyswap (dev)",
                          "type": "es-translated UNKNOWN",
                          "symbol": "MOCKDATA + es-translated SWAP",
                          "logoURI": "es-translated https://assets.skyweaver.net/latest/sw-swap.png",
                          "deployed": "es-translated true",
                          "bytecodeHash": "MOCKDATA + es-translated 0x",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated ",
                            "ogImage": "MOCKDATA + es-translated ",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "verified": "es-translated true",
                            "verifiedBy": "es-translated token-directory"
                          },
                          "updatedAt": "MOCKDATA + es-translated 2024-06-24T14:56:10.348981Z"
                        },
                        {
                          "chainId": "es-translated 137",
                          "address": "es-translated 0x95584e36255681f5335702057e150a02cc9a3032",
                          "name": "MOCKDATA + es-translated Skyweaver Niftyswap (stg)",
                          "type": "es-translated UNKNOWN",
                          "symbol": "MOCKDATA + es-translated SWAP",
                          "logoURI": "es-translated https://assets.skyweaver.net/latest/sw-swap.png",
                          "deployed": "es-translated true",
                          "bytecodeHash": "MOCKDATA + es-translated 0x",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated ",
                            "ogImage": "MOCKDATA + es-translated ",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "verified": "es-translated true",
                            "verifiedBy": "es-translated token-directory"
                          },
                          "updatedAt": "es-translated 2024-06-24T14:56:10.349007Z"
                        },
                        {
                          "chainId": "es-translated 137",
                          "address": "MOCKDATA + es-translated 0x241c42c409c4ba4f449ec9cf3b5b853a4a5e8d4c",
                          "name": "es-translated Skyweaver Conquest Tickets Factory (dev)",
                          "type": "es-translated UNKNOWN",
                          "symbol": "MOCKDATA + es-translated GET-CONQUEST",
                          "logoURI": "MOCKDATA + es-translated https://assets.skyweaver.net/iYyh8-Op/webapp/icons/conquest-ticket-splash.png",
                          "deployed": "es-translated true",
                          "bytecodeHash": "MOCKDATA + es-translated 0x448b201ec52b593a425f3f002309c52830dd1928aac61b4826264613f8ac81b0",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated ",
                            "ogImage": "MOCKDATA + es-translated ",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "verified": "es-translated true",
                            "verifiedBy": "es-translated token-directory"
                          },
                          "updatedAt": "es-translated 2024-06-24T14:56:10.349026Z"
                        },
                        {
                          "chainId": "es-translated 137",
                          "address": "MOCKDATA + es-translated 0x2e7dd4b107e7449700df4eb74df910443b0a8acf",
                          "name": "es-translated Skyweaver Conquest Tickets Factory (local)",
                          "type": "es-translated UNKNOWN",
                          "symbol": "MOCKDATA + es-translated GET-CONQUEST",
                          "logoURI": "MOCKDATA + es-translated https://assets.skyweaver.net/iYyh8-Op/webapp/icons/conquest-ticket-splash.png",
                          "deployed": "es-translated true",
                          "bytecodeHash": "MOCKDATA + es-translated 0x",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated ",
                            "ogImage": "MOCKDATA + es-translated ",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "verified": "es-translated true",
                            "verifiedBy": "es-translated token-directory"
                          },
                          "updatedAt": "MOCKDATA + es-translated 2024-06-24T14:56:10.349034Z"
                        },
                        {
                          "chainId": "es-translated 137",
                          "address": "es-translated 0xaf23b2199fd8a4f0d47a587c6403db534f131f8e",
                          "name": "MOCKDATA + es-translated Big Skyweaver",
                          "type": "MOCKDATA + es-translated ERC1155",
                          "symbol": "MOCKDATA + es-translated Big Skyweaver",
                          "deployed": "es-translated true",
                          "bytecodeHash": "es-translated 0xa2a2f71551a15ee9e88d5be5f3a0d1716fb9a758d7f525b73d25368d1bca60e5",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated ",
                            "ogImage": "MOCKDATA + es-translated ",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "verified": "es-translated false"
                          },
                          "updatedAt": "MOCKDATA + es-translated 2024-09-19T08:30:23.53885Z"
                        },
                        {
                          "chainId": "es-translated 137",
                          "address": "es-translated 0x6dba7e0065d43e61412c55fddc3214e371101ad4",
                          "name": "es-translated Skyweaver Payment Proxy",
                          "type": "es-translated UNKNOWN",
                          "symbol": "MOCKDATA + es-translated ",
                          "deployed": "es-translated true",
                          "bytecodeHash": "MOCKDATA + es-translated 0xa1275962bd7967e5e8ce1d31a731aa230605cebbf841d8967a910023d1b38ef1",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated ",
                            "ogImage": "MOCKDATA + es-translated ",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "verified": "es-translated false"
                          },
                          "updatedAt": "es-translated 2024-03-01T00:03:03.436612Z"
                        },
                        {
                          "chainId": "es-translated 137",
                          "address": "MOCKDATA + es-translated 0xd6e5ad42107196628229bda2e4ddf83a740b0891",
                          "name": "es-translated Light Skyweaver",
                          "type": "MOCKDATA + es-translated ERC1155",
                          "symbol": "es-translated Light Skyweaver",
                          "deployed": "es-translated true",
                          "bytecodeHash": "es-translated 0xa2a2f71551a15ee9e88d5be5f3a0d1716fb9a758d7f525b73d25368d1bca60e5",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated ",
                            "ogImage": "MOCKDATA + es-translated ",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "verified": "es-translated false"
                          },
                          "updatedAt": "MOCKDATA + es-translated 2024-07-26T10:30:37.613067Z"
                        },
                        {
                          "chainId": "es-translated 137",
                          "address": "es-translated 0x7fb40ba8fbff2b115f72ebd12648488619924f4d",
                          "name": "MOCKDATA + es-translated Tiny Skyweaver",
                          "type": "MOCKDATA + es-translated ERC1155",
                          "symbol": "MOCKDATA + es-translated Tiny Skyweaver",
                          "deployed": "es-translated true",
                          "bytecodeHash": "es-translated 0xa2a2f71551a15ee9e88d5be5f3a0d1716fb9a758d7f525b73d25368d1bca60e5",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated ",
                            "ogImage": "MOCKDATA + es-translated ",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "verified": "es-translated false"
                          },
                          "updatedAt": "es-translated 2024-09-29T06:52:52.198645Z"
                        },
                        {
                          "chainId": "es-translated 137",
                          "address": "MOCKDATA + es-translated 0x631998e91476da5b870d741192fc5cbc55f5a52e",
                          "name": "MOCKDATA + es-translated Skyweaver",
                          "type": "MOCKDATA + es-translated ERC1155",
                          "symbol": "es-translated SKYWVR",
                          "logoURI": "MOCKDATA + es-translated https://assets.skyweaver.net/_tX5dRVi/webapp/icons/skyweaver-token.png",
                          "deployed": "es-translated true",
                          "bytecodeHash": "es-translated 0x0b3a422ea307987db0bc40c75566bf4ad0d4fcd617916032e73757f2a4017539",
                          "extensions": {
                            "link": "MOCKDATA + es-translated https://www.skyweaver.net/",
                            "description": "es-translated Skyweaver is a Free-to-Play, trading card game powered by Polygon and Ethereum.",
                            "ogImage": "MOCKDATA + es-translated https://skyweaver.net/images/skyweavercover.jpg",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated 0x631998e91476da5b870d741192fc5cbc55f5a52e",
                            "verified": "es-translated true",
                            "verifiedBy": "es-translated token-directory",
                            "featured": "es-translated true"
                          },
                          "updatedAt": "es-translated 2024-08-13T15:44:12.355679Z"
                        },
                        {
                          "chainId": "es-translated 137",
                          "address": "MOCKDATA + es-translated 0x5151bfa48249c57695336c66d51054c9367f6d33",
                          "name": "MOCKDATA + es-translated Skyweaver",
                          "type": "MOCKDATA + es-translated ERC1155",
                          "symbol": "es-translated SKYWVR",
                          "logoURI": "es-translated https://assets.skyweaver.net/wiu-vYUH/webapp/icons/skyweaver-token.png",
                          "deployed": "es-translated true",
                          "bytecodeHash": "MOCKDATA + es-translated 0xacf498e88ebcfaa0f9074db9d49486392a93b507149a0163c506eacb12864739",
                          "extensions": {
                            "link": "MOCKDATA + es-translated https://www.skyweaver.net/",
                            "description": "es-translated Skyweaver is a Free-to-Play, trading card game powered by Ethereum.",
                            "ogImage": "MOCKDATA + es-translated https://skyweaver.net/images/skyweavercover.jpg",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated 0x5151bfa48249c57695336c66d51054c9367f6d33",
                            "blacklist": "es-translated true",
                            "verified": "es-translated true",
                            "verifiedBy": "es-translated token-directory"
                          },
                          "updatedAt": "es-translated 2024-08-13T15:44:12.355679Z"
                        }
                      ],
                      "nextPage": {
                        "page": "MOCKDATA + es-translated 2",
                        "pageSize": "MOCKDATA + es-translated 30",
                        "more": "es-translated true"
                      }
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Metadata/DirectoryGetNetworks": {
      "post": {
        "summary": "MOCKDATA + es-translated DirectoryGetNetworks",
        "description": "es-translated Token Directory. NOTE: this only searches the 'token-directory' items. Use 'SearchContracts' or 'SearchTokens' for everything else.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Metadata_DirectoryGetNetworks_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "includeTestnets": "es-translated true",
                    "onlyFeatured": "es-translated false"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Metadata_DirectoryGetNetworks_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "networks": [
                        "MOCKDATA + es-translated 84532",
                        "es-translated 19011",
                        "MOCKDATA + es-translated 42161",
                        "es-translated 168587773",
                        "MOCKDATA + es-translated 43114",
                        "es-translated 42170",
                        "MOCKDATA + es-translated 10",
                        "MOCKDATA + es-translated 37714555429",
                        "MOCKDATA + es-translated 21000000",
                        "es-translated 100",
                        "es-translated 11155111",
                        "es-translated 8453",
                        "es-translated 137",
                        "MOCKDATA + es-translated 1946",
                        "es-translated 1993",
                        "MOCKDATA + es-translated 80002",
                        "MOCKDATA + es-translated 97",
                        "es-translated 40875",
                        "MOCKDATA + es-translated 43113",
                        "es-translated 1",
                        "es-translated 37084624",
                        "MOCKDATA + es-translated 5",
                        "MOCKDATA + es-translated 80001",
                        "es-translated 3776",
                        "MOCKDATA + es-translated 6038361",
                        "es-translated 660279",
                        "MOCKDATA + es-translated 421614",
                        "es-translated 33111",
                        "MOCKDATA + es-translated 1101",
                        "es-translated 33139",
                        "MOCKDATA + es-translated 56"
                      ]
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated public"
        ],
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Metadata/DirectoryGetCollections": {
      "post": {
        "summary": "es-translated DirectoryGetCollections",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Metadata_DirectoryGetCollections_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "includeTestnets": "es-translated true",
                    "onlyFeatured": "es-translated false",
                    "chainId": "MOCKDATA + es-translated 80002"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Metadata_DirectoryGetCollections_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "collections": [
                        {
                          "chainId": "MOCKDATA + es-translated 80002",
                          "address": "MOCKDATA + es-translated 0xecfda15b60f2090b9c2c678910889e49e7edaab8",
                          "name": "es-translated colecction 3 de las uan",
                          "type": "MOCKDATA + es-translated ERC721",
                          "symbol": "MOCKDATA + es-translated ",
                          "deployed": "es-translated true",
                          "bytecodeHash": "MOCKDATA + es-translated 0x77d12b9637a99b3ba23920eea929a68cc89b49a0e1ff4d2a71b798550cc0060e",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated test en poligon",
                            "ogImage": "MOCKDATA + es-translated ",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "verified": "es-translated true",
                            "verifiedBy": "es-translated token-directory"
                          },
                          "updatedAt": "es-translated 2024-08-20T15:53:43.971994Z"
                        },
                        {
                          "chainId": "MOCKDATA + es-translated 80002",
                          "address": "MOCKDATA + es-translated 0xd67dd82a97b21dafc1c62671e6909d22741c8235",
                          "name": "es-translated Tester Contract For Indexer Subscriptions",
                          "type": "es-translated UNKNOWN",
                          "symbol": "MOCKDATA + es-translated ",
                          "deployed": "es-translated true",
                          "bytecodeHash": "MOCKDATA + es-translated 0x",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated ",
                            "ogImage": "MOCKDATA + es-translated ",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "verified": "es-translated true",
                            "verifiedBy": "es-translated token-directory"
                          },
                          "updatedAt": "MOCKDATA + es-translated 2024-08-01T14:30:37.100518Z"
                        },
                        {
                          "chainId": "MOCKDATA + es-translated 80002",
                          "address": "es-translated 0xa1b52a27a68f77db09e57defc912eab802500278",
                          "name": "MOCKDATA + es-translated Toys",
                          "type": "MOCKDATA + es-translated ERC1155",
                          "symbol": "MOCKDATA + es-translated ",
                          "deployed": "es-translated true",
                          "bytecodeHash": "MOCKDATA + es-translated 0x77d12b9637a99b3ba23920eea929a68cc89b49a0e1ff4d2a71b798550cc0060e",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated ",
                            "ogImage": "MOCKDATA + es-translated ",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "verified": "es-translated true",
                            "verifiedBy": "es-translated token-directory"
                          },
                          "updatedAt": "es-translated 2024-08-20T15:53:45.705423Z"
                        },
                        {
                          "chainId": "MOCKDATA + es-translated 80002",
                          "address": "MOCKDATA + es-translated 0x4442e4878d60b13c0bca9ceb6b0bab82eaa03d56",
                          "name": "es-translated demo collection",
                          "type": "MOCKDATA + es-translated ERC1155",
                          "symbol": "MOCKDATA + es-translated ",
                          "deployed": "es-translated true",
                          "bytecodeHash": "MOCKDATA + es-translated 0x77d12b9637a99b3ba23920eea929a68cc89b49a0e1ff4d2a71b798550cc0060e",
                          "extensions": {
                            "link": "MOCKDATA + es-translated ",
                            "description": "MOCKDATA + es-translated demo collection description",
                            "ogImage": "es-translated https://metadata.sequence.app/projects/38573/collections/713/image.jpg",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "verified": "es-translated true",
                            "verifiedBy": "es-translated token-directory"
                          },
                          "updatedAt": "MOCKDATA + es-translated 2024-09-09T08:49:47.852638Z"
                        },
                        {
                          "chainId": "MOCKDATA + es-translated 80002",
                          "address": "es-translated 0x9559e7958d4729cf7ed4d9ff58a3ae1704800500",
                          "name": "MOCKDATA + es-translated Prueba-0",
                          "type": "MOCKDATA + es-translated ERC721",
                          "symbol": "MOCKDATA + es-translated ",
                          "deployed": "es-translated true",
                          "bytecodeHash": "MOCKDATA + es-translated 0x77d12b9637a99b3ba23920eea929a68cc89b49a0e1ff4d2a71b798550cc0060e",
                          "extensions": {
                            "link": "es-translated https://www.google.com",
                            "description": "MOCKDATA + es-translated Collection description",
                            "ogImage": "es-translated https://metadata.sequence.app/projects/30957/collections/552/image.png",
                            "ogName": "MOCKDATA + es-translated ",
                            "originChainId": "es-translated 0",
                            "originAddress": "MOCKDATA + es-translated ",
                            "verified": "es-translated true",
                            "verifiedBy": "es-translated token-directory"
                          },
                          "updatedAt": "MOCKDATA + es-translated 2024-08-20T15:53:47.072029Z"
                        },
                        {
                          "chainId": "MOCKDATA + es-translated 80002",
                          "address": "es-translated 0x2b1e643324b3c479aa0803664637586493c3c204",
                          "name": "MOCKDATA + es-translated Weapons",
                          "type": "MOCKDATA + es-translated ERC1155",
                          "symbol": "MOCKDATA + es-translated ",
                          "logoURI": "es-translated https://metadata.sequence.app/projects/35598/collections/620/image.png",
                          "deployed": "es-translated true",
                          "bytecodeHash": "MOCKDATA + es-translated 0xed47946e266a404fc37371df08eefdebb2fccba9ebe60c6ca8b467e1dd554ae0",
                          "extensions": {
                            "link": "MOCKDATA + es-translated https://baseurl/collections/collectioname",
                            "description": "es-translated All weapons from Alternates can be found in this category.",
                            "ogImage": "es-translated https://metadata.sequence.app/projects/35598/collections/620/image.png",
                            "ogName": "MOCKDATA + es-translated Weapons 1155",
                            "originChainId": "es-translated 0",
                            "originAddress": "es-translated 0x2b1e643324b3c479aa0803664637586493c3c204",
                            "verified": "es-translated true",
                            "verifiedBy": "es-translated token-directory"
                          },
                          "updatedAt": "es-translated 2024-10-03T09:49:56.459325Z"
                        }
                      ],
                      "page": {
                        "page": "MOCKDATA + es-translated 2",
                        "pageSize": "MOCKDATA + es-translated 30",
                        "more": "es-translated true"
                      }
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated public"
        ],
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Collections/CreateCollection": {
      "post": {
        "summary": "es-translated CreateCollection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "es-translated #/components/schemas/Collections_CreateCollection_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "projectId": "MOCKDATA + es-translated 30957",
                    "collection": {
                      "projectId": "MOCKDATA + es-translated 30957",
                      "private": "es-translated true",
                      "metadata": {
                        "name": "es-translated Sandbox Chronicles",
                        "description": "MOCKDATA + es-translated A collection of test cases designed to push the boundaries of your API. Whether you’re validating edge cases, simulating real-world scenarios, or just experimenting with wild inputs, this suite ensures your endpoints are battle-tested and ready for anything. Perfect for developers who embrace the unexpected and thrive on precision.",
                        "externalLink": "es-translated https://sequence.xyz/",
                        "properties": {
                          "maxNfts": "MOCKDATA + es-translated 22",
                          "minNfts": "es-translated 4",
                          "funCollection": "es-translated true"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Collections_CreateCollection_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "collection": {
                        "id": "MOCKDATA + es-translated 887",
                        "projectId": "MOCKDATA + es-translated 30957",
                        "metadata": {
                          "name": "es-translated Sandbox Chronicles",
                          "description": "MOCKDATA + es-translated A collection of test cases designed to push the boundaries of your API. Whether you’re validating edge cases, simulating real-world scenarios, or just experimenting with wild inputs, this suite ensures your endpoints are battle-tested and ready for anything. Perfect for developers who embrace the unexpected and thrive on precision.",
                          "properties": {
                            "funCollection": "es-translated true",
                            "maxNfts": "MOCKDATA + es-translated 22",
                            "minNfts": "es-translated 4"
                          }
                        },
                        "private": "es-translated true",
                        "createdAt": "es-translated 2024-10-23T06:56:39.027843Z",
                        "updatedAt": "es-translated 2024-10-23T06:56:39.027843Z",
                        "baseURIs": {
                          "contractMetadataURI": "MOCKDATA + es-translated https://metadata.sequence.app/projects/30957/collections/887.json",
                          "tokenMetadataURI": "es-translated https://metadata.sequence.app/projects/30957/collections/887/tokens/"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated secret"
        ],
        "security": [
          {
            "BearerAuth": [
              "es-translated eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiMHhiZWU3NGU3ZmZkNzdkMThhZDJhOTg2ODEyZGE2MTc5ODk0MDY4ODZjIiwiaWF0IjoxNzQxNjg3NDg4LCJwcm9qZWN0IjoxNjgxNX0.LvTwKf0T6IBK9HuRFboXCNh2YY9d6EwDoQAlGYC80KQ"
            ]
          }
        ]
      }
    },
    "/rpc/Collections/GetCollection": {
      "post": {
        "summary": "es-translated GetCollection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "es-translated #/components/schemas/Collections_GetCollection_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "projectId": "MOCKDATA + es-translated 30957",
                    "collectionId": "MOCKDATA + es-translated 887"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "MOCKDATA + es-translated #/components/schemas/Collections_GetCollection_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "collection": {
                        "id": "MOCKDATA + es-translated 887",
                        "projectId": "MOCKDATA + es-translated 30957",
                        "metadata": {
                          "name": "es-translated Sandbox Chronicles",
                          "description": "MOCKDATA + es-translated A collection of test cases designed to push the boundaries of your API. Whether you’re validating edge cases, simulating real-world scenarios, or just experimenting with wild inputs, this suite ensures your endpoints are battle-tested and ready for anything. Perfect for developers who embrace the unexpected and thrive on precision.",
                          "properties": {
                            "funCollection": "es-translated true",
                            "maxNfts": "MOCKDATA + es-translated 22",
                            "minNfts": "es-translated 4"
                          }
                        },
                        "private": "es-translated true",
                        "tokenCount": "es-translated 0",
                        "createdAt": "es-translated 2024-10-23T06:56:39.027843Z",
                        "updatedAt": "es-translated 2024-10-23T06:56:39.027843Z",
                        "baseURIs": {
                          "contractMetadataURI": "MOCKDATA + es-translated https://metadata.sequence.app/projects/30957/collections/887.json",
                          "tokenMetadataURI": "es-translated https://metadata.sequence.app/projects/30957/collections/887/tokens/"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated secret"
        ],
        "security": [
          {
            "BearerAuth": [
              "es-translated eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiMHhiZWU3NGU3ZmZkNzdkMThhZDJhOTg2ODEyZGE2MTc5ODk0MDY4ODZjIiwiaWF0IjoxNzQxNjg3NDg4LCJwcm9qZWN0IjoxNjgxNX0.LvTwKf0T6IBK9HuRFboXCNh2YY9d6EwDoQAlGYC80KQ"
            ]
          }
        ]
      }
    },
    "/rpc/Collections/ListCollections": {
      "post": {
        "summary": "MOCKDATA + es-translated ListCollections",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Collections_ListCollections_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "projectId": "MOCKDATA + es-translated 30957"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Collections_ListCollections_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "page": {
                        "pageSize": "MOCKDATA + es-translated 30",
                        "more": "es-translated false"
                      },
                      "collections": [
                        {
                          "id": "MOCKDATA + es-translated 265",
                          "projectId": "MOCKDATA + es-translated 30957",
                          "metadata": {
                            "name": "es-translated Mystic Horizons",
                            "description": "MOCKDATA + es-translated "
                          },
                          "private": "es-translated false",
                          "tokenCount": "MOCKDATA + es-translated 3",
                          "createdAt": "MOCKDATA + es-translated 2024-05-31T04:17:14.093787Z",
                          "updatedAt": "es-translated 2024-10-22T15:16:05.25969Z",
                          "baseURIs": {
                            "contractMetadataURI": "MOCKDATA + es-translated https://metadata.sequence.app/projects/30957/collections/265.json",
                            "tokenMetadataURI": "es-translated https://metadata.sequence.app/projects/30957/collections/265/tokens/"
                          }
                        },
                        {
                          "id": "MOCKDATA + es-translated 690",
                          "projectId": "MOCKDATA + es-translated 30957",
                          "metadata": {
                            "name": "es-translated Primary Sales NFTS - Divine Weapons",
                            "description": "MOCKDATA + es-translated Primary Sales NFTS - Divine Weapons Collection",
                            "image": "es-translated https://metadata.sequence.app/projects/30957/collections/690/image.png",
                            "external_link": "es-translated https://www.google.com"
                          },
                          "private": "es-translated false",
                          "tokenCount": "MOCKDATA + es-translated 2",
                          "createdAt": "MOCKDATA + es-translated 2024-08-29T19:44:00.236269Z",
                          "updatedAt": "es-translated 2024-08-29T19:52:13.722495Z",
                          "baseURIs": {
                            "contractMetadataURI": "MOCKDATA + es-translated https://metadata.sequence.app/projects/30957/collections/690.json",
                            "tokenMetadataURI": "es-translated https://metadata.sequence.app/projects/30957/collections/690/tokens/"
                          }
                        },
                        {
                          "id": "MOCKDATA + es-translated 819",
                          "projectId": "MOCKDATA + es-translated 30957",
                          "metadata": {
                            "name": "es-translated Placeholders",
                            "description": "es-translated Placeholders collection",
                            "image": "MOCKDATA + es-translated https://metadata.sequence.app/projects/30957/collections/819/image.png"
                          },
                          "private": "es-translated false",
                          "tokenCount": "MOCKDATA + es-translated 10",
                          "createdAt": "es-translated 2024-10-03T18:46:15.987375Z",
                          "updatedAt": "MOCKDATA + es-translated 2024-10-03T18:46:18.25727Z",
                          "baseURIs": {
                            "contractMetadataURI": "es-translated https://metadata.sequence.app/projects/30957/collections/819.json",
                            "tokenMetadataURI": "MOCKDATA + es-translated https://metadata.sequence.app/projects/30957/collections/819/tokens/"
                          }
                        },
                        {
                          "id": "MOCKDATA + es-translated 887",
                          "projectId": "MOCKDATA + es-translated 30957",
                          "metadata": {
                            "name": "es-translated Sandbox Chronicles",
                            "description": "MOCKDATA + es-translated A collection of test cases designed to push the boundaries of your API. Whether you’re validating edge cases, simulating real-world scenarios, or just experimenting with wild inputs, this suite ensures your endpoints are battle-tested and ready for anything. Perfect for developers who embrace the unexpected and thrive on precision.",
                            "properties": {
                              "funCollection": "es-translated true",
                              "maxNfts": "MOCKDATA + es-translated 22",
                              "minNfts": "es-translated 4"
                            }
                          },
                          "private": "es-translated true",
                          "tokenCount": "es-translated 0",
                          "createdAt": "es-translated 2024-10-23T06:56:39.027843Z",
                          "updatedAt": "es-translated 2024-10-23T06:56:39.027843Z",
                          "baseURIs": {
                            "contractMetadataURI": "MOCKDATA + es-translated https://metadata.sequence.app/projects/30957/collections/887.json",
                            "tokenMetadataURI": "es-translated https://metadata.sequence.app/projects/30957/collections/887/tokens/"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated secret"
        ],
        "security": [
          {
            "BearerAuth": [
              "es-translated eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiMHhiZWU3NGU3ZmZkNzdkMThhZDJhOTg2ODEyZGE2MTc5ODk0MDY4ODZjIiwiaWF0IjoxNzQxNjg3NDg4LCJwcm9qZWN0IjoxNjgxNX0.LvTwKf0T6IBK9HuRFboXCNh2YY9d6EwDoQAlGYC80KQ"
            ]
          }
        ]
      }
    },
    "/rpc/Collections/UpdateCollection": {
      "post": {
        "summary": "MOCKDATA + es-translated UpdateCollection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Collections_UpdateCollection_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "projectId": "MOCKDATA + es-translated 30957",
                    "collection": {
                      "projectId": "MOCKDATA + es-translated 30957",
                      "id": "es-translated 888",
                      "private": "es-translated true",
                      "metadata": {
                        "name": "MOCKDATA + es-translated Sandbox Chronicles Modified",
                        "description": "MOCKDATA + es-translated A collection of test cases designed to push the boundaries of your API. Whether you’re validating edge cases, simulating real-world scenarios, or just experimenting with wild inputs, this suite ensures your endpoints are battle-tested and ready for anything. Perfect for developers who embrace the unexpected and thrive on precision.",
                        "externalLink": "es-translated https://sequence.xyz/",
                        "properties": {
                          "maxNfts": "es-translated 1000",
                          "minNfts": "es-translated 1",
                          "funCollection": "es-translated false"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Collections_UpdateCollection_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "collection": {
                        "id": "es-translated 888",
                        "projectId": "MOCKDATA + es-translated 30957",
                        "metadata": {
                          "name": "MOCKDATA + es-translated Sandbox Chronicles Modified",
                          "description": "MOCKDATA + es-translated A collection of test cases designed to push the boundaries of your API. Whether you’re validating edge cases, simulating real-world scenarios, or just experimenting with wild inputs, this suite ensures your endpoints are battle-tested and ready for anything. Perfect for developers who embrace the unexpected and thrive on precision.",
                          "properties": {
                            "funCollection": "es-translated false",
                            "maxNfts": "es-translated 1000",
                            "minNfts": "es-translated 1"
                          }
                        },
                        "private": "es-translated true",
                        "createdAt": "MOCKDATA + es-translated 2024-10-23T07:02:00.905283Z",
                        "updatedAt": "es-translated 2024-10-23T07:10:45.118089375Z",
                        "baseURIs": {
                          "contractMetadataURI": "MOCKDATA + es-translated https://metadata.sequence.app/projects/30957/collections/888.json",
                          "tokenMetadataURI": "es-translated https://metadata.sequence.app/projects/30957/collections/888/tokens/"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated secret"
        ],
        "security": [
          {
            "BearerAuth": [
              "es-translated eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiMHhiZWU3NGU3ZmZkNzdkMThhZDJhOTg2ODEyZGE2MTc5ODk0MDY4ODZjIiwiaWF0IjoxNzQxNjg3NDg4LCJwcm9qZWN0IjoxNjgxNX0.LvTwKf0T6IBK9HuRFboXCNh2YY9d6EwDoQAlGYC80KQ"
            ]
          }
        ]
      }
    },
    "/rpc/Collections/DeleteCollection": {
      "post": {
        "summary": "es-translated DeleteCollection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "es-translated #/components/schemas/Collections_DeleteCollection_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "projectId": "MOCKDATA + es-translated 3095723",
                    "collectionId": "es-translated 26532223"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "MOCKDATA + es-translated #/components/schemas/Collections_DeleteCollection_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "status": "es-translated true"
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated secret"
        ],
        "security": [
          {
            "BearerAuth": [
              "es-translated eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiMHhiZWU3NGU3ZmZkNzdkMThhZDJhOTg2ODEyZGE2MTc5ODk0MDY4ODZjIiwiaWF0IjoxNzQxNjg3NDg4LCJwcm9qZWN0IjoxNjgxNX0.LvTwKf0T6IBK9HuRFboXCNh2YY9d6EwDoQAlGYC80KQ"
            ]
          }
        ]
      }
    },
    "/rpc/Collections/PublishCollection": {
      "post": {
        "summary": "es-translated PublishCollection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Collections_PublishCollection_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "projectId": "MOCKDATA + es-translated 30957",
                    "collectionId": "es-translated 888"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Collections_PublishCollection_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "collection": {
                        "id": "es-translated 888",
                        "projectId": "MOCKDATA + es-translated 30957",
                        "metadata": {
                          "name": "MOCKDATA + es-translated Sandbox Chronicles Modified",
                          "description": "MOCKDATA + es-translated A collection of test cases designed to push the boundaries of your API. Whether you’re validating edge cases, simulating real-world scenarios, or just experimenting with wild inputs, this suite ensures your endpoints are battle-tested and ready for anything. Perfect for developers who embrace the unexpected and thrive on precision.",
                          "properties": {
                            "funCollection": "es-translated false",
                            "maxNfts": "es-translated 1000",
                            "minNfts": "es-translated 1"
                          }
                        },
                        "private": "es-translated false",
                        "createdAt": "MOCKDATA + es-translated 2024-10-23T07:02:00.905283Z",
                        "updatedAt": "MOCKDATA + es-translated 2024-10-23T07:10:45.118089Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated secret"
        ],
        "security": [
          {
            "BearerAuth": [
              "es-translated eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiMHhiZWU3NGU3ZmZkNzdkMThhZDJhOTg2ODEyZGE2MTc5ODk0MDY4ODZjIiwiaWF0IjoxNzQxNjg3NDg4LCJwcm9qZWN0IjoxNjgxNX0.LvTwKf0T6IBK9HuRFboXCNh2YY9d6EwDoQAlGYC80KQ"
            ]
          }
        ]
      }
    },
    "/rpc/Collections/UnpublishCollection": {
      "post": {
        "summary": "MOCKDATA + es-translated UnpublishCollection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Collections_UnpublishCollection_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "projectId": "MOCKDATA + es-translated 30957",
                    "collectionId": "es-translated 888"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Collections_UnpublishCollection_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "collection": {
                        "id": "es-translated 888",
                        "projectId": "MOCKDATA + es-translated 30957",
                        "metadata": {
                          "name": "MOCKDATA + es-translated Sandbox Chronicles Modified",
                          "description": "MOCKDATA + es-translated A collection of test cases designed to push the boundaries of your API. Whether you’re validating edge cases, simulating real-world scenarios, or just experimenting with wild inputs, this suite ensures your endpoints are battle-tested and ready for anything. Perfect for developers who embrace the unexpected and thrive on precision.",
                          "properties": {
                            "funCollection": "es-translated false",
                            "maxNfts": "es-translated 1000",
                            "minNfts": "es-translated 1"
                          }
                        },
                        "private": "es-translated true",
                        "createdAt": "MOCKDATA + es-translated 2024-10-23T07:02:00.905283Z",
                        "updatedAt": "MOCKDATA + es-translated 2024-10-23T07:10:45.118089Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated secret"
        ],
        "security": [
          {
            "BearerAuth": [
              "es-translated eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiMHhiZWU3NGU3ZmZkNzdkMThhZDJhOTg2ODEyZGE2MTc5ODk0MDY4ODZjIiwiaWF0IjoxNzQxNjg3NDg4LCJwcm9qZWN0IjoxNjgxNX0.LvTwKf0T6IBK9HuRFboXCNh2YY9d6EwDoQAlGYC80KQ"
            ]
          }
        ]
      }
    },
    "/rpc/Collections/CreateContractCollection": {
      "post": {
        "summary": "MOCKDATA + es-translated CreateContractCollection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "es-translated #/components/schemas/Collections_CreateContractCollection_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "projectId": "MOCKDATA + es-translated 30957",
                    "contractCollection": {
                      "chainId": "MOCKDATA + es-translated 80002",
                      "contractAddress": "MOCKDATA + es-translated 0x477566e9ade2dfa69f066f909e36ad617a2adef7",
                      "collectionId": "MOCKDATA + es-translated 819"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Collections_CreateContractCollection_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "contractCollection": {
                        "id": "MOCKDATA + es-translated 460",
                        "chainId": "MOCKDATA + es-translated 80002",
                        "contractAddress": "MOCKDATA + es-translated 0x477566e9ade2dfa69f066f909e36ad617a2adef7",
                        "collectionId": "MOCKDATA + es-translated 819"
                      }
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated secret"
        ],
        "security": [
          {
            "BearerAuth": [
              "es-translated eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiMHhiZWU3NGU3ZmZkNzdkMThhZDJhOTg2ODEyZGE2MTc5ODk0MDY4ODZjIiwiaWF0IjoxNzQxNjg3NDg4LCJwcm9qZWN0IjoxNjgxNX0.LvTwKf0T6IBK9HuRFboXCNh2YY9d6EwDoQAlGYC80KQ"
            ]
          }
        ]
      }
    },
    "/rpc/Collections/GetContractCollection": {
      "post": {
        "summary": "MOCKDATA + es-translated GetContractCollection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Collections_GetContractCollection_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "projectId": "MOCKDATA + es-translated 30957",
                    "chainId": "MOCKDATA + es-translated 80002",
                    "contractAddress": "es-translated 0x6325e304e6eea3c818f1eaf8924570d491e1f6d4"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "MOCKDATA + es-translated #/components/schemas/Collections_GetContractCollection_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "contractCollection": {
                        "id": "es-translated 442",
                        "chainId": "MOCKDATA + es-translated 80002",
                        "contractAddress": "es-translated 0x6325e304e6eea3c818f1eaf8924570d491e1f6d4",
                        "collectionId": "MOCKDATA + es-translated 908"
                      }
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated secret"
        ],
        "security": [
          {
            "BearerAuth": [
              "es-translated eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiMHhiZWU3NGU3ZmZkNzdkMThhZDJhOTg2ODEyZGE2MTc5ODk0MDY4ODZjIiwiaWF0IjoxNzQxNjg3NDg4LCJwcm9qZWN0IjoxNjgxNX0.LvTwKf0T6IBK9HuRFboXCNh2YY9d6EwDoQAlGYC80KQ"
            ]
          }
        ]
      }
    },
    "/rpc/Collections/ListContractCollections": {
      "post": {
        "summary": "es-translated ListContractCollections",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Collections_ListContractCollections_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "collectionId": "MOCKDATA + es-translated 819",
                    "projectId": "MOCKDATA + es-translated 30957"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Collections_ListContractCollections_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "contractCollections": [
                        {
                          "id": "MOCKDATA + es-translated 370",
                          "chainId": "MOCKDATA + es-translated 80002",
                          "contractAddress": "MOCKDATA + es-translated 0x70a2177079877e4aae639d1abb29ffa537b94970",
                          "collectionId": "MOCKDATA + es-translated 819"
                        }
                      ],
                      "collections": [
                        {
                          "id": "MOCKDATA + es-translated 819",
                          "projectId": "MOCKDATA + es-translated 30957",
                          "metadata": {
                            "name": "es-translated Placeholders",
                            "description": "es-translated Placeholders collection",
                            "image": "MOCKDATA + es-translated https://metadata.sequence.app/projects/30957/collections/819/image.png"
                          },
                          "private": "es-translated false",
                          "createdAt": "es-translated 2024-10-03T18:46:15.987375Z",
                          "updatedAt": "MOCKDATA + es-translated 2024-10-03T18:46:18.25727Z"
                        }
                      ],
                      "page": {
                        "pageSize": "MOCKDATA + es-translated 30",
                        "more": "es-translated false"
                      }
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated secret"
        ],
        "security": [
          {
            "BearerAuth": [
              "es-translated eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiMHhiZWU3NGU3ZmZkNzdkMThhZDJhOTg2ODEyZGE2MTc5ODk0MDY4ODZjIiwiaWF0IjoxNzQxNjg3NDg4LCJwcm9qZWN0IjoxNjgxNX0.LvTwKf0T6IBK9HuRFboXCNh2YY9d6EwDoQAlGYC80KQ"
            ]
          }
        ]
      }
    },
    "/rpc/Collections/UpdateContractCollection": {
      "post": {
        "summary": "es-translated UpdateContractCollection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "es-translated #/components/schemas/Collections_UpdateContractCollection_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "projectId": "MOCKDATA + es-translated 30957",
                    "contractCollection": {
                      "chainId": "MOCKDATA + es-translated 80002",
                      "contractAddress": "MOCKDATA + es-translated 0x70a2177079877e4aae639d1abb29ffa537b94970",
                      "collectionId": "MOCKDATA + es-translated 819"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "MOCKDATA + es-translated #/components/schemas/Collections_UpdateContractCollection_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "ok": "es-translated true"
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated secret"
        ],
        "security": [
          {
            "BearerAuth": [
              "es-translated eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiMHhiZWU3NGU3ZmZkNzdkMThhZDJhOTg2ODEyZGE2MTc5ODk0MDY4ODZjIiwiaWF0IjoxNzQxNjg3NDg4LCJwcm9qZWN0IjoxNjgxNX0.LvTwKf0T6IBK9HuRFboXCNh2YY9d6EwDoQAlGYC80KQ"
            ]
          }
        ]
      }
    },
    "/rpc/Collections/DeleteContractCollection": {
      "post": {
        "summary": "MOCKDATA + es-translated DeleteContractCollection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Collections_DeleteContractCollection_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "projectId": "MOCKDATA + es-translated 30957",
                    "chainId": "MOCKDATA + es-translated 80002",
                    "contractAddress": "MOCKDATA + es-translated 0x477566e9ade2dfa69f066f909e36ad617a2adef7"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "MOCKDATA + es-translated #/components/schemas/Collections_DeleteContractCollection_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "ok": "es-translated true"
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated secret"
        ],
        "security": [
          {
            "BearerAuth": [
              "es-translated eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiMHhiZWU3NGU3ZmZkNzdkMThhZDJhOTg2ODEyZGE2MTc5ODk0MDY4ODZjIiwiaWF0IjoxNzQxNjg3NDg4LCJwcm9qZWN0IjoxNjgxNX0.LvTwKf0T6IBK9HuRFboXCNh2YY9d6EwDoQAlGYC80KQ"
            ]
          }
        ]
      }
    },
    "/rpc/Collections/CreateToken": {
      "post": {
        "summary": "es-translated CreateToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Collections_CreateToken_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "projectId": "MOCKDATA + es-translated 30957",
                    "collectionId": "es-translated 888",
                    "private": "es-translated false",
                    "token": {
                      "tokenId": "es-translated 200",
                      "name": "es-translated Eclipse Dragon",
                      "description": "MOCKDATA + es-translated Forged from starlight and shadows, the Eclipse Dragon emerges only during celestial alignments. Its obsidian scales shimmer with constellations, and its breath holds the power to bend time and space. Legends say that those who possess its essence gain unparalleled wisdom—though at the cost of fleeting moments lost to the void. Will you dare wield its mystic force?",
                      "properties": {
                        "element": "es-translated Shadow and Starlight",
                        "rarity": "MOCKDATA + es-translated Legendary",
                        "alignment": "es-translated Celestial",
                        "age": "MOCKDATA + es-translated Ancient",
                        "size": "es-translated Massive",
                        "breath_power": "MOCKDATA + es-translated Time Distortion",
                        "temperament": "es-translated Mysterious",
                        "constellations_on_scales": "MOCKDATA + es-translated 42",
                        "last_seen": "es-translated During the Last Solar Eclipse"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "MOCKDATA + es-translated #/components/schemas/Collections_CreateToken_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "token": {
                        "tokenId": "es-translated 200",
                        "name": "es-translated Eclipse Dragon",
                        "description": "MOCKDATA + es-translated Forged from starlight and shadows, the Eclipse Dragon emerges only during celestial alignments. Its obsidian scales shimmer with constellations, and its breath holds the power to bend time and space. Legends say that those who possess its essence gain unparalleled wisdom—though at the cost of fleeting moments lost to the void. Will you dare wield its mystic force?",
                        "image": "MOCKDATA + es-translated ",
                        "properties": {
                          "age": "MOCKDATA + es-translated Ancient",
                          "alignment": "es-translated Celestial",
                          "breath_power": "MOCKDATA + es-translated Time Distortion",
                          "constellations_on_scales": "MOCKDATA + es-translated 42",
                          "element": "es-translated Shadow and Starlight",
                          "last_seen": "es-translated During the Last Solar Eclipse",
                          "rarity": "MOCKDATA + es-translated Legendary",
                          "size": "es-translated Massive",
                          "temperament": "es-translated Mysterious"
                        },
                        "attributes": null,
                        "updatedAt": "MOCKDATA + es-translated 0001-01-01T00:00:00Z"
                      },
                      "assets": null
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated secret"
        ],
        "security": [
          {
            "BearerAuth": [
              "es-translated eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiMHhiZWU3NGU3ZmZkNzdkMThhZDJhOTg2ODEyZGE2MTc5ODk0MDY4ODZjIiwiaWF0IjoxNzQxNjg3NDg4LCJwcm9qZWN0IjoxNjgxNX0.LvTwKf0T6IBK9HuRFboXCNh2YY9d6EwDoQAlGYC80KQ"
            ]
          }
        ]
      }
    },
    "/rpc/Collections/GetToken": {
      "post": {
        "summary": "es-translated GetToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Collections_GetToken_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "projectId": "MOCKDATA + es-translated 30957",
                    "collectionId": "es-translated 888",
                    "tokenId": "es-translated 200"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Collections_GetToken_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "token": {
                        "tokenId": "es-translated 200",
                        "name": "es-translated Eclipse Dragon",
                        "description": "MOCKDATA + es-translated Forged from starlight and shadows, the Eclipse Dragon emerges only during celestial alignments. Its obsidian scales shimmer with constellations, and its breath holds the power to bend time and space. Legends say that those who possess its essence gain unparalleled wisdom—though at the cost of fleeting moments lost to the void. Will you dare wield its mystic force?",
                        "image": "MOCKDATA + es-translated ",
                        "properties": {
                          "age": "MOCKDATA + es-translated Ancient",
                          "alignment": "es-translated Celestial",
                          "breath_power": "MOCKDATA + es-translated Time Distortion",
                          "constellations_on_scales": "MOCKDATA + es-translated 42",
                          "element": "es-translated Shadow and Starlight",
                          "last_seen": "es-translated During the Last Solar Eclipse",
                          "rarity": "MOCKDATA + es-translated Legendary",
                          "size": "es-translated Massive",
                          "temperament": "es-translated Mysterious"
                        },
                        "attributes": null,
                        "updatedAt": "MOCKDATA + es-translated 2024-10-23T19:34:40.158987036Z"
                      },
                      "assets": []
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated secret"
        ],
        "security": [
          {
            "BearerAuth": [
              "es-translated eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiMHhiZWU3NGU3ZmZkNzdkMThhZDJhOTg2ODEyZGE2MTc5ODk0MDY4ODZjIiwiaWF0IjoxNzQxNjg3NDg4LCJwcm9qZWN0IjoxNjgxNX0.LvTwKf0T6IBK9HuRFboXCNh2YY9d6EwDoQAlGYC80KQ"
            ]
          }
        ]
      }
    },
    "/rpc/Collections/ListTokens": {
      "post": {
        "summary": "MOCKDATA + es-translated ListTokens",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Collections_ListTokens_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "projectId": "MOCKDATA + es-translated 30957",
                    "collectionId": "es-translated 888"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Collections_ListTokens_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "page": {
                        "pageSize": "MOCKDATA + es-translated 30",
                        "more": "es-translated false"
                      },
                      "tokens": [
                        {
                          "tokenId": "es-translated 200",
                          "name": "es-translated Eclipse Dragon",
                          "description": "MOCKDATA + es-translated Forged from starlight and shadows, the Eclipse Dragon emerges only during celestial alignments. Its obsidian scales shimmer with constellations, and its breath holds the power to bend time and space. Legends say that those who possess its essence gain unparalleled wisdom—though at the cost of fleeting moments lost to the void. Will you dare wield its mystic force?",
                          "image": "MOCKDATA + es-translated ",
                          "properties": {
                            "age": "MOCKDATA + es-translated Ancient",
                            "alignment": "es-translated Celestial",
                            "breath_power": "MOCKDATA + es-translated Time Distortion",
                            "constellations_on_scales": "MOCKDATA + es-translated 42",
                            "element": "es-translated Shadow and Starlight",
                            "last_seen": "es-translated During the Last Solar Eclipse",
                            "rarity": "MOCKDATA + es-translated Legendary",
                            "size": "es-translated Massive",
                            "temperament": "es-translated Mysterious"
                          },
                          "attributes": null,
                          "updatedAt": "MOCKDATA + es-translated 2024-10-23T19:34:40.158987036Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated secret"
        ],
        "security": [
          {
            "BearerAuth": [
              "es-translated eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiMHhiZWU3NGU3ZmZkNzdkMThhZDJhOTg2ODEyZGE2MTc5ODk0MDY4ODZjIiwiaWF0IjoxNzQxNjg3NDg4LCJwcm9qZWN0IjoxNjgxNX0.LvTwKf0T6IBK9HuRFboXCNh2YY9d6EwDoQAlGYC80KQ"
            ]
          }
        ]
      }
    },
    "/rpc/Collections/UpdateToken": {
      "post": {
        "summary": "MOCKDATA + es-translated UpdateToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "es-translated #/components/schemas/Collections_UpdateToken_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "projectId": "MOCKDATA + es-translated 30957",
                    "collectionId": "es-translated 888",
                    "tokenId": "es-translated 200",
                    "private": "es-translated false",
                    "token": {
                      "tokenId": "MOCKDATA + es-translated 201",
                      "name": "es-translated Eclipse Dragon",
                      "description": "MOCKDATA + es-translated Forged from starlight and shadows, the Eclipse Dragon emerges only during celestial alignments. Its obsidian scales shimmer with constellations, and its breath holds the power to bend time and space. Legends say that those who possess its essence gain unparalleled wisdom—though at the cost of fleeting moments lost to the void. Will you dare wield its mystic force?",
                      "properties": {
                        "element": "es-translated Shadow and Starlight",
                        "rarity": "MOCKDATA + es-translated Legendary",
                        "alignment": "es-translated Celestial",
                        "age": "MOCKDATA + es-translated Ancient",
                        "size": "es-translated Massive",
                        "breath_power": "MOCKDATA + es-translated Time Distortion",
                        "temperament": "es-translated Mysterious",
                        "constellations_on_scales": "MOCKDATA + es-translated 42",
                        "last_seen": "es-translated During the Last Solar Eclipse"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Collections_UpdateToken_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "token": {
                        "tokenId": "MOCKDATA + es-translated 201",
                        "name": "es-translated Eclipse Dragon",
                        "description": "MOCKDATA + es-translated Forged from starlight and shadows, the Eclipse Dragon emerges only during celestial alignments. Its obsidian scales shimmer with constellations, and its breath holds the power to bend time and space. Legends say that those who possess its essence gain unparalleled wisdom—though at the cost of fleeting moments lost to the void. Will you dare wield its mystic force?",
                        "image": "MOCKDATA + es-translated ",
                        "properties": {
                          "age": "MOCKDATA + es-translated Ancient",
                          "alignment": "es-translated Celestial",
                          "breath_power": "MOCKDATA + es-translated Time Distortion",
                          "constellations_on_scales": "MOCKDATA + es-translated 42",
                          "element": "es-translated Shadow and Starlight",
                          "last_seen": "es-translated During the Last Solar Eclipse",
                          "rarity": "MOCKDATA + es-translated Legendary",
                          "size": "es-translated Massive",
                          "temperament": "es-translated Mysterious"
                        },
                        "attributes": null,
                        "updatedAt": "MOCKDATA + es-translated 0001-01-01T00:00:00Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated secret"
        ],
        "security": [
          {
            "BearerAuth": [
              "es-translated eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiMHhiZWU3NGU3ZmZkNzdkMThhZDJhOTg2ODEyZGE2MTc5ODk0MDY4ODZjIiwiaWF0IjoxNzQxNjg3NDg4LCJwcm9qZWN0IjoxNjgxNX0.LvTwKf0T6IBK9HuRFboXCNh2YY9d6EwDoQAlGYC80KQ"
            ]
          }
        ]
      }
    },
    "/rpc/Collections/DeleteToken": {
      "post": {
        "summary": "es-translated DeleteToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "es-translated #/components/schemas/Collections_DeleteToken_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "projectId": "MOCKDATA + es-translated 3095723",
                    "collectionId": "es-translated 26532223",
                    "tokenId": "MOCKDATA + es-translated 32132121"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Collections_DeleteToken_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "status": "es-translated true"
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated secret"
        ],
        "security": [
          {
            "BearerAuth": [
              "es-translated eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiMHhiZWU3NGU3ZmZkNzdkMThhZDJhOTg2ODEyZGE2MTc5ODk0MDY4ODZjIiwiaWF0IjoxNzQxNjg3NDg4LCJwcm9qZWN0IjoxNjgxNX0.LvTwKf0T6IBK9HuRFboXCNh2YY9d6EwDoQAlGYC80KQ"
            ]
          }
        ]
      }
    },
    "/rpc/Collections/CreateAsset": {
      "post": {
        "summary": "MOCKDATA + es-translated CreateAsset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "es-translated #/components/schemas/Collections_CreateAsset_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "projectId": "MOCKDATA + es-translated 30957",
                    "asset": {
                      "collectionId": "MOCKDATA + es-translated 894",
                      "tokenId": "es-translated 6",
                      "metadataField": "es-translated image",
                      "url": "es-translated https://metadata.sequence.app/projects/30957/collections/895/tokens/2/image.png",
                      "filename": "MOCKDATA + es-translated image.png",
                      "filesize": "es-translated 670912",
                      "mimeType": "MOCKDATA + es-translated image/png",
                      "width": "es-translated 1024",
                      "height": "es-translated 1024"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "MOCKDATA + es-translated #/components/schemas/Collections_CreateAsset_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "asset": {
                        "id": "es-translated 4418",
                        "collectionId": "MOCKDATA + es-translated 894",
                        "tokenId": "es-translated 6",
                        "url": "MOCKDATA + es-translated ",
                        "metadataField": "es-translated image",
                        "updatedAt": "MOCKDATA + es-translated 2024-10-25T01:29:44.686464786Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated secret"
        ],
        "security": [
          {
            "BearerAuth": [
              "es-translated eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiMHhiZWU3NGU3ZmZkNzdkMThhZDJhOTg2ODEyZGE2MTc5ODk0MDY4ODZjIiwiaWF0IjoxNzQxNjg3NDg4LCJwcm9qZWN0IjoxNjgxNX0.LvTwKf0T6IBK9HuRFboXCNh2YY9d6EwDoQAlGYC80KQ"
            ]
          }
        ]
      }
    },
    "/rpc/Collections/GetAsset": {
      "post": {
        "summary": "MOCKDATA + es-translated GetAsset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Collections_GetAsset_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "projectId": "MOCKDATA + es-translated 30957",
                    "assetId": "es-translated 4405"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "MOCKDATA + es-translated #/components/schemas/Collections_GetAsset_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "asset": {
                        "id": "es-translated 4405",
                        "collectionId": "MOCKDATA + es-translated 894",
                        "tokenId": "es-translated 1",
                        "url": "MOCKDATA + es-translated ",
                        "metadataField": "es-translated image",
                        "updatedAt": "es-translated 2024-10-25T00:15:34.156343Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated secret"
        ],
        "security": [
          {
            "BearerAuth": [
              "es-translated eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiMHhiZWU3NGU3ZmZkNzdkMThhZDJhOTg2ODEyZGE2MTc5ODk0MDY4ODZjIiwiaWF0IjoxNzQxNjg3NDg4LCJwcm9qZWN0IjoxNjgxNX0.LvTwKf0T6IBK9HuRFboXCNh2YY9d6EwDoQAlGYC80KQ"
            ]
          }
        ]
      }
    },
    "/rpc/Collections/UpdateAsset": {
      "post": {
        "summary": "es-translated UpdateAsset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "es-translated #/components/schemas/Collections_UpdateAsset_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "projectId": "MOCKDATA + es-translated 30957",
                    "asset": {
                      "id": "MOCKDATA + es-translated 4416",
                      "collectionId": "MOCKDATA + es-translated 894",
                      "tokenId": "es-translated 4",
                      "metadataField": "es-translated image",
                      "filename": "es-translated My asset"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "MOCKDATA + es-translated #/components/schemas/Collections_UpdateAsset_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "asset": {
                        "id": "MOCKDATA + es-translated 4416",
                        "collectionId": "MOCKDATA + es-translated 894",
                        "tokenId": "es-translated 4",
                        "url": "MOCKDATA + es-translated ",
                        "metadataField": "es-translated image",
                        "filename": "es-translated New Image",
                        "updatedAt": "MOCKDATA + es-translated 2024-10-25T01:22:44.045492Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated secret"
        ],
        "security": [
          {
            "BearerAuth": [
              "es-translated eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiMHhiZWU3NGU3ZmZkNzdkMThhZDJhOTg2ODEyZGE2MTc5ODk0MDY4ODZjIiwiaWF0IjoxNzQxNjg3NDg4LCJwcm9qZWN0IjoxNjgxNX0.LvTwKf0T6IBK9HuRFboXCNh2YY9d6EwDoQAlGYC80KQ"
            ]
          }
        ]
      }
    },
    "/rpc/Collections/DeleteAsset": {
      "post": {
        "summary": "MOCKDATA + es-translated DeleteAsset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Collections_DeleteAsset_Request"
              },
              "examples": {
                "0": {
                  "value": {
                    "projectId": "MOCKDATA + es-translated 30957",
                    "assetId": "es-translated 4415"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "MOCKDATA + es-translated #/components/schemas/Collections_DeleteAsset_Response"
                },
                "examples": {
                  "0": {
                    "value": {
                      "status": "es-translated true"
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRequiredArgument"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorValidationFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorRateLimited"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorChainNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorTokenDirectoryDisabled"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorFail"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated secret"
        ],
        "security": [
          {
            "BearerAuth": [
              "es-translated eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiMHhiZWU3NGU3ZmZkNzdkMThhZDJhOTg2ODEyZGE2MTc5ODk0MDY4ODZjIiwiaWF0IjoxNzQxNjg3NDg4LCJwcm9qZWN0IjoxNjgxNX0.LvTwKf0T6IBK9HuRFboXCNh2YY9d6EwDoQAlGYC80KQ"
            ]
          }
        ]
      }
    }
  },
  "servers": [
    {
      "url": "es-translated https://metadata.sequence.app/",
      "description": "MOCKDATA + es-translated Metadata"
    }
  ],
  "tags": [
    {
      "name": "MOCKDATA + es-translated public",
      "description": "es-translated Endpoints accessible by passing your project-access-key in the header. This is injected whenever you login automatically."
    },
    {
      "name": "MOCKDATA + es-translated secret",
      "description": "MOCKDATA + es-translated Endpoints that require a Sequence service token intended to be secret. You can manually generate one on Sequence Builder and pass it as a Bearer Token."
    }
  ]
}
