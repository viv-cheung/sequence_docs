{
  "components": {
    "schemas": {
      "ErrorWebrpcEndpoint": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "es-translated WebrpcEndpoint"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 0"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated endpoint error"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 400"
          }
        }
      },
      "ErrorWebrpcRequestFailed": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated WebrpcRequestFailed"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated -1"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated request failed"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 400"
          }
        }
      },
      "ErrorWebrpcBadRoute": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "es-translated WebrpcBadRoute"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated -2"
          },
          "msg": {
            "type": "es-translated string",
            "example": "es-translated bad route"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated 404"
          }
        }
      },
      "ErrorWebrpcBadMethod": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "es-translated WebrpcBadMethod"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated -3"
          },
          "msg": {
            "type": "es-translated string",
            "example": "es-translated bad method"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated 405"
          }
        }
      },
      "ErrorWebrpcBadRequest": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "es-translated WebrpcBadRequest"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated -4"
          },
          "msg": {
            "type": "es-translated string",
            "example": "es-translated bad request"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 400"
          }
        }
      },
      "ErrorWebrpcBadResponse": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated WebrpcBadResponse"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated -5"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated bad response"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 500"
          }
        }
      },
      "ErrorWebrpcServerPanic": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated WebrpcServerPanic"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated -6"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated server panic"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 500"
          }
        }
      },
      "ErrorWebrpcInternalError": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "es-translated WebrpcInternalError"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated -7"
          },
          "msg": {
            "type": "es-translated string",
            "example": "es-translated internal error"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 500"
          }
        }
      },
      "ErrorWebrpcClientDisconnected": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated WebrpcClientDisconnected"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated -8"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated client disconnected"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 400"
          }
        }
      },
      "ErrorWebrpcStreamLost": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "es-translated WebrpcStreamLost"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated -9"
          },
          "msg": {
            "type": "es-translated string",
            "example": "es-translated stream lost"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 400"
          }
        }
      },
      "ErrorWebrpcStreamFinished": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated WebrpcStreamFinished"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated -10"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated stream finished"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 200"
          }
        }
      },
      "ErrorUnauthorized": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated Unauthorized"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 1000"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated Unauthorized access"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 401"
          }
        }
      },
      "ErrorPermissionDenied": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated PermissionDenied"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 1001"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated Permission denied"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 403"
          }
        }
      },
      "ErrorSessionExpired": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated SessionExpired"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 1002"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated Session expired"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 403"
          }
        }
      },
      "ErrorMethodNotFound": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "es-translated MethodNotFound"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated 1003"
          },
          "msg": {
            "type": "es-translated string",
            "example": "es-translated Method not found"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated 404"
          }
        }
      },
      "ErrorRequestConflict": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated RequestConflict"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 1004"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated Conflict with target resource"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 409"
          }
        }
      },
      "ErrorAborted": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated Aborted"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 1005"
          },
          "msg": {
            "type": "es-translated string",
            "example": "es-translated Request aborted"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 400"
          }
        }
      },
      "ErrorTimeout": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "es-translated Timeout"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated 2000"
          },
          "msg": {
            "type": "es-translated string",
            "example": "es-translated Request timed out"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated 408"
          }
        }
      },
      "ErrorInvalidArgument": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "es-translated InvalidArgument"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated 2001"
          },
          "msg": {
            "type": "es-translated string",
            "example": "es-translated Invalid argument"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 400"
          }
        }
      },
      "ErrorUnavailable": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated Unavailable"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 2002"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated Unavailable resource"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 400"
          }
        }
      },
      "ErrorQueryFailed": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "es-translated QueryFailed"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated 2003"
          },
          "msg": {
            "type": "es-translated string",
            "example": "es-translated Query failed"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 400"
          }
        }
      },
      "ErrorResourceExhausted": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated ResourceExhausted"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 2004"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated Resource exhausted"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 400"
          }
        }
      },
      "ErrorNotFound": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated NotFound"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 3000"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated Resource not found"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 400"
          }
        }
      },
      "ErrorProjectNotFound": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated ProjectNotFound"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 3002"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated Project not found"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 400"
          }
        }
      },
      "ErrorMetadataCallFailed": {
        "type": "es-translated object",
        "required": [
          "es-translated error",
          "es-translated code",
          "MOCKDATA + es-translated msg",
          "es-translated status"
        ],
        "properties": {
          "error": {
            "type": "es-translated string",
            "example": "es-translated MetadataCallFailed"
          },
          "code": {
            "type": "MOCKDATA + es-translated number",
            "example": "MOCKDATA + es-translated 3003"
          },
          "msg": {
            "type": "es-translated string",
            "example": "MOCKDATA + es-translated Metadata service call failed"
          },
          "cause": {
            "type": "es-translated string"
          },
          "status": {
            "type": "MOCKDATA + es-translated number",
            "example": "es-translated 400"
          }
        }
      },
      "ContractInfo": {
        "type": "es-translated object",
        "required": [
          "es-translated chainId",
          "MOCKDATA + es-translated address",
          "es-translated name",
          "MOCKDATA + es-translated type",
          "es-translated symbol",
          "MOCKDATA + es-translated logoURI",
          "es-translated deployed",
          "es-translated bytecodeHash",
          "MOCKDATA + es-translated extensions",
          "es-translated contentHash",
          "MOCKDATA + es-translated updatedAt"
        ],
        "properties": {
          "chainId": {
            "type": "MOCKDATA + es-translated number"
          },
          "address": {
            "type": "es-translated string"
          },
          "name": {
            "type": "es-translated string"
          },
          "type": {
            "type": "es-translated string"
          },
          "symbol": {
            "type": "es-translated string"
          },
          "decimals": {
            "type": "MOCKDATA + es-translated number"
          },
          "logoURI": {
            "type": "es-translated string"
          },
          "deployed": {
            "type": "es-translated boolean"
          },
          "bytecodeHash": {
            "type": "es-translated string"
          },
          "extensions": {
            "$ref": "es-translated #/components/schemas/ContractInfoExtensions"
          },
          "contentHash": {
            "type": "MOCKDATA + es-translated number"
          },
          "updatedAt": {
            "type": "es-translated string"
          }
        }
      },
      "ContractInfoExtensions": {
        "type": "es-translated object",
        "required": [
          "es-translated link",
          "es-translated description",
          "MOCKDATA + es-translated ogImage",
          "es-translated originChainId",
          "MOCKDATA + es-translated originAddress",
          "es-translated blacklist",
          "MOCKDATA + es-translated verified",
          "es-translated verifiedBy",
          "MOCKDATA + es-translated featured"
        ],
        "properties": {
          "link": {
            "type": "es-translated string"
          },
          "description": {
            "type": "es-translated string"
          },
          "ogImage": {
            "type": "es-translated string"
          },
          "originChainId": {
            "type": "MOCKDATA + es-translated number"
          },
          "originAddress": {
            "type": "es-translated string"
          },
          "blacklist": {
            "type": "es-translated boolean"
          },
          "verified": {
            "type": "es-translated boolean"
          },
          "verifiedBy": {
            "type": "es-translated string"
          },
          "featured": {
            "type": "es-translated boolean"
          }
        }
      },
      "TokenMetadata": {
        "type": "es-translated object",
        "required": [
          "MOCKDATA + es-translated tokenId",
          "es-translated name",
          "es-translated attributes"
        ],
        "properties": {
          "tokenId": {
            "type": "es-translated string"
          },
          "name": {
            "type": "es-translated string"
          },
          "description": {
            "type": "es-translated string"
          },
          "image": {
            "type": "es-translated string"
          },
          "video": {
            "type": "es-translated string"
          },
          "audio": {
            "type": "es-translated string"
          },
          "properties": {
            "type": "es-translated object",
            "description": "MOCKDATA + es-translated map<string,any>",
            "additionalProperties": {
              "type": "es-translated object"
            }
          },
          "attributes": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []map<string,any>",
            "items": {
              "type": "es-translated object",
              "description": "MOCKDATA + es-translated map<string,any>",
              "additionalProperties": {
                "type": "es-translated object"
              }
            }
          },
          "imageData": {
            "type": "es-translated string"
          },
          "externalUrl": {
            "type": "es-translated string"
          },
          "backgroundColor": {
            "type": "es-translated string"
          },
          "animationUrl": {
            "type": "es-translated string"
          },
          "decimals": {
            "type": "MOCKDATA + es-translated number"
          },
          "updatedAt": {
            "type": "es-translated string"
          },
          "assets": {
            "type": "MOCKDATA + es-translated array",
            "description": "es-translated []Asset",
            "items": {
              "$ref": "MOCKDATA + es-translated #/components/schemas/Asset"
            }
          }
        }
      },
      "Asset": {
        "type": "es-translated object",
        "required": [
          "MOCKDATA + es-translated id",
          "es-translated collectionId",
          "MOCKDATA + es-translated metadataField"
        ],
        "properties": {
          "id": {
            "type": "MOCKDATA + es-translated number"
          },
          "collectionId": {
            "type": "MOCKDATA + es-translated number"
          },
          "tokenId": {
            "type": "es-translated string"
          },
          "url": {
            "type": "es-translated string"
          },
          "metadataField": {
            "type": "es-translated string"
          },
          "filename": {
            "type": "es-translated string"
          },
          "filesize": {
            "type": "MOCKDATA + es-translated number"
          },
          "mimeType": {
            "type": "es-translated string"
          },
          "width": {
            "type": "MOCKDATA + es-translated number"
          },
          "height": {
            "type": "MOCKDATA + es-translated number"
          },
          "updatedAt": {
            "type": "es-translated string"
          }
        }
      },
      "ContractType": {
        "type": "es-translated string",
        "description": "MOCKDATA + es-translated Represented as uint8 on the server side",
        "enum": [
          "es-translated UNKNOWN",
          "es-translated NATIVE",
          "es-translated ERC20",
          "MOCKDATA + es-translated ERC721",
          "MOCKDATA + es-translated ERC1155",
          "MOCKDATA + es-translated SEQUENCE_WALLET",
          "es-translated ERC20_BRIDGE",
          "MOCKDATA + es-translated ERC721_BRIDGE",
          "es-translated ERC1155_BRIDGE",
          "MOCKDATA + es-translated SEQ_MARKETPLACE"
        ]
      },
      "EventLogType": {
        "type": "es-translated string",
        "description": "MOCKDATA + es-translated Represented as uint8 on the server side",
        "enum": [
          "es-translated UNKNOWN",
          "es-translated BLOCK_ADDED",
          "MOCKDATA + es-translated BLOCK_REMOVED"
        ]
      },
      "EventLogDataType": {
        "type": "es-translated string",
        "description": "MOCKDATA + es-translated Represented as uint8 on the server side",
        "enum": [
          "es-translated EVENT",
          "MOCKDATA + es-translated TOKEN_TRANSFER",
          "es-translated NATIVE_TOKEN_TRANSFER",
          "MOCKDATA + es-translated SEQUENCE_TXN"
        ]
      },
      "OrderStatus": {
        "type": "es-translated string",
        "description": "es-translated Represented as uint32 on the server side",
        "enum": [
          "es-translated OPEN",
          "MOCKDATA + es-translated CLOSED",
          "es-translated CANCELLED"
        ]
      },
      "TxnTransferType": {
        "type": "es-translated string",
        "description": "es-translated Represented as uint32 on the server side",
        "enum": [
          "es-translated UNKNOWN",
          "MOCKDATA + es-translated SEND",
          "es-translated RECEIVE"
        ]
      },
      "TransactionStatus": {
        "type": "es-translated string",
        "description": "es-translated Represented as uint32 on the server side",
        "enum": [
          "MOCKDATA + es-translated FAILED",
          "MOCKDATA + es-translated SUCCESSFUL"
        ]
      },
      "TransactionType": {
        "type": "es-translated string",
        "description": "es-translated Represented as uint32 on the server side",
        "enum": [
          "es-translated LegacyTxnType",
          "MOCKDATA + es-translated AccessListTxnType",
          "es-translated DynamicFeeTxnType"
        ]
      },
      "SortOrder": {
        "type": "es-translated string",
        "description": "es-translated Represented as uint32 on the server side",
        "enum": [
          "es-translated DESC",
          "MOCKDATA + es-translated ASC"
        ]
      },
      "ContractVerificationStatus": {
        "type": "es-translated string",
        "description": "MOCKDATA + es-translated Represented as string on the server side",
        "enum": [
          "MOCKDATA + es-translated VERIFIED",
          "es-translated UNVERIFIED",
          "MOCKDATA + es-translated ALL"
        ]
      },
      "Version": {
        "type": "es-translated object",
        "required": [
          "MOCKDATA + es-translated webrpcVersion",
          "es-translated schemaVersion",
          "MOCKDATA + es-translated schemaHash",
          "es-translated appVersion"
        ],
        "properties": {
          "webrpcVersion": {
            "type": "es-translated string"
          },
          "schemaVersion": {
            "type": "es-translated string"
          },
          "schemaHash": {
            "type": "es-translated string"
          },
          "appVersion": {
            "type": "es-translated string"
          }
        }
      },
      "RuntimeStatus": {
        "type": "es-translated object",
        "required": [
          "MOCKDATA + es-translated healthOK",
          "es-translated indexerEnabled",
          "es-translated startTime",
          "MOCKDATA + es-translated uptime",
          "es-translated ver",
          "es-translated branch",
          "MOCKDATA + es-translated commitHash",
          "MOCKDATA + es-translated chainID",
          "MOCKDATA + es-translated checks"
        ],
        "properties": {
          "healthOK": {
            "type": "es-translated boolean"
          },
          "indexerEnabled": {
            "type": "es-translated boolean"
          },
          "startTime": {
            "type": "es-translated string"
          },
          "uptime": {
            "type": "MOCKDATA + es-translated number"
          },
          "ver": {
            "type": "es-translated string"
          },
          "branch": {
            "type": "es-translated string"
          },
          "commitHash": {
            "type": "es-translated string"
          },
          "chainID": {
            "type": "MOCKDATA + es-translated number"
          },
          "checks": {
            "$ref": "es-translated #/components/schemas/RuntimeChecks"
          }
        }
      },
      "WALWriterRuntimeStatus": {
        "type": "es-translated object",
        "required": [
          "MOCKDATA + es-translated healthOK",
          "es-translated startTime",
          "MOCKDATA + es-translated uptime",
          "es-translated ver",
          "es-translated branch",
          "MOCKDATA + es-translated commitHash",
          "MOCKDATA + es-translated chainID",
          "es-translated percentWALWritten"
        ],
        "properties": {
          "healthOK": {
            "type": "es-translated boolean"
          },
          "startTime": {
            "type": "es-translated string"
          },
          "uptime": {
            "type": "MOCKDATA + es-translated number"
          },
          "ver": {
            "type": "es-translated string"
          },
          "branch": {
            "type": "es-translated string"
          },
          "commitHash": {
            "type": "es-translated string"
          },
          "chainID": {
            "type": "MOCKDATA + es-translated number"
          },
          "percentWALWritten": {
            "type": "MOCKDATA + es-translated number"
          }
        }
      },
      "RuntimeChecks": {
        "type": "es-translated object",
        "required": [
          "MOCKDATA + es-translated running",
          "es-translated runnables",
          "MOCKDATA + es-translated cgoEnabled",
          "es-translated quotaControlEnabled",
          "MOCKDATA + es-translated syncMode",
          "es-translated percentIndexed",
          "MOCKDATA + es-translated lastBlockNum",
          "es-translated lastBlockNumWithState",
          "MOCKDATA + es-translated bloomStatus",
          "es-translated bond",
          "MOCKDATA + es-translated diskUsage"
        ],
        "properties": {
          "running": {
            "type": "es-translated boolean"
          },
          "runnables": {
            "type": "es-translated object"
          },
          "cgoEnabled": {
            "type": "es-translated boolean"
          },
          "quotaControlEnabled": {
            "type": "es-translated boolean"
          },
          "syncMode": {
            "type": "es-translated string"
          },
          "percentIndexed": {
            "type": "MOCKDATA + es-translated number"
          },
          "lastBlockNum": {
            "type": "MOCKDATA + es-translated number"
          },
          "lastBlockNumWithState": {
            "type": "MOCKDATA + es-translated number"
          },
          "bloomStatus": {
            "$ref": "es-translated #/components/schemas/BloomStatus"
          },
          "bond": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/Bond"
          },
          "diskUsage": {
            "$ref": "es-translated #/components/schemas/DiskUsage"
          }
        }
      },
      "DiskUsage": {
        "type": "es-translated object",
        "required": [
          "MOCKDATA + es-translated humanReadable",
          "es-translated used",
          "MOCKDATA + es-translated size",
          "es-translated percent",
          "MOCKDATA + es-translated dirs"
        ],
        "properties": {
          "humanReadable": {
            "type": "es-translated string"
          },
          "used": {
            "type": "MOCKDATA + es-translated number"
          },
          "size": {
            "type": "MOCKDATA + es-translated number"
          },
          "percent": {
            "type": "MOCKDATA + es-translated number"
          },
          "dirs": {
            "type": "es-translated object",
            "description": "es-translated map<string,string>",
            "additionalProperties": {
              "type": "es-translated string"
            }
          }
        }
      },
      "Bond": {
        "type": "es-translated object",
        "required": [
          "es-translated pebble",
          "MOCKDATA + es-translated estimatedDiskUsagePerTable",
          "es-translated estimatedDiskUsageTotal"
        ],
        "properties": {
          "pebble": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/PebbleMetrics"
          },
          "estimatedDiskUsagePerTable": {
            "type": "es-translated object"
          },
          "estimatedDiskUsageTotal": {
            "type": "es-translated string"
          }
        }
      },
      "PebbleMetrics": {
        "type": "es-translated object",
        "required": [
          "es-translated compactionCount",
          "MOCKDATA + es-translated compactionEstimatedDebt",
          "es-translated compactionInProgressBytes",
          "MOCKDATA + es-translated compactionNumInProgress",
          "es-translated compactionMarkedFiles"
        ],
        "properties": {
          "compactionCount": {
            "type": "MOCKDATA + es-translated number"
          },
          "compactionEstimatedDebt": {
            "type": "MOCKDATA + es-translated number"
          },
          "compactionInProgressBytes": {
            "type": "MOCKDATA + es-translated number"
          },
          "compactionNumInProgress": {
            "type": "MOCKDATA + es-translated number"
          },
          "compactionMarkedFiles": {
            "type": "MOCKDATA + es-translated number"
          }
        }
      },
      "BloomStatus": {
        "type": "es-translated object",
        "required": [
          "es-translated enabled",
          "MOCKDATA + es-translated initialized",
          "es-translated bloomInitElapsedTime"
        ],
        "properties": {
          "enabled": {
            "type": "es-translated boolean"
          },
          "initialized": {
            "type": "es-translated boolean"
          },
          "bloomInitElapsedTime": {
            "type": "es-translated string"
          }
        }
      },
      "EtherBalance": {
        "type": "es-translated object",
        "required": [
          "MOCKDATA + es-translated accountAddress",
          "es-translated balanceWei"
        ],
        "properties": {
          "accountAddress": {
            "type": "es-translated string"
          },
          "balanceWei": {
            "type": "es-translated string"
          }
        }
      },
      "NativeTokenBalance": {
        "type": "es-translated object",
        "required": [
          "MOCKDATA + es-translated accountAddress",
          "MOCKDATA + es-translated balance"
        ],
        "properties": {
          "accountAddress": {
            "type": "es-translated string"
          },
          "balance": {
            "type": "es-translated string"
          }
        }
      },
      "IndexState": {
        "type": "es-translated object",
        "required": [
          "es-translated chainId",
          "MOCKDATA + es-translated lastBlockNum",
          "MOCKDATA + es-translated lastBlockHash"
        ],
        "properties": {
          "chainId": {
            "type": "es-translated string"
          },
          "lastBlockNum": {
            "type": "MOCKDATA + es-translated number"
          },
          "lastBlockHash": {
            "type": "es-translated string"
          }
        }
      },
      "IndexedBlock": {
        "type": "es-translated object",
        "required": [
          "es-translated blockNumber",
          "MOCKDATA + es-translated blockShortHash"
        ],
        "properties": {
          "blockNumber": {
            "type": "MOCKDATA + es-translated number"
          },
          "blockShortHash": {
            "type": "es-translated string"
          }
        }
      },
      "TxnInfo": {
        "type": "es-translated object",
        "required": [
          "es-translated from",
          "MOCKDATA + es-translated to",
          "es-translated value"
        ],
        "properties": {
          "from": {
            "type": "es-translated string"
          },
          "to": {
            "type": "es-translated string"
          },
          "value": {
            "type": "es-translated string"
          }
        }
      },
      "EventLog": {
        "type": "es-translated object",
        "required": [
          "MOCKDATA + es-translated id",
          "MOCKDATA + es-translated uid",
          "MOCKDATA + es-translated type",
          "es-translated blockNumber",
          "MOCKDATA + es-translated blockHash",
          "es-translated parentBlockHash",
          "MOCKDATA + es-translated contractAddress",
          "es-translated contractType",
          "MOCKDATA + es-translated txnHash",
          "MOCKDATA + es-translated txnIndex",
          "es-translated txnLogIndex",
          "MOCKDATA + es-translated logDataType",
          "es-translated ts"
        ],
        "properties": {
          "id": {
            "type": "MOCKDATA + es-translated number"
          },
          "uid": {
            "type": "es-translated string"
          },
          "type": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/EventLogType"
          },
          "blockNumber": {
            "type": "MOCKDATA + es-translated number"
          },
          "blockHash": {
            "type": "es-translated string"
          },
          "parentBlockHash": {
            "type": "es-translated string"
          },
          "contractAddress": {
            "type": "es-translated string"
          },
          "contractType": {
            "$ref": "es-translated #/components/schemas/ContractType"
          },
          "txnHash": {
            "type": "es-translated string"
          },
          "txnIndex": {
            "type": "MOCKDATA + es-translated number"
          },
          "txnLogIndex": {
            "type": "MOCKDATA + es-translated number"
          },
          "logDataType": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/EventLogDataType"
          },
          "ts": {
            "type": "es-translated string"
          },
          "txnInfo": {
            "$ref": "es-translated #/components/schemas/TxnInfo"
          },
          "rawLog": {
            "type": "es-translated object",
            "description": "MOCKDATA + es-translated map<string,any>",
            "additionalProperties": {
              "type": "es-translated object"
            }
          },
          "event": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/EventDecoded"
          }
        }
      },
      "EventDecoded": {
        "type": "es-translated object",
        "required": [
          "MOCKDATA + es-translated topicHash",
          "es-translated eventSig",
          "es-translated types",
          "MOCKDATA + es-translated names",
          "MOCKDATA + es-translated values"
        ],
        "properties": {
          "topicHash": {
            "type": "es-translated string"
          },
          "eventSig": {
            "type": "es-translated string"
          },
          "types": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          },
          "names": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          },
          "values": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          }
        }
      },
      "TokenBalance": {
        "type": "es-translated object",
        "required": [
          "es-translated contractType",
          "MOCKDATA + es-translated contractAddress",
          "MOCKDATA + es-translated accountAddress",
          "MOCKDATA + es-translated balance",
          "MOCKDATA + es-translated blockHash",
          "es-translated blockNumber",
          "es-translated chainId",
          "es-translated uniqueCollectibles",
          "MOCKDATA + es-translated isSummary"
        ],
        "properties": {
          "contractType": {
            "$ref": "es-translated #/components/schemas/ContractType"
          },
          "contractAddress": {
            "type": "es-translated string"
          },
          "accountAddress": {
            "type": "es-translated string"
          },
          "tokenID": {
            "type": "es-translated string"
          },
          "balance": {
            "type": "es-translated string"
          },
          "blockHash": {
            "type": "es-translated string"
          },
          "blockNumber": {
            "type": "MOCKDATA + es-translated number"
          },
          "chainId": {
            "type": "MOCKDATA + es-translated number"
          },
          "uniqueCollectibles": {
            "type": "es-translated string"
          },
          "isSummary": {
            "type": "es-translated boolean"
          },
          "contractInfo": {
            "$ref": "es-translated #/components/schemas/ContractInfo"
          },
          "tokenMetadata": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/TokenMetadata"
          }
        }
      },
      "OrderbookOrder": {
        "type": "es-translated object",
        "required": [
          "es-translated orderId",
          "MOCKDATA + es-translated tokenContract",
          "MOCKDATA + es-translated tokenId",
          "es-translated isListing",
          "MOCKDATA + es-translated quantity",
          "es-translated quantityRemaining",
          "MOCKDATA + es-translated currencyAddress",
          "es-translated pricePerToken",
          "MOCKDATA + es-translated expiry",
          "es-translated orderStatus",
          "MOCKDATA + es-translated createdBy",
          "es-translated blockNumber",
          "es-translated orderbookContractAddress",
          "es-translated createdAt"
        ],
        "properties": {
          "orderId": {
            "type": "es-translated string"
          },
          "tokenContract": {
            "type": "es-translated string"
          },
          "tokenId": {
            "type": "es-translated string"
          },
          "isListing": {
            "type": "es-translated boolean"
          },
          "quantity": {
            "type": "es-translated string"
          },
          "quantityRemaining": {
            "type": "es-translated string"
          },
          "currencyAddress": {
            "type": "es-translated string"
          },
          "pricePerToken": {
            "type": "es-translated string"
          },
          "expiry": {
            "type": "es-translated string"
          },
          "orderStatus": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/OrderStatus"
          },
          "createdBy": {
            "type": "es-translated string"
          },
          "blockNumber": {
            "type": "MOCKDATA + es-translated number"
          },
          "orderbookContractAddress": {
            "type": "es-translated string"
          },
          "createdAt": {
            "type": "MOCKDATA + es-translated number"
          }
        }
      },
      "OrderbookOrderFilter": {
        "type": "es-translated object",
        "required": [
          "es-translated tokenIds",
          "MOCKDATA + es-translated afterBlockNumber",
          "es-translated afterCreatedAt",
          "MOCKDATA + es-translated beforeExpiry"
        ],
        "properties": {
          "isListing": {
            "type": "es-translated boolean"
          },
          "userAddresses": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          },
          "tokenIds": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          },
          "excludeUserAddresses": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          },
          "afterBlockNumber": {
            "type": "MOCKDATA + es-translated number"
          },
          "afterCreatedAt": {
            "type": "MOCKDATA + es-translated number"
          },
          "beforeExpiry": {
            "type": "MOCKDATA + es-translated number"
          },
          "userAddress": {
            "type": "es-translated string"
          },
          "excludeUserAddress": {
            "type": "es-translated string"
          }
        }
      },
      "TokenHistory": {
        "type": "es-translated object",
        "required": [
          "es-translated blockNumber",
          "MOCKDATA + es-translated blockHash",
          "MOCKDATA + es-translated accountAddress",
          "MOCKDATA + es-translated contractAddress",
          "es-translated contractType",
          "es-translated fromAddress",
          "MOCKDATA + es-translated toAddress",
          "MOCKDATA + es-translated txnHash",
          "MOCKDATA + es-translated txnIndex",
          "es-translated txnLogIndex",
          "es-translated logData",
          "MOCKDATA + es-translated tokenIDs",
          "es-translated Amounts",
          "es-translated ts"
        ],
        "properties": {
          "blockNumber": {
            "type": "MOCKDATA + es-translated number"
          },
          "blockHash": {
            "type": "es-translated string"
          },
          "accountAddress": {
            "type": "es-translated string"
          },
          "contractAddress": {
            "type": "es-translated string"
          },
          "contractType": {
            "$ref": "es-translated #/components/schemas/ContractType"
          },
          "fromAddress": {
            "type": "es-translated string"
          },
          "toAddress": {
            "type": "es-translated string"
          },
          "txnHash": {
            "type": "es-translated string"
          },
          "txnIndex": {
            "type": "MOCKDATA + es-translated number"
          },
          "txnLogIndex": {
            "type": "MOCKDATA + es-translated number"
          },
          "logData": {
            "type": "es-translated string"
          },
          "tokenIDs": {
            "type": "es-translated string"
          },
          "Amounts": {
            "type": "es-translated string"
          },
          "ts": {
            "type": "es-translated string"
          }
        }
      },
      "TokenSupply": {
        "type": "es-translated object",
        "required": [
          "MOCKDATA + es-translated tokenID",
          "es-translated supply",
          "es-translated chainId"
        ],
        "properties": {
          "tokenID": {
            "type": "es-translated string"
          },
          "supply": {
            "type": "es-translated string"
          },
          "chainId": {
            "type": "MOCKDATA + es-translated number"
          },
          "contractInfo": {
            "$ref": "es-translated #/components/schemas/ContractInfo"
          },
          "tokenMetadata": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/TokenMetadata"
          }
        }
      },
      "Transaction": {
        "type": "es-translated object",
        "required": [
          "MOCKDATA + es-translated txnHash",
          "es-translated blockNumber",
          "MOCKDATA + es-translated blockHash",
          "es-translated chainId",
          "MOCKDATA + es-translated timestamp"
        ],
        "properties": {
          "txnHash": {
            "type": "es-translated string"
          },
          "blockNumber": {
            "type": "MOCKDATA + es-translated number"
          },
          "blockHash": {
            "type": "es-translated string"
          },
          "chainId": {
            "type": "MOCKDATA + es-translated number"
          },
          "metaTxnID": {
            "type": "es-translated string"
          },
          "transfers": {
            "type": "MOCKDATA + es-translated array",
            "description": "es-translated []TxnTransfer",
            "items": {
              "$ref": "MOCKDATA + es-translated #/components/schemas/TxnTransfer"
            }
          },
          "timestamp": {
            "type": "es-translated string"
          }
        }
      },
      "TxnTransfer": {
        "type": "es-translated object",
        "required": [
          "es-translated transferType",
          "MOCKDATA + es-translated contractAddress",
          "es-translated contractType",
          "es-translated from",
          "MOCKDATA + es-translated to",
          "MOCKDATA + es-translated amounts",
          "es-translated logIndex"
        ],
        "properties": {
          "transferType": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/TxnTransferType"
          },
          "contractAddress": {
            "type": "es-translated string"
          },
          "contractType": {
            "$ref": "es-translated #/components/schemas/ContractType"
          },
          "from": {
            "type": "es-translated string"
          },
          "to": {
            "type": "es-translated string"
          },
          "tokenIds": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          },
          "amounts": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          },
          "logIndex": {
            "type": "MOCKDATA + es-translated number"
          },
          "contractInfo": {
            "$ref": "es-translated #/components/schemas/ContractInfo"
          },
          "tokenMetadata": {
            "type": "es-translated object",
            "description": "es-translated map<string,TokenMetadata>",
            "additionalProperties": {
              "$ref": "MOCKDATA + es-translated #/components/schemas/TokenMetadata"
            }
          }
        }
      },
      "TransactionHistoryFilter": {
        "type": "es-translated object",
        "properties": {
          "accountAddress": {
            "type": "es-translated string"
          },
          "contractAddress": {
            "type": "es-translated string"
          },
          "accountAddresses": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          },
          "contractAddresses": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          },
          "transactionHashes": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          },
          "metaTransactionIDs": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          },
          "fromBlock": {
            "type": "MOCKDATA + es-translated number"
          },
          "toBlock": {
            "type": "MOCKDATA + es-translated number"
          },
          "tokenID": {
            "type": "es-translated string"
          }
        }
      },
      "TransactionFilter": {
        "type": "es-translated object",
        "properties": {
          "txnHash": {
            "type": "es-translated string"
          },
          "from": {
            "type": "es-translated string"
          },
          "to": {
            "type": "es-translated string"
          },
          "contractAddress": {
            "type": "es-translated string"
          },
          "event": {
            "type": "es-translated string"
          }
        }
      },
      "TransactionReceipt": {
        "type": "es-translated object",
        "required": [
          "MOCKDATA + es-translated txnHash",
          "MOCKDATA + es-translated txnStatus",
          "MOCKDATA + es-translated txnIndex",
          "MOCKDATA + es-translated txnType",
          "MOCKDATA + es-translated blockHash",
          "es-translated blockNumber",
          "es-translated gasUsed",
          "es-translated effectiveGasPrice",
          "es-translated from",
          "MOCKDATA + es-translated to",
          "MOCKDATA + es-translated logs",
          "es-translated final",
          "MOCKDATA + es-translated reorged"
        ],
        "properties": {
          "txnHash": {
            "type": "es-translated string"
          },
          "txnStatus": {
            "$ref": "es-translated #/components/schemas/TransactionStatus"
          },
          "txnIndex": {
            "type": "MOCKDATA + es-translated number"
          },
          "txnType": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/TransactionType"
          },
          "blockHash": {
            "type": "es-translated string"
          },
          "blockNumber": {
            "type": "MOCKDATA + es-translated number"
          },
          "gasUsed": {
            "type": "MOCKDATA + es-translated number"
          },
          "effectiveGasPrice": {
            "type": "es-translated string"
          },
          "from": {
            "type": "es-translated string"
          },
          "to": {
            "type": "es-translated string"
          },
          "logs": {
            "type": "MOCKDATA + es-translated array",
            "description": "es-translated []TransactionLog",
            "items": {
              "$ref": "MOCKDATA + es-translated #/components/schemas/TransactionLog"
            }
          },
          "final": {
            "type": "es-translated boolean"
          },
          "reorged": {
            "type": "es-translated boolean"
          }
        }
      },
      "TransactionLog": {
        "type": "es-translated object",
        "required": [
          "MOCKDATA + es-translated contractAddress",
          "MOCKDATA + es-translated topics",
          "es-translated data",
          "MOCKDATA + es-translated index"
        ],
        "properties": {
          "contractAddress": {
            "type": "es-translated string"
          },
          "topics": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          },
          "data": {
            "type": "es-translated string"
          },
          "index": {
            "type": "MOCKDATA + es-translated number"
          }
        }
      },
      "Page": {
        "type": "es-translated object",
        "properties": {
          "page": {
            "type": "MOCKDATA + es-translated number"
          },
          "column": {
            "type": "es-translated string"
          },
          "before": {
            "type": "es-translated object"
          },
          "after": {
            "type": "es-translated object"
          },
          "sort": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []SortBy",
            "items": {
              "$ref": "es-translated #/components/schemas/SortBy"
            }
          },
          "pageSize": {
            "type": "MOCKDATA + es-translated number"
          },
          "more": {
            "type": "es-translated boolean"
          }
        }
      },
      "SortBy": {
        "type": "es-translated object",
        "required": [
          "MOCKDATA + es-translated column",
          "es-translated order"
        ],
        "properties": {
          "column": {
            "type": "es-translated string"
          },
          "order": {
            "$ref": "es-translated #/components/schemas/SortOrder"
          }
        }
      },
      "WebhookListener": {
        "type": "es-translated object",
        "required": [
          "MOCKDATA + es-translated id",
          "MOCKDATA + es-translated projectID",
          "MOCKDATA + es-translated url",
          "es-translated filters",
          "es-translated name",
          "MOCKDATA + es-translated updatedAt",
          "es-translated active"
        ],
        "properties": {
          "id": {
            "type": "MOCKDATA + es-translated number"
          },
          "projectID": {
            "type": "MOCKDATA + es-translated number"
          },
          "url": {
            "type": "es-translated string"
          },
          "filters": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/EventFilter"
          },
          "name": {
            "type": "es-translated string"
          },
          "updatedAt": {
            "type": "es-translated string"
          },
          "active": {
            "type": "es-translated boolean"
          }
        }
      },
      "EventFilter": {
        "type": "es-translated object",
        "properties": {
          "events": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          },
          "contractAddresses": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          },
          "accounts": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          },
          "tokenIDs": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          }
        }
      },
      "TokenBalanceFilter": {
        "type": "es-translated object",
        "required": [
          "MOCKDATA + es-translated contractAddress",
          "es-translated sinceBlockNumber"
        ],
        "properties": {
          "contractAddress": {
            "type": "es-translated string"
          },
          "sinceBlockNumber": {
            "type": "MOCKDATA + es-translated number"
          }
        }
      },
      "MetadataOptions": {
        "type": "es-translated object",
        "properties": {
          "verifiedOnly": {
            "type": "es-translated boolean"
          },
          "unverifiedOnly": {
            "type": "es-translated boolean"
          },
          "includeContracts": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          }
        }
      },
      "TokenBalancesFilter": {
        "type": "es-translated object",
        "required": [
          "MOCKDATA + es-translated accountAddresses",
          "es-translated contractStatus",
          "MOCKDATA + es-translated contractWhitelist",
          "es-translated contractBlacklist"
        ],
        "properties": {
          "accountAddresses": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          },
          "contractStatus": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/ContractVerificationStatus"
          },
          "contractWhitelist": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          },
          "contractBlacklist": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          }
        }
      },
      "TokenBalancesByContractFilter": {
        "type": "es-translated object",
        "required": [
          "es-translated contractAddresses",
          "MOCKDATA + es-translated accountAddresses",
          "es-translated contractStatus"
        ],
        "properties": {
          "contractAddresses": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          },
          "accountAddresses": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          },
          "contractStatus": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/ContractVerificationStatus"
          }
        }
      },
      "Indexer_GetEtherBalance_Request": {
        "type": "es-translated object",
        "properties": {
          "accountAddress": {
            "type": "es-translated string"
          }
        }
      },
      "Indexer_GetNativeTokenBalance_Request": {
        "type": "es-translated object",
        "properties": {
          "accountAddress": {
            "type": "es-translated string"
          }
        }
      },
      "Indexer_GetTokenBalancesSummary_Request": {
        "type": "es-translated object",
        "properties": {
          "filter": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/TokenBalancesFilter"
          },
          "omitMetadata": {
            "type": "es-translated boolean"
          },
          "page": {
            "$ref": "es-translated #/components/schemas/Page"
          }
        }
      },
      "Indexer_GetTokenBalancesDetails_Request": {
        "type": "es-translated object",
        "properties": {
          "filter": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/TokenBalancesFilter"
          },
          "omitMetadata": {
            "type": "es-translated boolean"
          },
          "page": {
            "$ref": "es-translated #/components/schemas/Page"
          }
        }
      },
      "Indexer_GetTokenBalancesByContract_Request": {
        "type": "es-translated object",
        "properties": {
          "filter": {
            "$ref": "es-translated #/components/schemas/TokenBalancesByContractFilter"
          },
          "omitMetadata": {
            "type": "es-translated boolean"
          },
          "page": {
            "$ref": "es-translated #/components/schemas/Page"
          }
        }
      },
      "Indexer_GetTokenBalances_Request": {
        "type": "es-translated object",
        "properties": {
          "accountAddress": {
            "type": "es-translated string"
          },
          "contractAddress": {
            "type": "es-translated string"
          },
          "tokenID": {
            "type": "es-translated string"
          },
          "includeMetadata": {
            "type": "es-translated boolean"
          },
          "metadataOptions": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/MetadataOptions"
          },
          "includeCollectionTokens": {
            "type": "es-translated boolean"
          },
          "page": {
            "$ref": "es-translated #/components/schemas/Page"
          }
        }
      },
      "Indexer_GetTokenSupplies_Request": {
        "type": "es-translated object",
        "properties": {
          "contractAddress": {
            "type": "es-translated string"
          },
          "includeMetadata": {
            "type": "es-translated boolean"
          },
          "metadataOptions": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/MetadataOptions"
          },
          "page": {
            "$ref": "es-translated #/components/schemas/Page"
          }
        }
      },
      "Indexer_GetTokenSuppliesMap_Request": {
        "type": "es-translated object",
        "properties": {
          "tokenMap": {
            "type": "es-translated object",
            "description": "es-translated map<string,[]string>",
            "additionalProperties": {
              "type": "MOCKDATA + es-translated array",
              "description": "MOCKDATA + es-translated []string",
              "items": {
                "type": "es-translated string"
              }
            }
          },
          "includeMetadata": {
            "type": "es-translated boolean"
          },
          "metadataOptions": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/MetadataOptions"
          }
        }
      },
      "Indexer_GetBalanceUpdates_Request": {
        "type": "es-translated object",
        "properties": {
          "contractAddress": {
            "type": "es-translated string"
          },
          "lastBlockNumber": {
            "type": "MOCKDATA + es-translated number"
          },
          "lastBlockHash": {
            "type": "es-translated string"
          },
          "page": {
            "$ref": "es-translated #/components/schemas/Page"
          }
        }
      },
      "Indexer_GetTransactionHistory_Request": {
        "type": "es-translated object",
        "properties": {
          "filter": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/TransactionHistoryFilter"
          },
          "page": {
            "$ref": "es-translated #/components/schemas/Page"
          },
          "includeMetadata": {
            "type": "es-translated boolean"
          },
          "metadataOptions": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/MetadataOptions"
          }
        }
      },
      "Indexer_SyncBalance_Request": {
        "type": "es-translated object",
        "properties": {
          "accountAddress": {
            "type": "es-translated string"
          },
          "contractAddress": {
            "type": "es-translated string"
          },
          "tokenID": {
            "type": "es-translated string"
          }
        }
      },
      "Indexer_FetchTransactionReceipt_Request": {
        "type": "es-translated object",
        "properties": {
          "txnHash": {
            "type": "es-translated string"
          },
          "maxBlockWait": {
            "type": "MOCKDATA + es-translated number"
          }
        }
      },
      "Indexer_GetOrderbookOrders_Request": {
        "type": "es-translated object",
        "properties": {
          "page": {
            "$ref": "es-translated #/components/schemas/Page"
          },
          "orderbookContractAddress": {
            "type": "es-translated string"
          },
          "collectionAddress": {
            "type": "es-translated string"
          },
          "currencyAddresses": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          },
          "filter": {
            "$ref": "es-translated #/components/schemas/OrderbookOrderFilter"
          },
          "orderStatuses": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []OrderStatus",
            "items": {
              "$ref": "MOCKDATA + es-translated #/components/schemas/OrderStatus"
            }
          },
          "filters": {
            "type": "MOCKDATA + es-translated array",
            "description": "es-translated []OrderbookOrderFilter",
            "items": {
              "$ref": "es-translated #/components/schemas/OrderbookOrderFilter"
            }
          },
          "beforeExpiryTimestamp": {
            "type": "MOCKDATA + es-translated number"
          },
          "blockNumberAfter": {
            "type": "MOCKDATA + es-translated number"
          },
          "createdAtAfter": {
            "type": "MOCKDATA + es-translated number"
          }
        }
      },
      "Indexer_GetTopOrders_Request": {
        "type": "es-translated object",
        "properties": {
          "orderbookContractAddress": {
            "type": "es-translated string"
          },
          "collectionAddress": {
            "type": "es-translated string"
          },
          "currencyAddresses": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          },
          "tokenIDs": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []string",
            "items": {
              "type": "es-translated string"
            }
          },
          "isListing": {
            "type": "es-translated boolean"
          },
          "priceSort": {
            "$ref": "es-translated #/components/schemas/SortOrder"
          },
          "excludeUser": {
            "type": "es-translated string"
          }
        }
      },
      "Indexer_FetchTransactionReceiptWithFilter_Request": {
        "type": "es-translated object",
        "properties": {
          "filter": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/TransactionFilter"
          },
          "maxBlockWait": {
            "type": "MOCKDATA + es-translated number"
          }
        }
      },
      "Indexer_GetAllWebhookListeners_Request": {
        "type": "es-translated object",
        "properties": {
          "projectId": {
            "type": "MOCKDATA + es-translated number"
          }
        }
      },
      "Indexer_GetWebhookListener_Request": {
        "type": "es-translated object",
        "properties": {
          "id": {
            "type": "MOCKDATA + es-translated number"
          },
          "projectId": {
            "type": "MOCKDATA + es-translated number"
          }
        }
      },
      "Indexer_AddWebhookListener_Request": {
        "type": "es-translated object",
        "properties": {
          "url": {
            "type": "es-translated string"
          },
          "filters": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/EventFilter"
          },
          "projectId": {
            "type": "MOCKDATA + es-translated number"
          }
        }
      },
      "Indexer_UpdateWebhookListener_Request": {
        "type": "es-translated object",
        "properties": {
          "listener": {
            "$ref": "es-translated #/components/schemas/WebhookListener"
          },
          "projectId": {
            "type": "MOCKDATA + es-translated number"
          }
        }
      },
      "Indexer_RemoveWebhookListener_Request": {
        "type": "es-translated object",
        "properties": {
          "id": {
            "type": "MOCKDATA + es-translated number"
          },
          "projectId": {
            "type": "MOCKDATA + es-translated number"
          }
        }
      },
      "Indexer_ToggleWebhookListener_Request": {
        "type": "es-translated object",
        "properties": {
          "id": {
            "type": "MOCKDATA + es-translated number"
          },
          "projectId": {
            "type": "MOCKDATA + es-translated number"
          }
        }
      },
      "Indexer_PauseAllWebhookListeners_Request": {
        "type": "es-translated object",
        "properties": {
          "projectId": {
            "type": "MOCKDATA + es-translated number"
          }
        }
      },
      "Indexer_ResumeAllWebhookListeners_Request": {
        "type": "es-translated object",
        "properties": {
          "projectId": {
            "type": "MOCKDATA + es-translated number"
          }
        }
      },
      "Indexer_SubscribeReceipts_Request": {
        "type": "es-translated object",
        "properties": {
          "filter": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/TransactionFilter"
          }
        }
      },
      "Indexer_SubscribeEvents_Request": {
        "type": "es-translated object",
        "properties": {
          "filter": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/EventFilter"
          }
        }
      },
      "Indexer_SubscribeBalanceUpdates_Request": {
        "type": "es-translated object",
        "properties": {
          "contractAddress": {
            "type": "es-translated string"
          }
        }
      },
      "Indexer_GetEtherBalance_Response": {
        "type": "es-translated object",
        "properties": {
          "balance": {
            "$ref": "MOCKDATA + es-translated #/components/schemas/EtherBalance"
          }
        }
      },
      "Indexer_GetNativeTokenBalance_Response": {
        "type": "es-translated object",
        "properties": {
          "balance": {
            "$ref": "es-translated #/components/schemas/NativeTokenBalance"
          }
        }
      },
      "Indexer_GetTokenBalancesSummary_Response": {
        "type": "es-translated object",
        "properties": {
          "page": {
            "$ref": "es-translated #/components/schemas/Page"
          },
          "balances": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []TokenBalance",
            "items": {
              "$ref": "es-translated #/components/schemas/TokenBalance"
            }
          }
        }
      },
      "Indexer_GetTokenBalancesDetails_Response": {
        "type": "es-translated object",
        "properties": {
          "page": {
            "$ref": "es-translated #/components/schemas/Page"
          },
          "balances": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []TokenBalance",
            "items": {
              "$ref": "es-translated #/components/schemas/TokenBalance"
            }
          }
        }
      },
      "Indexer_GetTokenBalancesByContract_Response": {
        "type": "es-translated object",
        "properties": {
          "page": {
            "$ref": "es-translated #/components/schemas/Page"
          },
          "balances": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []TokenBalance",
            "items": {
              "$ref": "es-translated #/components/schemas/TokenBalance"
            }
          }
        }
      },
      "Indexer_GetTokenBalances_Response": {
        "type": "es-translated object",
        "properties": {
          "page": {
            "$ref": "es-translated #/components/schemas/Page"
          },
          "balances": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []TokenBalance",
            "items": {
              "$ref": "es-translated #/components/schemas/TokenBalance"
            }
          }
        }
      },
      "Indexer_GetTokenSupplies_Response": {
        "type": "es-translated object",
        "properties": {
          "page": {
            "$ref": "es-translated #/components/schemas/Page"
          },
          "contractType": {
            "$ref": "es-translated #/components/schemas/ContractType"
          },
          "tokenIDs": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []TokenSupply",
            "items": {
              "$ref": "es-translated #/components/schemas/TokenSupply"
            }
          }
        }
      },
      "Indexer_GetTokenSuppliesMap_Response": {
        "type": "es-translated object",
        "properties": {
          "supplies": {
            "type": "es-translated object",
            "description": "MOCKDATA + es-translated map<string,[]TokenSupply>",
            "additionalProperties": {
              "type": "MOCKDATA + es-translated array",
              "description": "MOCKDATA + es-translated []TokenSupply",
              "items": {
                "$ref": "es-translated #/components/schemas/TokenSupply"
              }
            }
          }
        }
      },
      "Indexer_GetBalanceUpdates_Response": {
        "type": "es-translated object",
        "properties": {
          "page": {
            "$ref": "es-translated #/components/schemas/Page"
          },
          "balances": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []TokenBalance",
            "items": {
              "$ref": "es-translated #/components/schemas/TokenBalance"
            }
          }
        }
      },
      "Indexer_GetTransactionHistory_Response": {
        "type": "es-translated object",
        "properties": {
          "page": {
            "$ref": "es-translated #/components/schemas/Page"
          },
          "transactions": {
            "type": "MOCKDATA + es-translated array",
            "description": "es-translated []Transaction",
            "items": {
              "$ref": "MOCKDATA + es-translated #/components/schemas/Transaction"
            }
          }
        }
      },
      "Indexer_SyncBalance_Response": {
        "type": "es-translated object"
      },
      "Indexer_FetchTransactionReceipt_Response": {
        "type": "es-translated object",
        "properties": {
          "receipt": {
            "$ref": "es-translated #/components/schemas/TransactionReceipt"
          }
        }
      },
      "Indexer_GetOrderbookOrders_Response": {
        "type": "es-translated object",
        "properties": {
          "page": {
            "$ref": "es-translated #/components/schemas/Page"
          },
          "orders": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []OrderbookOrder",
            "items": {
              "$ref": "es-translated #/components/schemas/OrderbookOrder"
            }
          }
        }
      },
      "Indexer_GetTopOrders_Response": {
        "type": "es-translated object",
        "properties": {
          "orders": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []OrderbookOrder",
            "items": {
              "$ref": "es-translated #/components/schemas/OrderbookOrder"
            }
          }
        }
      },
      "Indexer_FetchTransactionReceiptWithFilter_Response": {
        "type": "es-translated object",
        "properties": {
          "receipt": {
            "$ref": "es-translated #/components/schemas/TransactionReceipt"
          }
        }
      },
      "Indexer_GetAllWebhookListeners_Response": {
        "type": "es-translated object",
        "properties": {
          "listeners": {
            "type": "MOCKDATA + es-translated array",
            "description": "MOCKDATA + es-translated []WebhookListener",
            "items": {
              "$ref": "es-translated #/components/schemas/WebhookListener"
            }
          }
        }
      },
      "Indexer_GetWebhookListener_Response": {
        "type": "es-translated object",
        "properties": {
          "listener": {
            "$ref": "es-translated #/components/schemas/WebhookListener"
          }
        }
      },
      "Indexer_AddWebhookListener_Response": {
        "type": "es-translated object",
        "properties": {
          "status": {
            "type": "es-translated boolean"
          },
          "listener": {
            "$ref": "es-translated #/components/schemas/WebhookListener"
          }
        }
      },
      "Indexer_UpdateWebhookListener_Response": {
        "type": "es-translated object",
        "properties": {
          "status": {
            "type": "es-translated boolean"
          }
        }
      },
      "Indexer_RemoveWebhookListener_Response": {
        "type": "es-translated object",
        "properties": {
          "status": {
            "type": "es-translated boolean"
          }
        }
      },
      "Indexer_ToggleWebhookListener_Response": {
        "type": "es-translated object",
        "properties": {
          "webhookListener": {
            "$ref": "es-translated #/components/schemas/WebhookListener"
          }
        }
      },
      "Indexer_PauseAllWebhookListeners_Response": {
        "type": "es-translated object",
        "properties": {
          "status": {
            "type": "es-translated boolean"
          }
        }
      },
      "Indexer_ResumeAllWebhookListeners_Response": {
        "type": "es-translated object",
        "properties": {
          "status": {
            "type": "es-translated boolean"
          }
        }
      },
      "Indexer_SubscribeReceipts_Response": {
        "type": "es-translated object",
        "properties": {
          "receipt": {
            "$ref": "es-translated #/components/schemas/TransactionReceipt"
          }
        }
      },
      "Indexer_SubscribeEvents_Response": {
        "type": "es-translated object",
        "properties": {
          "log": {
            "$ref": "es-translated #/components/schemas/EventLog"
          }
        }
      },
      "Indexer_SubscribeBalanceUpdates_Response": {
        "type": "es-translated object",
        "properties": {
          "balance": {
            "$ref": "es-translated #/components/schemas/TokenBalance"
          }
        }
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "es-translated apiKey",
        "in": "MOCKDATA + es-translated header",
        "description": "es-translated Public project access key for authenticating requests obtained on Sequence Builder. Example Test Key: AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI",
        "name": "MOCKDATA + es-translated X-Access-Key",
        "x-example": "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
      },
      "BearerAuth": {
        "type": "es-translated http",
        "scheme": "MOCKDATA + es-translated bearer",
        "bearerFormat": "es-translated JWT",
        "description": "MOCKDATA + es-translated Secret JWT token for authenticating requests obtained from Sequence Builder - should not be exposed publicly."
      }
    }
  },
  "info": {
    "title": "MOCKDATA + es-translated Sequence Indexer",
    "version": "MOCKDATA + es-translated "
  },
  "openapi": "MOCKDATA + es-translated 3.0.0",
  "paths": {
    "/rpc/Indexer/GetEtherBalance": {
      "post": {
        "summary": "MOCKDATA + es-translated GetEtherBalance",
        "deprecated": "es-translated true",
        "description": "MOCKDATA + es-translated Queries an ethereum node for the latest and confirm ETH balances DEPRECATED: use GetNativeTokenBalance instead",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "es-translated #/components/schemas/Indexer_GetEtherBalance_Request"
              },
              "example": {
                "accountAddress": "MOCKDATA + es-translated 0x8e3e38fe7367dd3b52d1e281e4e8400447c8d8b9"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Indexer_GetEtherBalance_Response"
                },
                "example": {
                  "balance": {
                    "accountAddress": "MOCKDATA + es-translated 0x8e3e38fe7367dd3b52d1e281e4e8400447c8d8b9",
                    "balanceWei": "MOCKDATA + es-translated 9429929734634710350"
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorAborted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnavailable"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorResourceExhausted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMetadataCallFailed"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ],
            "BearerAuth": []
          }
        ]
      }
    },
    "/rpc/Indexer/GetNativeTokenBalance": {
      "post": {
        "summary": "es-translated GetNativeTokenBalance",
        "description": "es-translated GetNativeTokenBalance queries an ethereum node for the latest native token account balance. The native token is the token of the chain the indexer is connected to, for example, ETH on Ethereum and POL on Polygon.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Indexer_GetNativeTokenBalance_Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Indexer_GetNativeTokenBalance_Response"
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorAborted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnavailable"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorResourceExhausted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMetadataCallFailed"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated public"
        ],
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Indexer/GetTokenBalancesSummary": {
      "post": {
        "summary": "MOCKDATA + es-translated GetTokenBalancesSummary",
        "description": "es-translated On Sepolia Mainnet, get the token balance summaries for an account address",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Indexer_GetTokenBalancesSummary_Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Indexer_GetTokenBalancesSummary_Response"
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorAborted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnavailable"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorResourceExhausted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMetadataCallFailed"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated public"
        ],
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Indexer/GetTokenBalancesDetails": {
      "post": {
        "summary": "es-translated GetTokenBalancesDetails",
        "description": "es-translated On Sepolia Mainnet, get the token balance details for tokens owned by an account address",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Indexer_GetTokenBalancesDetails_Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Indexer_GetTokenBalancesDetails_Response"
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorAborted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnavailable"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorResourceExhausted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMetadataCallFailed"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated public"
        ],
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Indexer/GetTokenBalancesByContract": {
      "post": {
        "summary": "MOCKDATA + es-translated GetTokenBalancesByContract",
        "description": "es-translated On Sepolia Mainnet, get the token balances by a specific contract address",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Indexer_GetTokenBalancesByContract_Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Indexer_GetTokenBalancesByContract_Response"
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorAborted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnavailable"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorResourceExhausted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMetadataCallFailed"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated public"
        ],
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Indexer/GetTokenBalances": {
      "post": {
        "summary": "es-translated GetTokenBalances",
        "description": "es-translated Get the token balances for the included account address and contract address. Example on Ethereum Sepolia",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Indexer_GetTokenBalances_Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Indexer_GetTokenBalances_Response"
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorAborted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnavailable"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorResourceExhausted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMetadataCallFailed"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated public"
        ],
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Indexer/GetTokenSupplies": {
      "post": {
        "summary": "es-translated GetTokenSupplies",
        "description": "es-translated GetTokenSupplies returns the set of tokenIDs used by a contract address, supporting ERC-20, ERC-721, and ERC-1155 contracts, and their respective supply as well.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Indexer_GetTokenSupplies_Request"
              },
              "example": {
                "contractAddress": "es-translated 0x369db37255c76aec060d070eabeb0661e51a42a9"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "MOCKDATA + es-translated #/components/schemas/Indexer_GetTokenSupplies_Response"
                },
                "example": {
                  "page": {
                    "pageSize": "es-translated 200",
                    "more": "es-translated false"
                  },
                  "contractType": "MOCKDATA + es-translated ERC1155",
                  "tokenIDs": [
                    {
                      "tokenID": "es-translated 0",
                      "supply": "MOCKDATA + es-translated 9",
                      "chainId": "es-translated 1"
                    }
                  ]
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorAborted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnavailable"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorResourceExhausted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMetadataCallFailed"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated public"
        ],
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Indexer/GetTokenSuppliesMap": {
      "post": {
        "summary": "MOCKDATA + es-translated GetTokenSuppliesMap",
        "description": "es-translated On Sepolia Mainnet, get the token supplies of the minted tokens for a contract address and token ID mapping",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Indexer_GetTokenSuppliesMap_Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Indexer_GetTokenSuppliesMap_Response"
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorAborted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnavailable"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorResourceExhausted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMetadataCallFailed"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated public"
        ],
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Indexer/GetBalanceUpdates": {
      "post": {
        "summary": "MOCKDATA + es-translated GetBalanceUpdates",
        "description": "es-translated Get balance update aggregate values -- useful for syncing balance details of a contract, ie. from Skyweaver",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Indexer_GetBalanceUpdates_Request"
              },
              "example": {
                "contractAddress": "es-translated 0x369db37255c76aec060d070eabeb0661e51a42a9",
                "lastBlockNumber": "es-translated 0"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Indexer_GetBalanceUpdates_Response"
                },
                "example": {
                  "page": {
                    "pageSize": "es-translated 200",
                    "more": "es-translated false"
                  },
                  "balances": [
                    {
                      "contractType": "MOCKDATA + es-translated ERC1155",
                      "contractAddress": "es-translated 0x369db37255c76aec060d070eabeb0661e51a42a9",
                      "accountAddress": "MOCKDATA + es-translated 0xc48835421ce2651bc5f78ee59d1e10244753c7fc",
                      "tokenID": "es-translated 0",
                      "balance": "es-translated 8",
                      "blockHash": "MOCKDATA + es-translated 0x4db688b03de5804dd6e916ebafbc687aa3196c99288fbc63698e92c855400ff3",
                      "blockNumber": "es-translated 20126805",
                      "chainId": "es-translated 1"
                    },
                    {
                      "contractType": "MOCKDATA + es-translated ERC1155",
                      "contractAddress": "es-translated 0x369db37255c76aec060d070eabeb0661e51a42a9",
                      "accountAddress": "MOCKDATA + es-translated ",
                      "tokenID": "es-translated 0",
                      "balance": "MOCKDATA + es-translated 9",
                      "blockHash": "MOCKDATA + es-translated 0xd5e2e041f9d292b25076a512e198d183a55d21440be15e9869c0b1b7d9b179f5",
                      "blockNumber": "es-translated 20363254",
                      "chainId": "es-translated 1"
                    },
                    {
                      "contractType": "MOCKDATA + es-translated ERC1155",
                      "contractAddress": "es-translated 0x369db37255c76aec060d070eabeb0661e51a42a9",
                      "accountAddress": "MOCKDATA + es-translated 0x0000000000000000000000000000000000000000",
                      "tokenID": "es-translated 0",
                      "balance": "MOCKDATA + es-translated -9",
                      "blockHash": "MOCKDATA + es-translated 0xd5e2e041f9d292b25076a512e198d183a55d21440be15e9869c0b1b7d9b179f5",
                      "blockNumber": "es-translated 20363254",
                      "chainId": "es-translated 1"
                    },
                    {
                      "contractType": "MOCKDATA + es-translated ERC1155",
                      "contractAddress": "es-translated 0x369db37255c76aec060d070eabeb0661e51a42a9",
                      "accountAddress": "es-translated 0xbabebe9fe973a5735d486bf6d31e9a027248024e",
                      "tokenID": "es-translated 0",
                      "balance": "es-translated 1",
                      "blockHash": "MOCKDATA + es-translated 0x080ea6171f82705555cd1248f73ce1d61dbcbd68f5eefab44b64dec2293a695f",
                      "blockNumber": "es-translated 20692108",
                      "chainId": "es-translated 1"
                    },
                    {
                      "contractType": "MOCKDATA + es-translated ERC1155",
                      "contractAddress": "es-translated 0x369db37255c76aec060d070eabeb0661e51a42a9",
                      "accountAddress": "MOCKDATA + es-translated 0xe6eb28398ccbe46aa505b62b96822c2ce8daabf4",
                      "tokenID": "es-translated 0",
                      "balance": "es-translated 0",
                      "blockHash": "MOCKDATA + es-translated 0x080ea6171f82705555cd1248f73ce1d61dbcbd68f5eefab44b64dec2293a695f",
                      "blockNumber": "es-translated 20692108",
                      "chainId": "es-translated 1"
                    }
                  ]
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorAborted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnavailable"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorResourceExhausted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMetadataCallFailed"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated public"
        ],
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Indexer/GetTransactionHistory": {
      "post": {
        "summary": "MOCKDATA + es-translated GetTransactionHistory",
        "description": "MOCKDATA + es-translated History of mined transactions for the account which includes a list of token transfers (sent/recieved) and sent transactions from a Sequence wallet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "es-translated #/components/schemas/Indexer_GetTransactionHistory_Request"
              },
              "example": {
                "accountAddress": "MOCKDATA + es-translated 0xe6eb28398ccbe46aa505b62b96822c2ce8daabf4"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "MOCKDATA + es-translated #/components/schemas/Indexer_GetTransactionHistory_Response"
                },
                "example": {
                  "page": {
                    "after": "es-translated rmExGgC37OVhMnhCMHhiMjMzM2NlNDliNzlmMzcyOGUwYWFjNzNlNGMwNzYzYmVjODBlYmVmZGViZWZlOWU1ZDVmZGNiNWVmNzMyZWE2YTN4KjB4ZTZlYjI4Mzk4Y2NiZTQ2YWE1MDViNjJiOTY4MjJjMmNlOGRhYWJmNGE0eCoweGRkOTAxMjY4NTY5NTdhYTFlOWM1Y2MzMzk1ZTg2NmI2ZWI4MzBhNDRhNQJhNngqMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYTd4KjB4ZTZlYjI4Mzk4Y2NiZTQ2YWE1MDViNjJiOTY4MjJjMmNlOGRhYWJmNGE4eEIweDJkNmFiZmE1MTI2NDRmYzVjMjY2Nzk2ZTg4MzMxYmY0MWNhZDc1YWFlMjE4ZDQxODk0ODU1MzU4ZDhjODlhMGRhOQBhYQFhYmBhZIFDIjAiYWWBRCI2MiJhYxpm6I0N",
                    "pageSize": "MOCKDATA + es-translated 10",
                    "more": "es-translated true"
                  },
                  "transactions": [
                    {
                      "txnHash": "es-translated 0x64628263b93ccad7dfd6fb1a81f1bcdadd0eb89649e0a43bdf65f639fddcd319",
                      "blockNumber": "MOCKDATA + es-translated 12215569",
                      "blockHash": "es-translated 0x05a4b055603a0b0cdb9e0d1bc28088bb4fca79a83d32bdc4a98d665e06ae7564",
                      "chainId": "MOCKDATA + es-translated 80002",
                      "metaTxnID": null,
                      "transfers": [
                        {
                          "transferType": "es-translated RECEIVE",
                          "contractAddress": "es-translated 0xdd90126856957aa1e9c5cc3395e866b6eb830a44",
                          "contractType": "es-translated ERC20",
                          "from": "MOCKDATA + es-translated 0x0000000000000000000000000000000000000000",
                          "to": "MOCKDATA + es-translated 0xe6eb28398ccbe46aa505b62b96822c2ce8daabf4",
                          "tokenIds": [
                            "es-translated 0"
                          ],
                          "amounts": [
                            "MOCKDATA + es-translated 33"
                          ],
                          "logIndex": "MOCKDATA + es-translated 9",
                          "contractInfo": {
                            "chainId": "MOCKDATA + es-translated 80002",
                            "address": "es-translated 0xdd90126856957aa1e9c5cc3395e866b6eb830a44",
                            "name": "es-translated Oracle Token",
                            "type": "es-translated ERC20",
                            "symbol": "MOCKDATA + es-translated ",
                            "deployed": "es-translated true",
                            "bytecodeHash": "MOCKDATA + es-translated 0x77d12b9637a99b3ba23920eea929a68cc89b49a0e1ff4d2a71b798550cc0060e",
                            "extensions": {
                              "link": "MOCKDATA + es-translated ",
                              "description": "MOCKDATA + es-translated ",
                              "ogImage": "MOCKDATA + es-translated ",
                              "originChainId": "es-translated 0",
                              "originAddress": "es-translated 0xdd90126856957aa1e9c5cc3395e866b6eb830a44",
                              "verified": "es-translated true",
                              "verifiedBy": "es-translated Sequence Builder"
                            },
                            "updatedAt": "MOCKDATA + es-translated 0001-01-01T00:00:00Z"
                          }
                        }
                      ],
                      "timestamp": "es-translated 2024-09-20T20:36:45Z"
                    },
                    {
                      "txnHash": "MOCKDATA + es-translated 0x5aae198a65b993a767bd495ea77b7825e0e884d9dcc446a1515097eb962814d6",
                      "blockNumber": "es-translated 12213913",
                      "blockHash": "MOCKDATA + es-translated 0x726ccdee4ef384493f96c666e959258ba70689bd6553c098a51542b2627a8b22",
                      "chainId": "MOCKDATA + es-translated 80002",
                      "metaTxnID": null,
                      "transfers": [
                        {
                          "transferType": "es-translated RECEIVE",
                          "contractAddress": "es-translated 0xdd90126856957aa1e9c5cc3395e866b6eb830a44",
                          "contractType": "es-translated ERC20",
                          "from": "MOCKDATA + es-translated 0x0000000000000000000000000000000000000000",
                          "to": "MOCKDATA + es-translated 0xe6eb28398ccbe46aa505b62b96822c2ce8daabf4",
                          "tokenIds": [
                            "es-translated 0"
                          ],
                          "amounts": [
                            "es-translated 1000"
                          ],
                          "logIndex": "es-translated 1",
                          "contractInfo": {
                            "chainId": "MOCKDATA + es-translated 80002",
                            "address": "es-translated 0xdd90126856957aa1e9c5cc3395e866b6eb830a44",
                            "name": "es-translated Oracle Token",
                            "type": "es-translated ERC20",
                            "symbol": "MOCKDATA + es-translated ",
                            "deployed": "es-translated true",
                            "bytecodeHash": "MOCKDATA + es-translated 0x77d12b9637a99b3ba23920eea929a68cc89b49a0e1ff4d2a71b798550cc0060e",
                            "extensions": {
                              "link": "MOCKDATA + es-translated ",
                              "description": "MOCKDATA + es-translated ",
                              "ogImage": "MOCKDATA + es-translated ",
                              "originChainId": "es-translated 0",
                              "originAddress": "es-translated 0xdd90126856957aa1e9c5cc3395e866b6eb830a44",
                              "verified": "es-translated true",
                              "verifiedBy": "es-translated Sequence Builder"
                            },
                            "updatedAt": "MOCKDATA + es-translated 0001-01-01T00:00:00Z"
                          }
                        }
                      ],
                      "timestamp": "es-translated 2024-09-20T19:37:18Z"
                    }
                  ]
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorAborted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnavailable"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorResourceExhausted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMetadataCallFailed"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated public"
        ],
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Indexer/SyncBalance": {
      "post": {
        "summary": "es-translated SyncBalance",
        "description": "es-translated Re-sync an incorrect token balance with the correct on-chain balance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Indexer_SyncBalance_Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Indexer_SyncBalance_Response"
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorAborted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnavailable"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorResourceExhausted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMetadataCallFailed"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Indexer/FetchTransactionReceipt": {
      "post": {
        "summary": "es-translated FetchTransactionReceipt",
        "description": "es-translated On Sepolia Mainnet, get the transaction receipt for a specific hash after a certain number of blocks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Indexer_FetchTransactionReceipt_Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Indexer_FetchTransactionReceipt_Response"
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorAborted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnavailable"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorResourceExhausted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMetadataCallFailed"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated public"
        ],
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Indexer/GetOrderbookOrders": {
      "post": {
        "summary": "es-translated GetOrderbookOrders",
        "description": "es-translated These parameters are depracated, please don't use them: - filters - beforeExpiryTimestamp - blockNumberAfter - createdAtAfter and in OrderbookOrderFilter these fields are depracated: - userAddress - excludeUserAddress\nUse 'filter' and these fields instead - userAddresses - excludeUserAddress'",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Indexer_GetOrderbookOrders_Request"
              },
              "example": {
                "page": {
                  "page": "es-translated 1",
                  "pageSize": "es-translated 100"
                },
                "orderbookContractAddress": "MOCKDATA + es-translated 0xfdb42A198a932C8D3B506Ffa5e855bC4b348a712",
                "collectionAddress": "es-translated 0x602d5dc17490794267c7fa5f58a453eb9159a86d",
                "currencyAddresses": [
                  "MOCKDATA + es-translated 0x7ceb23fd6bc0add59e62ac25578270cff1b9f619",
                  "MOCKDATA + es-translated 0x0000000000000000000000000000000000000000",
                  "es-translated 0x3c499c542cef5e3811e1192ce70d8cc03d5c3359"
                ],
                "filter": {
                  "isListing": null,
                  "userAddresses": null,
                  "tokenIds": null,
                  "excludeUserAddresses": null,
                  "afterBlockNumber": "es-translated 0",
                  "afterCreatedAt": "es-translated 0",
                  "beforeExpiry": "es-translated 0",
                  "userAddress": null,
                  "excludeUserAddress": null
                },
                "orderStatuses": [
                  "es-translated OPEN"
                ],
                "filters": null,
                "beforeExpiryTimestamp": "es-translated 0",
                "blockNumberAfter": "es-translated 0",
                "createdAtAfter": "es-translated 0"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "MOCKDATA + es-translated #/components/schemas/Indexer_GetOrderbookOrders_Response"
                },
                "example": {
                  "page": {
                    "page": "MOCKDATA + es-translated 2",
                    "pageSize": "es-translated 100",
                    "more": "es-translated false"
                  },
                  "orders": [
                    {
                      "orderId": "es-translated 1198",
                      "tokenContract": "es-translated 0x602d5dc17490794267c7fa5f58a453eb9159a86d",
                      "tokenId": "MOCKDATA + es-translated 3",
                      "isListing": "es-translated true",
                      "quantity": "es-translated 1",
                      "quantityRemaining": "es-translated 1",
                      "currencyAddress": "es-translated 0x3c499c542cef5e3811e1192ce70d8cc03d5c3359",
                      "pricePerToken": "MOCKDATA + es-translated 1000000",
                      "expiry": "es-translated 1729168819",
                      "orderStatus": "es-translated OPEN",
                      "createdBy": "MOCKDATA + es-translated 0xf43a1defbd32243fd83fe702f7817dde3319246e",
                      "blockNumber": "es-translated 63027844",
                      "orderbookContractAddress": "MOCKDATA + es-translated 0xfdb42A198a932C8D3B506Ffa5e855bC4b348a712",
                      "createdAt": "MOCKDATA + es-translated 1728909642"
                    }
                  ]
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorAborted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnavailable"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorResourceExhausted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMetadataCallFailed"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated secret"
        ],
        "security": [
          {
            "BearerAuth": [
              "es-translated eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiMHhiZWU3NGU3ZmZkNzdkMThhZDJhOTg2ODEyZGE2MTc5ODk0MDY4ODZjIiwiaWF0IjoxNzQxNjg3NDg4LCJwcm9qZWN0IjoxNjgxNX0.LvTwKf0T6IBK9HuRFboXCNh2YY9d6EwDoQAlGYC80KQ"
            ]
          }
        ]
      }
    },
    "/rpc/Indexer/GetTopOrders": {
      "post": {
        "summary": "es-translated GetTopOrders",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Indexer_GetTopOrders_Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Indexer_GetTopOrders_Response"
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorAborted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnavailable"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorResourceExhausted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMetadataCallFailed"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated secret"
        ],
        "security": [
          {
            "BearerAuth": [
              "es-translated eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiMHhiZWU3NGU3ZmZkNzdkMThhZDJhOTg2ODEyZGE2MTc5ODk0MDY4ODZjIiwiaWF0IjoxNzQxNjg3NDg4LCJwcm9qZWN0IjoxNjgxNX0.LvTwKf0T6IBK9HuRFboXCNh2YY9d6EwDoQAlGYC80KQ"
            ]
          }
        ]
      }
    },
    "/rpc/Indexer/FetchTransactionReceiptWithFilter": {
      "post": {
        "summary": "MOCKDATA + es-translated FetchTransactionReceiptWithFilter",
        "description": "es-translated On Sepolia Mainnet, get the transaction receipt for a specific hash after a certain number of blocks for a certain filter",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Indexer_FetchTransactionReceiptWithFilter_Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Indexer_FetchTransactionReceiptWithFilter_Response"
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorAborted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnavailable"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorResourceExhausted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMetadataCallFailed"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated public"
        ],
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Indexer/GetAllWebhookListeners": {
      "post": {
        "summary": "es-translated GetAllWebhookListeners",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "es-translated #/components/schemas/Indexer_GetAllWebhookListeners_Request"
              },
              "example": {
                "projectId": "MOCKDATA + es-translated 31396"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Indexer_GetAllWebhookListeners_Response"
                },
                "example": {
                  "listeners": [
                    {
                      "id": "MOCKDATA + es-translated 160497579",
                      "projectID": "MOCKDATA + es-translated 31396",
                      "url": "es-translated https://webhook.site/#!/view/a2859143-0a52-4b69-98f2-a58733e4dcf0",
                      "filters": {
                        "events": [
                          "MOCKDATA + es-translated Transfer(address indexed from,address indexed to,uint256 indexed tokenId)"
                        ],
                        "contractAddresses": [
                          "es-translated 0x9bec34c1f7098e278afd48fedcf13355b854364a"
                        ],
                        "accounts": [
                          "MOCKDATA + es-translated 0xe6eb28398ccbe46aa505b62b96822c2ce8daabf4"
                        ],
                        "tokenIDs": null
                      },
                      "name": "MOCKDATA + es-translated webhook.site #a84730",
                      "updatedAt": "es-translated 2024-10-10T20:37:01.685037Z",
                      "active": "es-translated true"
                    }
                  ]
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorAborted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnavailable"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorResourceExhausted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMetadataCallFailed"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated secret"
        ],
        "security": [
          {
            "BearerAuth": [
              "es-translated eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiMHhiZWU3NGU3ZmZkNzdkMThhZDJhOTg2ODEyZGE2MTc5ODk0MDY4ODZjIiwiaWF0IjoxNzQxNjg3NDg4LCJwcm9qZWN0IjoxNjgxNX0.LvTwKf0T6IBK9HuRFboXCNh2YY9d6EwDoQAlGYC80KQ"
            ]
          }
        ]
      }
    },
    "/rpc/Indexer/GetWebhookListener": {
      "post": {
        "summary": "MOCKDATA + es-translated GetWebhookListener",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "es-translated #/components/schemas/Indexer_GetWebhookListener_Request"
              },
              "example": {
                "id": "MOCKDATA + es-translated 160497579",
                "projectId": "MOCKDATA + es-translated 31396"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "MOCKDATA + es-translated #/components/schemas/Indexer_GetWebhookListener_Response"
                },
                "example": {
                  "listener": {
                    "id": "MOCKDATA + es-translated 160497579",
                    "projectID": "MOCKDATA + es-translated 31396",
                    "url": "es-translated https://webhook.site/#!/view/a2859143-0a52-4b69-98f2-a58733e4dcf0",
                    "filters": {
                      "events": [
                        "MOCKDATA + es-translated Transfer(address indexed from,address indexed to,uint256 indexed tokenId)"
                      ],
                      "contractAddresses": [
                        "es-translated 0x9bec34c1f7098e278afd48fedcf13355b854364a"
                      ],
                      "accounts": [
                        "MOCKDATA + es-translated 0xe6eb28398ccbe46aa505b62b96822c2ce8daabf4"
                      ],
                      "tokenIDs": null
                    },
                    "name": "MOCKDATA + es-translated webhook.site #a84730",
                    "updatedAt": "es-translated 2024-10-10T20:37:01.685037632Z",
                    "active": "es-translated true"
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorAborted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnavailable"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorResourceExhausted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMetadataCallFailed"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated secret"
        ],
        "security": [
          {
            "BearerAuth": [
              "es-translated eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiMHhiZWU3NGU3ZmZkNzdkMThhZDJhOTg2ODEyZGE2MTc5ODk0MDY4ODZjIiwiaWF0IjoxNzQxNjg3NDg4LCJwcm9qZWN0IjoxNjgxNX0.LvTwKf0T6IBK9HuRFboXCNh2YY9d6EwDoQAlGYC80KQ"
            ]
          }
        ]
      }
    },
    "/rpc/Indexer/AddWebhookListener": {
      "post": {
        "summary": "MOCKDATA + es-translated AddWebhookListener",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "es-translated #/components/schemas/Indexer_AddWebhookListener_Request"
              },
              "example": {
                "filters": {
                  "accounts": [
                    "MOCKDATA + es-translated 0xe6eB28398CCBe46aA505b62b96822c2Ce8DAABf4"
                  ],
                  "contractAddresses": [
                    "es-translated 0x9bec34c1f7098e278afd48fedcf13355b854364a"
                  ],
                  "events": [
                    "es-translated Transfer(address indexed from, address indexed to, uint256 indexed tokenId)"
                  ]
                },
                "projectId": "MOCKDATA + es-translated 31396",
                "url": "es-translated https://webhook.site/#!/view/a2859143-0a52-4b69-98f2-a58733e4dcf0"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "MOCKDATA + es-translated #/components/schemas/Indexer_AddWebhookListener_Response"
                },
                "example": {
                  "status": "es-translated true",
                  "listener": {
                    "id": "MOCKDATA + es-translated 160497579",
                    "projectID": "MOCKDATA + es-translated 31396",
                    "url": "es-translated https://webhook.site/#!/view/a2859143-0a52-4b69-98f2-a58733e4dcf0",
                    "filters": {
                      "events": [
                        "MOCKDATA + es-translated Transfer(address indexed from,address indexed to,uint256 indexed tokenId)"
                      ],
                      "contractAddresses": [
                        "es-translated 0x9bec34c1f7098e278afd48fedcf13355b854364a"
                      ],
                      "accounts": [
                        "MOCKDATA + es-translated 0xe6eb28398ccbe46aa505b62b96822c2ce8daabf4"
                      ],
                      "tokenIDs": null
                    },
                    "name": "MOCKDATA + es-translated webhook.site #a84730",
                    "updatedAt": "es-translated 2024-10-10T20:37:01.685037632Z",
                    "active": "es-translated true"
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorAborted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnavailable"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorResourceExhausted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMetadataCallFailed"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated secret"
        ],
        "security": [
          {
            "BearerAuth": [
              "es-translated eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiMHhiZWU3NGU3ZmZkNzdkMThhZDJhOTg2ODEyZGE2MTc5ODk0MDY4ODZjIiwiaWF0IjoxNzQxNjg3NDg4LCJwcm9qZWN0IjoxNjgxNX0.LvTwKf0T6IBK9HuRFboXCNh2YY9d6EwDoQAlGYC80KQ"
            ]
          }
        ]
      }
    },
    "/rpc/Indexer/UpdateWebhookListener": {
      "post": {
        "summary": "MOCKDATA + es-translated UpdateWebhookListener",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Indexer_UpdateWebhookListener_Request"
              },
              "example": {
                "filters": {
                  "accounts": [
                    "MOCKDATA + es-translated 0xe6eB28398CCBe46aA505b62b96822c2Ce8DAABf4"
                  ],
                  "contractAddresses": [
                    "es-translated 0x9bec34c1f7098e278afd48fedcf13355b854364a"
                  ],
                  "tokenIDs": [
                    "es-translated 100"
                  ],
                  "events": [
                    "es-translated Transfer(address indexed from, address indexed to, uint256 indexed tokenId)"
                  ]
                },
                "projectId": "MOCKDATA + es-translated 31396",
                "url": "es-translated https://webhook.site/#!/view/a2859143-0a52-4b69-98f2-a58733e4dcf0"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Indexer_UpdateWebhookListener_Response"
                },
                "example": {
                  "status": "es-translated true",
                  "listener": {
                    "id": "MOCKDATA + es-translated 2435835685",
                    "projectID": "MOCKDATA + es-translated 31396",
                    "url": "es-translated https://webhook.site/#!/view/a2859143-0a52-4b69-98f2-a58733e4dcf0",
                    "filters": {
                      "events": [
                        "MOCKDATA + es-translated Transfer(address indexed from,address indexed to,uint256 indexed tokenId)"
                      ],
                      "contractAddresses": [
                        "es-translated 0x9bec34c1f7098e278afd48fedcf13355b854364a"
                      ],
                      "accounts": [
                        "MOCKDATA + es-translated 0xe6eb28398ccbe46aa505b62b96822c2ce8daabf4"
                      ],
                      "tokenIDs": [
                        "es-translated 100"
                      ]
                    },
                    "name": "es-translated webhook.site #b5cf2f",
                    "updatedAt": "MOCKDATA + es-translated 2024-10-10T20:52:58.924369913Z",
                    "active": "es-translated true"
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorAborted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnavailable"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorResourceExhausted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMetadataCallFailed"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated secret"
        ],
        "security": [
          {
            "BearerAuth": [
              "es-translated eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiMHhiZWU3NGU3ZmZkNzdkMThhZDJhOTg2ODEyZGE2MTc5ODk0MDY4ODZjIiwiaWF0IjoxNzQxNjg3NDg4LCJwcm9qZWN0IjoxNjgxNX0.LvTwKf0T6IBK9HuRFboXCNh2YY9d6EwDoQAlGYC80KQ"
            ]
          }
        ]
      }
    },
    "/rpc/Indexer/RemoveWebhookListener": {
      "post": {
        "summary": "es-translated RemoveWebhookListener",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Indexer_RemoveWebhookListener_Request"
              },
              "example": {
                "id": "MOCKDATA + es-translated 160497579",
                "projectId": "MOCKDATA + es-translated 31396"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Indexer_RemoveWebhookListener_Response"
                },
                "example": {
                  "status": "es-translated true"
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorAborted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnavailable"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorResourceExhausted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMetadataCallFailed"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated secret"
        ],
        "security": [
          {
            "BearerAuth": [
              "es-translated eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiMHhiZWU3NGU3ZmZkNzdkMThhZDJhOTg2ODEyZGE2MTc5ODk0MDY4ODZjIiwiaWF0IjoxNzQxNjg3NDg4LCJwcm9qZWN0IjoxNjgxNX0.LvTwKf0T6IBK9HuRFboXCNh2YY9d6EwDoQAlGYC80KQ"
            ]
          }
        ]
      }
    },
    "/rpc/Indexer/ToggleWebhookListener": {
      "post": {
        "summary": "es-translated ToggleWebhookListener",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "es-translated #/components/schemas/Indexer_ToggleWebhookListener_Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "MOCKDATA + es-translated #/components/schemas/Indexer_ToggleWebhookListener_Response"
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorAborted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnavailable"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorResourceExhausted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMetadataCallFailed"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated secret"
        ],
        "security": [
          {
            "BearerAuth": [
              "es-translated eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiMHhiZWU3NGU3ZmZkNzdkMThhZDJhOTg2ODEyZGE2MTc5ODk0MDY4ODZjIiwiaWF0IjoxNzQxNjg3NDg4LCJwcm9qZWN0IjoxNjgxNX0.LvTwKf0T6IBK9HuRFboXCNh2YY9d6EwDoQAlGYC80KQ"
            ]
          }
        ]
      }
    },
    "/rpc/Indexer/PauseAllWebhookListeners": {
      "post": {
        "summary": "MOCKDATA + es-translated PauseAllWebhookListeners",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Indexer_PauseAllWebhookListeners_Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Indexer_PauseAllWebhookListeners_Response"
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorAborted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnavailable"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorResourceExhausted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMetadataCallFailed"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated secret"
        ],
        "security": [
          {
            "BearerAuth": [
              "es-translated eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiMHhiZWU3NGU3ZmZkNzdkMThhZDJhOTg2ODEyZGE2MTc5ODk0MDY4ODZjIiwiaWF0IjoxNzQxNjg3NDg4LCJwcm9qZWN0IjoxNjgxNX0.LvTwKf0T6IBK9HuRFboXCNh2YY9d6EwDoQAlGYC80KQ"
            ]
          }
        ]
      }
    },
    "/rpc/Indexer/ResumeAllWebhookListeners": {
      "post": {
        "summary": "MOCKDATA + es-translated ResumeAllWebhookListeners",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "es-translated #/components/schemas/Indexer_ResumeAllWebhookListeners_Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "MOCKDATA + es-translated #/components/schemas/Indexer_ResumeAllWebhookListeners_Response"
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorAborted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnavailable"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorResourceExhausted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMetadataCallFailed"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated secret"
        ],
        "security": [
          {
            "BearerAuth": [
              "es-translated eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50IjoiMHhiZWU3NGU3ZmZkNzdkMThhZDJhOTg2ODEyZGE2MTc5ODk0MDY4ODZjIiwiaWF0IjoxNzQxNjg3NDg4LCJwcm9qZWN0IjoxNjgxNX0.LvTwKf0T6IBK9HuRFboXCNh2YY9d6EwDoQAlGYC80KQ"
            ]
          }
        ]
      }
    },
    "/rpc/Indexer/SubscribeReceipts": {
      "post": {
        "summary": "es-translated SubscribeReceipts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Indexer_SubscribeReceipts_Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "MOCKDATA + es-translated #/components/schemas/Indexer_SubscribeReceipts_Response"
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorAborted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnavailable"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorResourceExhausted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMetadataCallFailed"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "es-translated On Sepolia Mainnet, subscribe and receive receipts based on a filter of transaction hash and transaction details",
        "tags": [
          "MOCKDATA + es-translated public"
        ],
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Indexer/SubscribeEvents": {
      "post": {
        "summary": "MOCKDATA + es-translated SubscribeEvents",
        "description": "es-translated On Sepolia Mainnet, subscribe and receive receipts based on a filter of transaction mints",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "MOCKDATA + es-translated #/components/schemas/Indexer_SubscribeEvents_Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "es-translated #/components/schemas/Indexer_SubscribeEvents_Response"
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorAborted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnavailable"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorResourceExhausted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMetadataCallFailed"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "MOCKDATA + es-translated public"
        ],
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Indexer/SubscribeBalanceUpdates": {
      "post": {
        "summary": "es-translated SubscribeBalanceUpdates",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "es-translated #/components/schemas/Indexer_SubscribeBalanceUpdates_Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "es-translated OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "MOCKDATA + es-translated #/components/schemas/Indexer_SubscribeBalanceUpdates_Response"
                }
              }
            }
          },
          "4XX": {
            "description": "MOCKDATA + es-translated Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorSessionExpired"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorAborted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorTimeout"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorUnavailable"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorResourceExhausted"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorProjectNotFound"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorMetadataCallFailed"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "MOCKDATA + es-translated Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "MOCKDATA + es-translated #/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "es-translated #/components/schemas/ErrorWebrpcInternalError"
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "es-translated On Sepolia Mainnet, subscribe and receive balance updates based on the affected address, like wallet and contract address, with specific details",
        "tags": [
          "MOCKDATA + es-translated public"
        ],
        "security": [
          {
            "ApiKeyAuth": [
              "es-translated AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    }
  },
  "servers": [
    {
      "url": "MOCKDATA + es-translated https://amoy-indexer.sequence.app",
      "description": "es-translated Amoy Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://apechain-mainnet-indexer.sequence.app",
      "description": "es-translated Apechain-Mainnet Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://apechain-testnet-indexer.sequence.app",
      "description": "es-translated Apechain-Testnet Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://arbitrum-indexer.sequence.app",
      "description": "es-translated Arbitrum Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://arbitrum-nova-indexer.sequence.app",
      "description": "es-translated Arbitrum-Nova Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://arbitrum-sepolia-indexer.sequence.app",
      "description": "es-translated Arbitrum-Sepolia Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://astar-zkevm-indexer.sequence.app",
      "description": "es-translated Astar-Zkevm Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://astar-zkyoto-indexer.sequence.app",
      "description": "es-translated Astar-Zkyoto Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://avalanche-indexer.sequence.app",
      "description": "es-translated Avalanche Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://avalanche-testnet-indexer.sequence.app",
      "description": "es-translated Avalanche-Testnet Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://b3-indexer.sequence.app",
      "description": "es-translated B3 Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://b3-sepolia-indexer.sequence.app",
      "description": "es-translated B3-Sepolia Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://base-indexer.sequence.app",
      "description": "es-translated Base Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://base-sepolia-indexer.sequence.app",
      "description": "es-translated Base-Sepolia Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://blast-indexer.sequence.app",
      "description": "es-translated Blast Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://blast-sepolia-indexer.sequence.app",
      "description": "es-translated Blast-Sepolia Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://borne-testnet-indexer.sequence.app",
      "description": "es-translated Borne-Testnet Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://bsc-indexer.sequence.app",
      "description": "es-translated Bsc Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://bsc-testnet-indexer.sequence.app",
      "description": "es-translated Bsc-Testnet Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://gnosis-indexer.sequence.app",
      "description": "es-translated Gnosis Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://homeverse-indexer.sequence.app",
      "description": "es-translated Homeverse Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://homeverse-testnet-indexer.sequence.app",
      "description": "es-translated Homeverse-Testnet Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://immutable-zkevm-indexer.sequence.app",
      "description": "es-translated Immutable-Zkevm Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://immutable-zkevm-testnet-indexer.sequence.app",
      "description": "es-translated Immutable-Zkevm-Testnet Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://imx-indexer.sequence.app",
      "description": "es-translated Imx Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://imx-testnet-indexer.sequence.app",
      "description": "es-translated Imx-Testnet Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://mainnet-indexer.sequence.app",
      "description": "es-translated Mainnet Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://optimism-indexer.sequence.app",
      "description": "es-translated Optimism Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://optimism-sepolia-indexer.sequence.app",
      "description": "es-translated Optimism-Sepolia Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://polygon-indexer.sequence.app",
      "description": "es-translated Polygon Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://polygon-zkevm-indexer.sequence.app",
      "description": "es-translated Polygon-Zkevm Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://rootnet-indexer.sequence.app",
      "description": "es-translated Rootnet Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://rootnet-porcini-indexer.sequence.app",
      "description": "es-translated Rootnet-Porcini Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://sepolia-indexer.sequence.app",
      "description": "es-translated Sepolia Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://skale-nebula-testnet-indexer.sequence.app",
      "description": "es-translated Skale-Nebula-Testnet Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://soneium-minato-indexer.sequence.app",
      "description": "es-translated Soneium-Minato Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://toy-testnet-indexer.sequence.app",
      "description": "es-translated Toy-Testnet Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://xai-indexer.sequence.app",
      "description": "es-translated Xai Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://xai-sepolia-indexer.sequence.app",
      "description": "es-translated Xai-Sepolia Mainnet"
    },
    {
      "url": "MOCKDATA + es-translated https://xr-sepolia-indexer.sequence.app",
      "description": "es-translated Xr-Sepolia Mainnet"
    }
  ],
  "tags": [
    {
      "name": "MOCKDATA + es-translated public",
      "description": "es-translated Endpoints accessible by passing your project-access-key in the header. This is injected whenever you login automatically."
    },
    {
      "name": "MOCKDATA + es-translated secret",
      "description": "MOCKDATA + es-translated Endpoints that require a Sequence service token intended to be secret. You can manually generate one on Sequence Builder and pass it as a Bearer Token."
    }
  ]
}
